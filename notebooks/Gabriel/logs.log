2025-02-25 16:15:27,335:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 16:15:27,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 16:15:27,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 16:15:27,338:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 16:21:26,920:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 16:21:26,922:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 16:21:26,922:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 16:21:26,923:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 16:22:23,751:INFO:PyCaret ClassificationExperiment
2025-02-25 16:22:23,751:INFO:Logging name: wheat_classification
2025-02-25 16:22:23,752:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-25 16:22:23,752:INFO:version 3.3.2
2025-02-25 16:22:23,752:INFO:Initializing setup()
2025-02-25 16:22:23,752:INFO:self.USI: 8bbb
2025-02-25 16:22:23,753:INFO:self._variable_keys: {'target_param', 'fold_shuffle_param', 'n_jobs_param', 'y_train', 'fix_imbalance', 'data', 'idx', 'X', 'logging_param', 'X_test', 'gpu_param', 'is_multiclass', 'fold_groups_param', 'gpu_n_jobs_param', 'memory', 'pipeline', 'USI', '_ml_usecase', 'log_plots_param', 'fold_generator', 'exp_id', 'y_test', 'y', '_available_plots', 'seed', 'exp_name_log', 'X_train', 'html_param'}
2025-02-25 16:22:23,753:INFO:Checking environment
2025-02-25 16:22:23,753:INFO:python_version: 3.11.11
2025-02-25 16:22:23,754:INFO:python_build: ('main', 'Dec 11 2024 16:34:19')
2025-02-25 16:22:23,754:INFO:machine: AMD64
2025-02-25 16:22:23,754:INFO:platform: Windows-10-10.0.26100-SP0
2025-02-25 16:22:23,765:INFO:Memory: svmem(total=16969424896, available=2266660864, percent=86.6, used=14702764032, free=2266660864)
2025-02-25 16:22:23,766:INFO:Physical Core: 4
2025-02-25 16:22:23,766:INFO:Logical Core: 8
2025-02-25 16:22:23,766:INFO:Checking libraries
2025-02-25 16:22:23,766:INFO:System:
2025-02-25 16:22:23,767:INFO:    python: 3.11.11 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:34:19) [MSC v.1929 64 bit (AMD64)]
2025-02-25 16:22:23,767:INFO:executable: C:\Users\Gabriel\anaconda3\envs\pycaret-env\python.exe
2025-02-25 16:22:23,767:INFO:   machine: Windows-10-10.0.26100-SP0
2025-02-25 16:22:23,767:INFO:PyCaret required dependencies:
2025-02-25 16:22:24,070:INFO:                 pip: 25.0
2025-02-25 16:22:24,071:INFO:          setuptools: 75.8.0
2025-02-25 16:22:24,071:INFO:             pycaret: 3.3.2
2025-02-25 16:22:24,071:INFO:             IPython: 8.32.0
2025-02-25 16:22:24,071:INFO:          ipywidgets: 8.1.5
2025-02-25 16:22:24,072:INFO:                tqdm: 4.67.1
2025-02-25 16:22:24,072:INFO:               numpy: 1.26.4
2025-02-25 16:22:24,072:INFO:              pandas: 2.1.4
2025-02-25 16:22:24,072:INFO:              jinja2: 3.1.5
2025-02-25 16:22:24,072:INFO:               scipy: 1.11.4
2025-02-25 16:22:24,072:INFO:              joblib: 1.3.2
2025-02-25 16:22:24,072:INFO:             sklearn: 1.4.2
2025-02-25 16:22:24,072:INFO:                pyod: 2.0.3
2025-02-25 16:22:24,072:INFO:            imblearn: 0.13.0
2025-02-25 16:22:24,073:INFO:   category_encoders: 2.7.0
2025-02-25 16:22:24,073:INFO:            lightgbm: 4.6.0
2025-02-25 16:22:24,073:INFO:               numba: 0.61.0
2025-02-25 16:22:24,073:INFO:            requests: 2.32.3
2025-02-25 16:22:24,073:INFO:          matplotlib: 3.7.5
2025-02-25 16:22:24,073:INFO:          scikitplot: 0.3.7
2025-02-25 16:22:24,073:INFO:         yellowbrick: 1.5
2025-02-25 16:22:24,075:INFO:              plotly: 5.24.1
2025-02-25 16:22:24,075:INFO:    plotly-resampler: Not installed
2025-02-25 16:22:24,075:INFO:             kaleido: 0.2.1
2025-02-25 16:22:24,075:INFO:           schemdraw: 0.15
2025-02-25 16:22:24,075:INFO:         statsmodels: 0.14.4
2025-02-25 16:22:24,075:INFO:              sktime: 0.26.0
2025-02-25 16:22:24,075:INFO:               tbats: 1.1.3
2025-02-25 16:22:24,075:INFO:            pmdarima: 2.0.4
2025-02-25 16:22:24,076:INFO:              psutil: 7.0.0
2025-02-25 16:22:24,076:INFO:          markupsafe: 3.0.2
2025-02-25 16:22:24,076:INFO:             pickle5: Not installed
2025-02-25 16:22:24,076:INFO:         cloudpickle: 3.1.1
2025-02-25 16:22:24,076:INFO:         deprecation: 2.1.0
2025-02-25 16:22:24,076:INFO:              xxhash: 3.5.0
2025-02-25 16:22:24,076:INFO:           wurlitzer: Not installed
2025-02-25 16:22:24,076:INFO:PyCaret optional dependencies:
2025-02-25 16:22:24,147:INFO:                shap: Not installed
2025-02-25 16:22:24,147:INFO:           interpret: Not installed
2025-02-25 16:22:24,148:INFO:                umap: Not installed
2025-02-25 16:22:24,148:INFO:     ydata_profiling: Not installed
2025-02-25 16:22:24,149:INFO:  explainerdashboard: Not installed
2025-02-25 16:22:24,149:INFO:             autoviz: Not installed
2025-02-25 16:22:24,149:INFO:           fairlearn: Not installed
2025-02-25 16:22:24,149:INFO:          deepchecks: Not installed
2025-02-25 16:22:24,149:INFO:             xgboost: Not installed
2025-02-25 16:22:24,149:INFO:            catboost: Not installed
2025-02-25 16:22:24,149:INFO:              kmodes: Not installed
2025-02-25 16:22:24,149:INFO:             mlxtend: Not installed
2025-02-25 16:22:24,150:INFO:       statsforecast: Not installed
2025-02-25 16:22:24,150:INFO:        tune_sklearn: Not installed
2025-02-25 16:22:24,150:INFO:                 ray: Not installed
2025-02-25 16:22:24,150:INFO:            hyperopt: Not installed
2025-02-25 16:22:24,150:INFO:              optuna: Not installed
2025-02-25 16:22:24,150:INFO:               skopt: Not installed
2025-02-25 16:22:24,150:INFO:              mlflow: 2.20.2
2025-02-25 16:22:24,151:INFO:              gradio: Not installed
2025-02-25 16:22:24,151:INFO:             fastapi: Not installed
2025-02-25 16:22:24,151:INFO:             uvicorn: Not installed
2025-02-25 16:22:24,151:INFO:              m2cgen: Not installed
2025-02-25 16:22:24,152:INFO:           evidently: Not installed
2025-02-25 16:22:24,152:INFO:               fugue: Not installed
2025-02-25 16:22:24,152:INFO:           streamlit: Not installed
2025-02-25 16:22:24,152:INFO:             prophet: Not installed
2025-02-25 16:22:24,152:INFO:None
2025-02-25 16:22:24,152:INFO:Set up data.
2025-02-25 16:22:24,168:INFO:Set up folding strategy.
2025-02-25 16:22:24,168:INFO:Set up train/test split.
2025-02-25 16:22:24,184:INFO:Set up index.
2025-02-25 16:22:24,185:INFO:Assigning column types.
2025-02-25 16:22:24,196:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-25 16:22:24,370:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-25 16:22:24,384:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:22:24,513:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:24,514:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:24,684:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-25 16:22:24,687:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:22:24,797:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:24,799:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:24,800:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-25 16:22:24,977:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:22:25,085:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:25,086:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:25,244:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:22:25,347:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:25,348:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:25,349:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-25 16:22:25,639:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:25,640:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:25,907:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:25,908:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:25,919:INFO:Preparing preprocessing pipeline...
2025-02-25 16:22:25,922:INFO:Set up label encoding.
2025-02-25 16:22:25,923:INFO:Set up simple imputation.
2025-02-25 16:22:25,923:INFO:Set up imbalanced handling.
2025-02-25 16:22:25,923:INFO:Set up column transformation.
2025-02-25 16:22:25,923:INFO:Set up feature normalization.
2025-02-25 16:22:25,923:INFO:Set up feature selection.
2025-02-25 16:22:26,206:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:26,207:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:26,941:INFO:Finished creating preprocessing pipeline.
2025-02-25 16:22:27,000:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Gabriel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImp...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=1,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2025-02-25 16:22:27,000:INFO:Creating final display dataframe.
2025-02-25 16:22:27,666:INFO:Setup _display_container:                     Description                 Value
0                    Session id                    42
1                        Target                  Type
2                   Target type            Multiclass
3                Target mapping      1: 0, 2: 1, 3: 2
4           Original data shape              (199, 8)
5        Transformed data shape              (204, 2)
6   Transformed train set shape              (144, 2)
7    Transformed test set shape               (60, 2)
8              Numeric features                     7
9                    Preprocess                  True
10              Imputation type                simple
11           Numeric imputation                  mean
12       Categorical imputation                  mode
13                Fix imbalance                  True
14         Fix imbalance method                 SMOTE
15               Transformation                  True
16        Transformation method           yeo-johnson
17                    Normalize                  True
18             Normalize method                zscore
19            Feature selection                  True
20     Feature selection method               classic
21  Feature selection estimator              lightgbm
22  Number of features selected                   0.2
23               Fold Generator       StratifiedKFold
24                  Fold Number                    10
25                     CPU Jobs                    -1
26                      Use GPU                 False
27               Log Experiment          MlflowLogger
28              Experiment Name  wheat_classification
29                          USI                  8bbb
2025-02-25 16:22:27,977:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:27,978:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:28,274:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:28,275:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:22:28,278:INFO:Logging experiment in loggers
2025-02-25 16:23:29,247:INFO:PyCaret ClassificationExperiment
2025-02-25 16:23:29,248:INFO:Logging name: wheat_classification
2025-02-25 16:23:29,248:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-25 16:23:29,248:INFO:version 3.3.2
2025-02-25 16:23:29,248:INFO:Initializing setup()
2025-02-25 16:23:29,248:INFO:self.USI: ebdc
2025-02-25 16:23:29,248:INFO:self._variable_keys: {'target_param', 'fold_shuffle_param', 'n_jobs_param', 'y_train', 'fix_imbalance', 'data', 'idx', 'X', 'logging_param', 'X_test', 'gpu_param', 'is_multiclass', 'fold_groups_param', 'gpu_n_jobs_param', 'memory', 'pipeline', 'USI', '_ml_usecase', 'log_plots_param', 'fold_generator', 'exp_id', 'y_test', 'y', '_available_plots', 'seed', 'exp_name_log', 'X_train', 'html_param'}
2025-02-25 16:23:29,248:INFO:Checking environment
2025-02-25 16:23:29,248:INFO:python_version: 3.11.11
2025-02-25 16:23:29,248:INFO:python_build: ('main', 'Dec 11 2024 16:34:19')
2025-02-25 16:23:29,248:INFO:machine: AMD64
2025-02-25 16:23:29,249:INFO:platform: Windows-10-10.0.26100-SP0
2025-02-25 16:23:29,256:INFO:Memory: svmem(total=16969424896, available=2314248192, percent=86.4, used=14655176704, free=2314248192)
2025-02-25 16:23:29,256:INFO:Physical Core: 4
2025-02-25 16:23:29,256:INFO:Logical Core: 8
2025-02-25 16:23:29,256:INFO:Checking libraries
2025-02-25 16:23:29,256:INFO:System:
2025-02-25 16:23:29,256:INFO:    python: 3.11.11 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:34:19) [MSC v.1929 64 bit (AMD64)]
2025-02-25 16:23:29,256:INFO:executable: C:\Users\Gabriel\anaconda3\envs\pycaret-env\python.exe
2025-02-25 16:23:29,256:INFO:   machine: Windows-10-10.0.26100-SP0
2025-02-25 16:23:29,258:INFO:PyCaret required dependencies:
2025-02-25 16:23:29,258:INFO:                 pip: 25.0
2025-02-25 16:23:29,258:INFO:          setuptools: 75.8.0
2025-02-25 16:23:29,258:INFO:             pycaret: 3.3.2
2025-02-25 16:23:29,258:INFO:             IPython: 8.32.0
2025-02-25 16:23:29,259:INFO:          ipywidgets: 8.1.5
2025-02-25 16:23:29,259:INFO:                tqdm: 4.67.1
2025-02-25 16:23:29,259:INFO:               numpy: 1.26.4
2025-02-25 16:23:29,259:INFO:              pandas: 2.1.4
2025-02-25 16:23:29,259:INFO:              jinja2: 3.1.5
2025-02-25 16:23:29,260:INFO:               scipy: 1.11.4
2025-02-25 16:23:29,260:INFO:              joblib: 1.3.2
2025-02-25 16:23:29,260:INFO:             sklearn: 1.4.2
2025-02-25 16:23:29,260:INFO:                pyod: 2.0.3
2025-02-25 16:23:29,260:INFO:            imblearn: 0.13.0
2025-02-25 16:23:29,261:INFO:   category_encoders: 2.7.0
2025-02-25 16:23:29,261:INFO:            lightgbm: 4.6.0
2025-02-25 16:23:29,261:INFO:               numba: 0.61.0
2025-02-25 16:23:29,261:INFO:            requests: 2.32.3
2025-02-25 16:23:29,261:INFO:          matplotlib: 3.7.5
2025-02-25 16:23:29,262:INFO:          scikitplot: 0.3.7
2025-02-25 16:23:29,262:INFO:         yellowbrick: 1.5
2025-02-25 16:23:29,262:INFO:              plotly: 5.24.1
2025-02-25 16:23:29,262:INFO:    plotly-resampler: Not installed
2025-02-25 16:23:29,262:INFO:             kaleido: 0.2.1
2025-02-25 16:23:29,263:INFO:           schemdraw: 0.15
2025-02-25 16:23:29,263:INFO:         statsmodels: 0.14.4
2025-02-25 16:23:29,263:INFO:              sktime: 0.26.0
2025-02-25 16:23:29,264:INFO:               tbats: 1.1.3
2025-02-25 16:23:29,264:INFO:            pmdarima: 2.0.4
2025-02-25 16:23:29,264:INFO:              psutil: 7.0.0
2025-02-25 16:23:29,264:INFO:          markupsafe: 3.0.2
2025-02-25 16:23:29,264:INFO:             pickle5: Not installed
2025-02-25 16:23:29,264:INFO:         cloudpickle: 3.1.1
2025-02-25 16:23:29,264:INFO:         deprecation: 2.1.0
2025-02-25 16:23:29,265:INFO:              xxhash: 3.5.0
2025-02-25 16:23:29,265:INFO:           wurlitzer: Not installed
2025-02-25 16:23:29,265:INFO:PyCaret optional dependencies:
2025-02-25 16:23:29,265:INFO:                shap: Not installed
2025-02-25 16:23:29,265:INFO:           interpret: Not installed
2025-02-25 16:23:29,265:INFO:                umap: Not installed
2025-02-25 16:23:29,266:INFO:     ydata_profiling: Not installed
2025-02-25 16:23:29,266:INFO:  explainerdashboard: Not installed
2025-02-25 16:23:29,266:INFO:             autoviz: Not installed
2025-02-25 16:23:29,266:INFO:           fairlearn: Not installed
2025-02-25 16:23:29,266:INFO:          deepchecks: Not installed
2025-02-25 16:23:29,266:INFO:             xgboost: Not installed
2025-02-25 16:23:29,267:INFO:            catboost: Not installed
2025-02-25 16:23:29,267:INFO:              kmodes: Not installed
2025-02-25 16:23:29,267:INFO:             mlxtend: Not installed
2025-02-25 16:23:29,267:INFO:       statsforecast: Not installed
2025-02-25 16:23:29,267:INFO:        tune_sklearn: Not installed
2025-02-25 16:23:29,267:INFO:                 ray: Not installed
2025-02-25 16:23:29,267:INFO:            hyperopt: Not installed
2025-02-25 16:23:29,267:INFO:              optuna: Not installed
2025-02-25 16:23:29,267:INFO:               skopt: Not installed
2025-02-25 16:23:29,267:INFO:              mlflow: 2.20.2
2025-02-25 16:23:29,267:INFO:              gradio: Not installed
2025-02-25 16:23:29,268:INFO:             fastapi: Not installed
2025-02-25 16:23:29,268:INFO:             uvicorn: Not installed
2025-02-25 16:23:29,268:INFO:              m2cgen: Not installed
2025-02-25 16:23:29,268:INFO:           evidently: Not installed
2025-02-25 16:23:29,268:INFO:               fugue: Not installed
2025-02-25 16:23:29,268:INFO:           streamlit: Not installed
2025-02-25 16:23:29,269:INFO:             prophet: Not installed
2025-02-25 16:23:29,269:INFO:None
2025-02-25 16:23:29,269:INFO:Set up data.
2025-02-25 16:23:29,284:INFO:Set up folding strategy.
2025-02-25 16:23:29,285:INFO:Set up train/test split.
2025-02-25 16:23:29,295:INFO:Set up index.
2025-02-25 16:23:29,295:INFO:Assigning column types.
2025-02-25 16:23:29,307:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-25 16:23:29,512:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-25 16:23:29,514:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:23:29,645:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:29,646:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:29,879:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-25 16:23:29,883:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:23:29,988:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:29,989:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:29,990:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-25 16:23:30,145:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:23:30,258:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:30,258:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:30,444:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:23:30,537:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:30,538:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:30,538:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-25 16:23:30,847:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:30,854:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:31,127:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:31,128:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:31,130:INFO:Preparing preprocessing pipeline...
2025-02-25 16:23:31,134:INFO:Set up label encoding.
2025-02-25 16:23:31,134:INFO:Set up simple imputation.
2025-02-25 16:23:31,134:INFO:Set up imbalanced handling.
2025-02-25 16:23:31,135:INFO:Set up column transformation.
2025-02-25 16:23:31,135:INFO:Set up feature normalization.
2025-02-25 16:23:31,135:INFO:Set up feature selection.
2025-02-25 16:23:31,374:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:31,375:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:31,638:INFO:Finished creating preprocessing pipeline.
2025-02-25 16:23:31,699:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Gabriel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImp...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=1,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2025-02-25 16:23:31,699:INFO:Creating final display dataframe.
2025-02-25 16:23:32,094:INFO:Setup _display_container:                     Description                 Value
0                    Session id                    42
1                        Target                  Type
2                   Target type            Multiclass
3                Target mapping      1: 0, 2: 1, 3: 2
4           Original data shape              (199, 8)
5        Transformed data shape              (204, 2)
6   Transformed train set shape              (144, 2)
7    Transformed test set shape               (60, 2)
8              Numeric features                     7
9                    Preprocess                  True
10              Imputation type                simple
11           Numeric imputation                  mean
12       Categorical imputation                  mode
13                Fix imbalance                  True
14         Fix imbalance method                 SMOTE
15               Transformation                  True
16        Transformation method           yeo-johnson
17                    Normalize                  True
18             Normalize method                zscore
19            Feature selection                  True
20     Feature selection method               classic
21  Feature selection estimator              lightgbm
22  Number of features selected                   0.2
23               Fold Generator       StratifiedKFold
24                  Fold Number                    10
25                     CPU Jobs                    -1
26                      Use GPU                 False
27               Log Experiment                 False
28              Experiment Name  wheat_classification
29                          USI                  ebdc
2025-02-25 16:23:32,386:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:32,387:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:32,723:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:32,724:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:23:32,728:INFO:setup() successfully completed in 3.49s...............
2025-02-25 16:24:14,816:INFO:Initializing compare_models()
2025-02-25 16:24:14,816:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-02-25 16:24:14,816:INFO:Checking exceptions
2025-02-25 16:24:14,826:INFO:Preparing display monitor
2025-02-25 16:24:14,893:INFO:Initializing Logistic Regression
2025-02-25 16:24:14,893:INFO:Total runtime is 8.384386698404947e-06 minutes
2025-02-25 16:24:14,902:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:14,903:INFO:Initializing create_model()
2025-02-25 16:24:14,904:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:14,904:INFO:Checking exceptions
2025-02-25 16:24:14,904:INFO:Importing libraries
2025-02-25 16:24:14,904:INFO:Copying training dataset
2025-02-25 16:24:14,911:INFO:Defining folds
2025-02-25 16:24:14,911:INFO:Declaring metric variables
2025-02-25 16:24:14,922:INFO:Importing untrained model
2025-02-25 16:24:14,933:INFO:Logistic Regression Imported successfully
2025-02-25 16:24:14,958:INFO:Starting cross validation
2025-02-25 16:24:14,987:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:24,062:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:24,073:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:24,078:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,087:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,090:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,100:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,110:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,122:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,138:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:24,150:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,157:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:24,164:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,170:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,179:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,184:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,200:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,504:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:24,527:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,541:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,549:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,588:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:24,599:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,612:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,622:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,770:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:24,781:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,795:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,807:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,818:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:24,830:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,842:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:24,852:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:25,190:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:25,192:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:25,202:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:25,209:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:25,211:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:25,214:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:25,220:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:25,227:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:25,247:INFO:Calculating mean and std
2025-02-25 16:24:25,250:INFO:Creating metrics dataframe
2025-02-25 16:24:25,260:INFO:Uploading results into container
2025-02-25 16:24:25,261:INFO:Uploading model into container now
2025-02-25 16:24:25,262:INFO:_master_model_container: 1
2025-02-25 16:24:25,262:INFO:_display_container: 2
2025-02-25 16:24:25,263:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-25 16:24:25,263:INFO:create_model() successfully completed......................................
2025-02-25 16:24:25,865:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:25,866:INFO:Creating metrics dataframe
2025-02-25 16:24:25,892:INFO:Initializing K Neighbors Classifier
2025-02-25 16:24:25,893:INFO:Total runtime is 0.18333046038945516 minutes
2025-02-25 16:24:25,908:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:25,909:INFO:Initializing create_model()
2025-02-25 16:24:25,910:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:25,910:INFO:Checking exceptions
2025-02-25 16:24:25,910:INFO:Importing libraries
2025-02-25 16:24:25,910:INFO:Copying training dataset
2025-02-25 16:24:25,923:INFO:Defining folds
2025-02-25 16:24:25,924:INFO:Declaring metric variables
2025-02-25 16:24:25,968:INFO:Importing untrained model
2025-02-25 16:24:25,985:INFO:K Neighbors Classifier Imported successfully
2025-02-25 16:24:26,007:INFO:Starting cross validation
2025-02-25 16:24:26,037:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:27,269:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,273:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,282:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,287:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,295:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,299:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,362:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,378:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,395:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,447:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,461:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,479:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,553:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,571:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,594:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,610:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,621:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,632:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,742:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,750:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,758:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,817:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,830:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:27,840:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:28,113:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:28,125:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:28,134:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:28,167:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:28,175:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:28,182:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:28,203:INFO:Calculating mean and std
2025-02-25 16:24:28,207:INFO:Creating metrics dataframe
2025-02-25 16:24:28,213:INFO:Uploading results into container
2025-02-25 16:24:28,215:INFO:Uploading model into container now
2025-02-25 16:24:28,216:INFO:_master_model_container: 2
2025-02-25 16:24:28,216:INFO:_display_container: 2
2025-02-25 16:24:28,219:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-25 16:24:28,219:INFO:create_model() successfully completed......................................
2025-02-25 16:24:28,483:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:28,483:INFO:Creating metrics dataframe
2025-02-25 16:24:28,511:INFO:Initializing Naive Bayes
2025-02-25 16:24:28,511:INFO:Total runtime is 0.2269662102063497 minutes
2025-02-25 16:24:28,522:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:28,523:INFO:Initializing create_model()
2025-02-25 16:24:28,523:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:28,524:INFO:Checking exceptions
2025-02-25 16:24:28,524:INFO:Importing libraries
2025-02-25 16:24:28,524:INFO:Copying training dataset
2025-02-25 16:24:28,539:INFO:Defining folds
2025-02-25 16:24:28,539:INFO:Declaring metric variables
2025-02-25 16:24:28,550:INFO:Importing untrained model
2025-02-25 16:24:28,562:INFO:Naive Bayes Imported successfully
2025-02-25 16:24:28,578:INFO:Starting cross validation
2025-02-25 16:24:28,613:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:29,937:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:29,954:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:29,964:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:29,971:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:29,976:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:29,980:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:29,988:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:29,994:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:29,996:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,014:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,077:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,092:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,103:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,296:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,304:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,313:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,316:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,326:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,326:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,376:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,382:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,388:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,480:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,493:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,505:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,848:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,856:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,863:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,884:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,892:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,897:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:30,918:INFO:Calculating mean and std
2025-02-25 16:24:30,922:INFO:Creating metrics dataframe
2025-02-25 16:24:30,928:INFO:Uploading results into container
2025-02-25 16:24:30,930:INFO:Uploading model into container now
2025-02-25 16:24:30,931:INFO:_master_model_container: 3
2025-02-25 16:24:30,932:INFO:_display_container: 2
2025-02-25 16:24:30,932:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-25 16:24:30,932:INFO:create_model() successfully completed......................................
2025-02-25 16:24:31,226:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:31,227:INFO:Creating metrics dataframe
2025-02-25 16:24:31,246:INFO:Initializing Decision Tree Classifier
2025-02-25 16:24:31,248:INFO:Total runtime is 0.27256778875986737 minutes
2025-02-25 16:24:31,257:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:31,257:INFO:Initializing create_model()
2025-02-25 16:24:31,258:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:31,258:INFO:Checking exceptions
2025-02-25 16:24:31,258:INFO:Importing libraries
2025-02-25 16:24:31,258:INFO:Copying training dataset
2025-02-25 16:24:31,268:INFO:Defining folds
2025-02-25 16:24:31,268:INFO:Declaring metric variables
2025-02-25 16:24:31,280:INFO:Importing untrained model
2025-02-25 16:24:31,291:INFO:Decision Tree Classifier Imported successfully
2025-02-25 16:24:31,315:INFO:Starting cross validation
2025-02-25 16:24:31,343:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:32,552:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,559:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,565:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,571:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,578:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,585:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,603:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,619:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,630:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,640:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,654:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,669:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,877:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,883:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,890:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,914:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,928:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,932:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,949:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,960:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:32,969:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:33,027:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:33,034:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:33,039:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:33,324:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:33,331:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:33,331:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:33,338:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:33,340:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:33,347:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:33,361:INFO:Calculating mean and std
2025-02-25 16:24:33,366:INFO:Creating metrics dataframe
2025-02-25 16:24:33,373:INFO:Uploading results into container
2025-02-25 16:24:33,374:INFO:Uploading model into container now
2025-02-25 16:24:33,375:INFO:_master_model_container: 4
2025-02-25 16:24:33,375:INFO:_display_container: 2
2025-02-25 16:24:33,377:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-02-25 16:24:33,377:INFO:create_model() successfully completed......................................
2025-02-25 16:24:33,620:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:33,620:INFO:Creating metrics dataframe
2025-02-25 16:24:33,642:INFO:Initializing SVM - Linear Kernel
2025-02-25 16:24:33,642:INFO:Total runtime is 0.3124897082646688 minutes
2025-02-25 16:24:33,654:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:33,655:INFO:Initializing create_model()
2025-02-25 16:24:33,655:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:33,656:INFO:Checking exceptions
2025-02-25 16:24:33,656:INFO:Importing libraries
2025-02-25 16:24:33,656:INFO:Copying training dataset
2025-02-25 16:24:33,666:INFO:Defining folds
2025-02-25 16:24:33,666:INFO:Declaring metric variables
2025-02-25 16:24:33,675:INFO:Importing untrained model
2025-02-25 16:24:33,686:INFO:SVM - Linear Kernel Imported successfully
2025-02-25 16:24:33,705:INFO:Starting cross validation
2025-02-25 16:24:33,731:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:34,847:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:34,848:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:34,853:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:34,854:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:34,869:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:34,871:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:34,881:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:34,883:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:34,889:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:34,887:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:34,889:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:34,906:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:34,920:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:34,935:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:34,940:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:34,960:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:34,980:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,151:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:35,159:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,175:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,185:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,198:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:35,203:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,211:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,213:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:35,217:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,340:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:35,343:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,347:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,349:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:35,351:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:35,352:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,354:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,363:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,364:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:35,367:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,623:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:35,625:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:35,627:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,627:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,632:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,634:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,634:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:35,638:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,639:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:35,644:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:35,666:INFO:Calculating mean and std
2025-02-25 16:24:35,671:INFO:Creating metrics dataframe
2025-02-25 16:24:35,675:INFO:Uploading results into container
2025-02-25 16:24:35,677:INFO:Uploading model into container now
2025-02-25 16:24:35,678:INFO:_master_model_container: 5
2025-02-25 16:24:35,678:INFO:_display_container: 2
2025-02-25 16:24:35,679:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-25 16:24:35,679:INFO:create_model() successfully completed......................................
2025-02-25 16:24:35,937:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:35,937:INFO:Creating metrics dataframe
2025-02-25 16:24:35,959:INFO:Initializing Ridge Classifier
2025-02-25 16:24:35,961:INFO:Total runtime is 0.35113013188044234 minutes
2025-02-25 16:24:35,969:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:35,971:INFO:Initializing create_model()
2025-02-25 16:24:35,971:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:35,971:INFO:Checking exceptions
2025-02-25 16:24:35,972:INFO:Importing libraries
2025-02-25 16:24:35,972:INFO:Copying training dataset
2025-02-25 16:24:35,984:INFO:Defining folds
2025-02-25 16:24:35,986:INFO:Declaring metric variables
2025-02-25 16:24:35,995:INFO:Importing untrained model
2025-02-25 16:24:36,005:INFO:Ridge Classifier Imported successfully
2025-02-25 16:24:36,027:INFO:Starting cross validation
2025-02-25 16:24:36,055:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:37,010:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:37,011:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,014:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,017:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:37,018:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,058:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:37,058:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:37,061:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,064:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,071:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,072:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,076:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:37,080:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,082:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,172:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:37,176:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,180:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,181:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:37,183:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,301:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:37,306:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,308:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:37,310:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,316:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,318:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,321:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:37,322:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:37,325:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,327:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,334:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:37,336:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,345:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,348:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:37,351:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,450:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:37,454:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,478:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,484:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:37,491:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,748:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:37,751:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,752:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:37,754:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,762:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,765:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,767:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:37,771:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:37,773:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,775:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:37,793:INFO:Calculating mean and std
2025-02-25 16:24:37,797:INFO:Creating metrics dataframe
2025-02-25 16:24:37,804:INFO:Uploading results into container
2025-02-25 16:24:37,804:INFO:Uploading model into container now
2025-02-25 16:24:37,805:INFO:_master_model_container: 6
2025-02-25 16:24:37,805:INFO:_display_container: 2
2025-02-25 16:24:37,806:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-02-25 16:24:37,806:INFO:create_model() successfully completed......................................
2025-02-25 16:24:38,068:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:38,068:INFO:Creating metrics dataframe
2025-02-25 16:24:38,095:INFO:Initializing Random Forest Classifier
2025-02-25 16:24:38,095:INFO:Total runtime is 0.38670545021692915 minutes
2025-02-25 16:24:38,108:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:38,110:INFO:Initializing create_model()
2025-02-25 16:24:38,111:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:38,111:INFO:Checking exceptions
2025-02-25 16:24:38,111:INFO:Importing libraries
2025-02-25 16:24:38,111:INFO:Copying training dataset
2025-02-25 16:24:38,126:INFO:Defining folds
2025-02-25 16:24:38,127:INFO:Declaring metric variables
2025-02-25 16:24:38,139:INFO:Importing untrained model
2025-02-25 16:24:38,151:INFO:Random Forest Classifier Imported successfully
2025-02-25 16:24:38,173:INFO:Starting cross validation
2025-02-25 16:24:38,203:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:40,408:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,409:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,418:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,421:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,422:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,422:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,428:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,433:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,433:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,437:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,448:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,451:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,502:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,514:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,524:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,620:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,632:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,638:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,667:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,677:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:40,687:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:41,045:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:41,056:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:41,068:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:41,613:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:41,622:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:41,630:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:41,648:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:41,656:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:41,660:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:41,678:INFO:Calculating mean and std
2025-02-25 16:24:41,682:INFO:Creating metrics dataframe
2025-02-25 16:24:41,688:INFO:Uploading results into container
2025-02-25 16:24:41,689:INFO:Uploading model into container now
2025-02-25 16:24:41,691:INFO:_master_model_container: 7
2025-02-25 16:24:41,692:INFO:_display_container: 2
2025-02-25 16:24:41,694:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:24:41,694:INFO:create_model() successfully completed......................................
2025-02-25 16:24:41,960:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:41,960:INFO:Creating metrics dataframe
2025-02-25 16:24:41,986:INFO:Initializing Quadratic Discriminant Analysis
2025-02-25 16:24:41,986:INFO:Total runtime is 0.45155635277430217 minutes
2025-02-25 16:24:41,995:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:41,995:INFO:Initializing create_model()
2025-02-25 16:24:41,996:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:41,996:INFO:Checking exceptions
2025-02-25 16:24:41,996:INFO:Importing libraries
2025-02-25 16:24:41,996:INFO:Copying training dataset
2025-02-25 16:24:42,004:INFO:Defining folds
2025-02-25 16:24:42,004:INFO:Declaring metric variables
2025-02-25 16:24:42,015:INFO:Importing untrained model
2025-02-25 16:24:42,025:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-25 16:24:42,047:INFO:Starting cross validation
2025-02-25 16:24:42,072:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:43,194:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:43,198:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:43,201:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,201:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:43,203:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,208:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,210:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,211:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,217:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,223:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:43,231:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,235:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,238:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,286:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:43,293:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,307:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,323:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,339:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:43,348:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,351:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:43,356:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,359:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,369:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,373:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,381:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,511:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:43,516:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,525:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,532:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:43,533:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,538:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,548:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,558:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,828:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:43,829:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:43,832:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,833:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,840:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,840:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,846:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,848:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:43,866:INFO:Calculating mean and std
2025-02-25 16:24:43,870:INFO:Creating metrics dataframe
2025-02-25 16:24:43,879:INFO:Uploading results into container
2025-02-25 16:24:43,880:INFO:Uploading model into container now
2025-02-25 16:24:43,881:INFO:_master_model_container: 8
2025-02-25 16:24:43,881:INFO:_display_container: 2
2025-02-25 16:24:43,882:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-25 16:24:43,884:INFO:create_model() successfully completed......................................
2025-02-25 16:24:44,123:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:44,124:INFO:Creating metrics dataframe
2025-02-25 16:24:44,148:INFO:Initializing Ada Boost Classifier
2025-02-25 16:24:44,149:INFO:Total runtime is 0.48759821653366087 minutes
2025-02-25 16:24:44,157:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:44,159:INFO:Initializing create_model()
2025-02-25 16:24:44,159:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:44,160:INFO:Checking exceptions
2025-02-25 16:24:44,160:INFO:Importing libraries
2025-02-25 16:24:44,160:INFO:Copying training dataset
2025-02-25 16:24:44,166:INFO:Defining folds
2025-02-25 16:24:44,168:INFO:Declaring metric variables
2025-02-25 16:24:44,173:INFO:Importing untrained model
2025-02-25 16:24:44,182:INFO:Ada Boost Classifier Imported successfully
2025-02-25 16:24:44,207:INFO:Starting cross validation
2025-02-25 16:24:44,236:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:45,329:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:24:45,369:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:24:45,412:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:24:45,619:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:24:45,722:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:24:45,868:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:24:45,963:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:45,971:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:45,992:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,006:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:46,016:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,024:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:24:46,074:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:46,082:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,095:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:46,099:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,100:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,104:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:46,110:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,113:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,120:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,310:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:46,315:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,347:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,359:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,439:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:46,445:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,456:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,462:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:46,468:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,491:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:46,496:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,506:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,517:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,524:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:24:46,534:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:46,539:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,550:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,555:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:24:46,559:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,790:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:24:46,812:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:24:46,897:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:46,899:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,909:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:46,921:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:47,150:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:47,153:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:47,166:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:47,187:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:47,220:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:47,233:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:47,246:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:47,269:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:47,306:INFO:Calculating mean and std
2025-02-25 16:24:47,310:INFO:Creating metrics dataframe
2025-02-25 16:24:47,318:INFO:Uploading results into container
2025-02-25 16:24:47,320:INFO:Uploading model into container now
2025-02-25 16:24:47,321:INFO:_master_model_container: 9
2025-02-25 16:24:47,321:INFO:_display_container: 2
2025-02-25 16:24:47,321:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-02-25 16:24:47,323:INFO:create_model() successfully completed......................................
2025-02-25 16:24:47,644:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:47,645:INFO:Creating metrics dataframe
2025-02-25 16:24:47,680:INFO:Initializing Gradient Boosting Classifier
2025-02-25 16:24:47,681:INFO:Total runtime is 0.5464732646942139 minutes
2025-02-25 16:24:47,693:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:47,694:INFO:Initializing create_model()
2025-02-25 16:24:47,695:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:47,695:INFO:Checking exceptions
2025-02-25 16:24:47,695:INFO:Importing libraries
2025-02-25 16:24:47,695:INFO:Copying training dataset
2025-02-25 16:24:47,710:INFO:Defining folds
2025-02-25 16:24:47,710:INFO:Declaring metric variables
2025-02-25 16:24:47,726:INFO:Importing untrained model
2025-02-25 16:24:47,739:INFO:Gradient Boosting Classifier Imported successfully
2025-02-25 16:24:47,762:INFO:Starting cross validation
2025-02-25 16:24:47,794:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:50,277:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:50,280:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,287:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:50,292:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,293:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,301:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,304:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,310:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,422:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:50,427:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,435:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,439:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,752:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:50,757:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,767:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,778:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,813:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:50,817:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,826:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,835:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,898:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:50,904:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,913:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,922:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:50,996:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:50,998:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:51,004:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:51,011:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:51,248:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:51,250:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:51,258:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:51,270:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:52,008:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:52,013:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:52,024:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:52,034:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:52,047:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:52,051:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:52,057:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:52,063:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:52,082:INFO:Calculating mean and std
2025-02-25 16:24:52,086:INFO:Creating metrics dataframe
2025-02-25 16:24:52,090:INFO:Uploading results into container
2025-02-25 16:24:52,093:INFO:Uploading model into container now
2025-02-25 16:24:52,093:INFO:_master_model_container: 10
2025-02-25 16:24:52,094:INFO:_display_container: 2
2025-02-25 16:24:52,095:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-25 16:24:52,095:INFO:create_model() successfully completed......................................
2025-02-25 16:24:52,329:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:52,330:INFO:Creating metrics dataframe
2025-02-25 16:24:52,352:INFO:Initializing Linear Discriminant Analysis
2025-02-25 16:24:52,352:INFO:Total runtime is 0.6243202408154805 minutes
2025-02-25 16:24:52,358:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:52,360:INFO:Initializing create_model()
2025-02-25 16:24:52,360:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:52,360:INFO:Checking exceptions
2025-02-25 16:24:52,360:INFO:Importing libraries
2025-02-25 16:24:52,360:INFO:Copying training dataset
2025-02-25 16:24:52,370:INFO:Defining folds
2025-02-25 16:24:52,371:INFO:Declaring metric variables
2025-02-25 16:24:52,378:INFO:Importing untrained model
2025-02-25 16:24:52,386:INFO:Linear Discriminant Analysis Imported successfully
2025-02-25 16:24:52,403:INFO:Starting cross validation
2025-02-25 16:24:52,424:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:53,549:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:53,555:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,574:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,580:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:53,584:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,589:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,606:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,616:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,626:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:53,636:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,659:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,669:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,747:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:53,752:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,762:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,783:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,879:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:53,884:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,895:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:53,901:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,002:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:54,004:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,012:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,024:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,035:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:54,037:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,045:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,051:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,117:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:54,119:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,126:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,133:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,335:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:54,340:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,347:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,355:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:24:54,355:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,359:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,368:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,376:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:54,389:INFO:Calculating mean and std
2025-02-25 16:24:54,391:INFO:Creating metrics dataframe
2025-02-25 16:24:54,397:INFO:Uploading results into container
2025-02-25 16:24:54,398:INFO:Uploading model into container now
2025-02-25 16:24:54,399:INFO:_master_model_container: 11
2025-02-25 16:24:54,399:INFO:_display_container: 2
2025-02-25 16:24:54,400:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-25 16:24:54,400:INFO:create_model() successfully completed......................................
2025-02-25 16:24:54,667:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:54,667:INFO:Creating metrics dataframe
2025-02-25 16:24:54,707:INFO:Initializing Extra Trees Classifier
2025-02-25 16:24:54,708:INFO:Total runtime is 0.6635865529378255 minutes
2025-02-25 16:24:54,717:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:54,719:INFO:Initializing create_model()
2025-02-25 16:24:54,720:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:54,720:INFO:Checking exceptions
2025-02-25 16:24:54,720:INFO:Importing libraries
2025-02-25 16:24:54,720:INFO:Copying training dataset
2025-02-25 16:24:54,730:INFO:Defining folds
2025-02-25 16:24:54,731:INFO:Declaring metric variables
2025-02-25 16:24:54,743:INFO:Importing untrained model
2025-02-25 16:24:54,753:INFO:Extra Trees Classifier Imported successfully
2025-02-25 16:24:54,773:INFO:Starting cross validation
2025-02-25 16:24:54,797:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:24:56,681:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,683:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,695:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,697:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,700:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,711:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,712:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,711:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,726:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,794:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,800:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,807:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,810:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,818:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,821:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,973:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,983:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:56,996:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,117:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,128:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,139:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,270:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,281:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,290:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,833:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,839:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,848:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,866:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,875:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,882:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:24:57,903:INFO:Calculating mean and std
2025-02-25 16:24:57,907:INFO:Creating metrics dataframe
2025-02-25 16:24:57,915:INFO:Uploading results into container
2025-02-25 16:24:57,917:INFO:Uploading model into container now
2025-02-25 16:24:57,919:INFO:_master_model_container: 12
2025-02-25 16:24:57,919:INFO:_display_container: 2
2025-02-25 16:24:57,921:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-02-25 16:24:57,921:INFO:create_model() successfully completed......................................
2025-02-25 16:24:58,178:INFO:SubProcess create_model() end ==================================
2025-02-25 16:24:58,178:INFO:Creating metrics dataframe
2025-02-25 16:24:58,220:INFO:Initializing Light Gradient Boosting Machine
2025-02-25 16:24:58,221:INFO:Total runtime is 0.7221393267313639 minutes
2025-02-25 16:24:58,233:INFO:SubProcess create_model() called ==================================
2025-02-25 16:24:58,234:INFO:Initializing create_model()
2025-02-25 16:24:58,234:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:24:58,234:INFO:Checking exceptions
2025-02-25 16:24:58,235:INFO:Importing libraries
2025-02-25 16:24:58,235:INFO:Copying training dataset
2025-02-25 16:24:58,247:INFO:Defining folds
2025-02-25 16:24:58,248:INFO:Declaring metric variables
2025-02-25 16:24:58,258:INFO:Importing untrained model
2025-02-25 16:24:58,275:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-25 16:24:58,301:INFO:Starting cross validation
2025-02-25 16:24:58,331:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:25:00,859:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:00,871:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:00,882:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:00,925:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:00,937:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:00,944:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,095:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,106:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,118:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,123:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,141:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,163:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,244:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,256:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,263:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:25:01,269:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,346:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,355:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,356:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,365:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,366:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,376:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,635:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,659:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:01,677:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:02,287:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:02,298:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:02,302:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:02,308:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:02,314:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:02,323:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:02,341:INFO:Calculating mean and std
2025-02-25 16:25:02,345:INFO:Creating metrics dataframe
2025-02-25 16:25:02,350:INFO:Uploading results into container
2025-02-25 16:25:02,352:INFO:Uploading model into container now
2025-02-25 16:25:02,353:INFO:_master_model_container: 13
2025-02-25 16:25:02,354:INFO:_display_container: 2
2025-02-25 16:25:02,355:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-25 16:25:02,355:INFO:create_model() successfully completed......................................
2025-02-25 16:25:02,637:INFO:SubProcess create_model() end ==================================
2025-02-25 16:25:02,638:INFO:Creating metrics dataframe
2025-02-25 16:25:02,671:INFO:Initializing Dummy Classifier
2025-02-25 16:25:02,671:INFO:Total runtime is 0.7963030219078064 minutes
2025-02-25 16:25:02,684:INFO:SubProcess create_model() called ==================================
2025-02-25 16:25:02,685:INFO:Initializing create_model()
2025-02-25 16:25:02,686:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9888736D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:25:02,686:INFO:Checking exceptions
2025-02-25 16:25:02,686:INFO:Importing libraries
2025-02-25 16:25:02,688:INFO:Copying training dataset
2025-02-25 16:25:02,702:INFO:Defining folds
2025-02-25 16:25:02,702:INFO:Declaring metric variables
2025-02-25 16:25:02,717:INFO:Importing untrained model
2025-02-25 16:25:02,738:INFO:Dummy Classifier Imported successfully
2025-02-25 16:25:02,775:INFO:Starting cross validation
2025-02-25 16:25:02,832:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:25:04,125:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,137:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,142:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:25:04,148:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,155:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,168:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,178:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:25:04,185:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,187:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,199:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,205:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:25:04,214:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,285:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,292:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,298:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:25:04,307:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,324:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,335:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,338:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:25:04,348:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,442:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,450:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,452:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:25:04,456:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,505:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,515:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,520:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:25:04,524:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,560:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,570:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,575:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:25:04,581:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,796:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,803:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,804:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,806:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:25:04,809:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,809:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,812:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:25:04,814:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:04,830:INFO:Calculating mean and std
2025-02-25 16:25:04,833:INFO:Creating metrics dataframe
2025-02-25 16:25:04,842:INFO:Uploading results into container
2025-02-25 16:25:04,843:INFO:Uploading model into container now
2025-02-25 16:25:04,843:INFO:_master_model_container: 14
2025-02-25 16:25:04,844:INFO:_display_container: 2
2025-02-25 16:25:04,844:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-02-25 16:25:04,844:INFO:create_model() successfully completed......................................
2025-02-25 16:25:05,092:INFO:SubProcess create_model() end ==================================
2025-02-25 16:25:05,092:INFO:Creating metrics dataframe
2025-02-25 16:25:05,126:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-02-25 16:25:05,146:INFO:Initializing create_model()
2025-02-25 16:25:05,147:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:25:05,147:INFO:Checking exceptions
2025-02-25 16:25:05,153:INFO:Importing libraries
2025-02-25 16:25:05,154:INFO:Copying training dataset
2025-02-25 16:25:05,164:INFO:Defining folds
2025-02-25 16:25:05,164:INFO:Declaring metric variables
2025-02-25 16:25:05,166:INFO:Importing untrained model
2025-02-25 16:25:05,166:INFO:Declaring custom model
2025-02-25 16:25:05,167:INFO:Naive Bayes Imported successfully
2025-02-25 16:25:05,193:INFO:Cross validation set to False
2025-02-25 16:25:05,193:INFO:Fitting Model
2025-02-25 16:25:05,326:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000094 seconds.
2025-02-25 16:25:05,326:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 16:25:05,326:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 16:25:05,326:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 16:25:05,328:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:25:05,328:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:25:05,328:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:25:05,329:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,329:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,329:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,334:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,334:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,334:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,334:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,334:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,334:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,334:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,336:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,336:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,336:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,336:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,337:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,337:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,338:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,338:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,338:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,339:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,339:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,340:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,341:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,341:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,341:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,343:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,343:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,343:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,343:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,345:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,345:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,345:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,346:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,347:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,347:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,348:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,348:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,348:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,349:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,349:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,349:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,351:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,351:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,351:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,352:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,352:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,352:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,353:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,353:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,353:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,354:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,355:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,355:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,355:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,356:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,356:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,356:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,357:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,357:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,357:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,358:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,358:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,358:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,359:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,359:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,359:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,360:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,360:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,361:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,362:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,362:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,363:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,363:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,364:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,364:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,365:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,365:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,365:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,366:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,366:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,367:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,367:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,367:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,368:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,368:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,369:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,369:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,370:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,370:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,371:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,371:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,372:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,372:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,373:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,373:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,374:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,374:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,375:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,375:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,376:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,376:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,376:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,377:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,377:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,378:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,378:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,378:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,379:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,379:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,380:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,380:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,380:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,381:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,381:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,382:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,382:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,382:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,383:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,383:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,384:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,384:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,384:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,385:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,385:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,386:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,386:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,387:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,387:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,387:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,388:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,388:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,389:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,389:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,390:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,390:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,390:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,391:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,391:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,392:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,392:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,392:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,392:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,392:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,392:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,394:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,394:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,394:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,394:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,394:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,395:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,395:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,395:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,395:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,395:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,395:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,396:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,396:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,396:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,396:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,396:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,396:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,397:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,397:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,397:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,397:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,397:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,398:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,398:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,398:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,399:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,399:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,400:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,400:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,401:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,401:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,401:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,402:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,402:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,403:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,403:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,403:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,404:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,404:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,405:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,405:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,406:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,406:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,406:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,407:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,408:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,409:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,409:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,413:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,413:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,414:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,414:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,425:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:05,472:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-25 16:25:05,472:INFO:create_model() successfully completed......................................
2025-02-25 16:25:05,786:INFO:_master_model_container: 14
2025-02-25 16:25:05,787:INFO:_display_container: 2
2025-02-25 16:25:05,788:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-25 16:25:05,788:INFO:compare_models() successfully completed......................................
2025-02-25 16:25:27,213:INFO:Initializing create_model()
2025-02-25 16:25:27,213:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:25:27,214:INFO:Checking exceptions
2025-02-25 16:25:27,249:INFO:Importing libraries
2025-02-25 16:25:27,249:INFO:Copying training dataset
2025-02-25 16:25:27,259:INFO:Defining folds
2025-02-25 16:25:27,259:INFO:Declaring metric variables
2025-02-25 16:25:27,268:INFO:Importing untrained model
2025-02-25 16:25:27,278:INFO:Random Forest Classifier Imported successfully
2025-02-25 16:25:27,301:INFO:Starting cross validation
2025-02-25 16:25:27,326:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:25:29,370:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,370:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,384:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,385:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,395:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,398:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,577:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,578:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,587:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,589:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,590:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,599:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,603:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,604:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,617:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,659:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,670:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,678:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,764:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,772:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:29,781:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:30,167:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:30,170:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:30,174:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:30,834:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:30,841:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:30,844:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:30,848:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:30,853:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:30,856:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:25:30,883:INFO:Calculating mean and std
2025-02-25 16:25:30,889:INFO:Creating metrics dataframe
2025-02-25 16:25:30,906:INFO:Finalizing model
2025-02-25 16:25:31,045:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000106 seconds.
2025-02-25 16:25:31,046:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 16:25:31,046:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 16:25:31,047:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 16:25:31,047:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:25:31,047:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:25:31,048:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:25:31,048:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,048:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,049:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,049:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,050:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,050:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,050:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,051:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,051:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,051:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,051:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,052:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,052:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,052:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,053:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,053:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,053:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,054:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,054:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,054:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,054:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,055:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,055:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,055:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,056:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,056:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,056:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,057:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,057:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,057:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,059:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,059:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,059:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,060:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,060:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,060:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,061:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,061:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,061:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,061:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,062:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,062:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,062:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,064:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,064:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,064:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,065:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,065:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,065:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,066:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,066:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,066:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,067:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,068:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,068:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,068:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,069:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,069:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,070:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,070:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,070:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,071:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,071:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,071:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,072:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,072:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,073:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,073:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,075:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,075:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,076:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,076:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,077:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,077:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,077:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,078:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,078:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,079:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,079:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,079:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,080:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,080:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,081:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,081:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,082:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,082:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,082:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,083:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,083:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,084:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,084:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,084:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,084:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,086:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,086:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,086:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,087:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,087:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,087:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,088:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,088:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,088:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,089:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,089:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,089:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,090:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,090:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,091:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,091:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,091:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,092:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,092:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,093:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,093:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,093:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,094:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,094:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,095:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,095:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,095:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,096:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,096:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,097:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,097:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,098:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,098:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,098:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,099:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,099:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,100:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,101:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,101:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,102:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,102:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,103:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,103:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,104:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,104:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,105:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,105:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,106:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,106:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,107:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,107:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,108:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,108:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,109:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,109:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,110:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,110:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,111:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,111:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,113:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,113:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,114:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,114:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,114:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,115:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,117:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,117:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,117:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,118:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,118:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,120:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,120:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,120:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,121:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,121:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,121:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,122:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,122:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,122:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,123:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,123:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,124:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,124:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,125:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,125:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,127:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,127:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,129:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,129:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,129:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,130:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,131:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,131:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,132:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,132:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,132:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,134:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,134:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,135:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,135:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,135:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,136:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,136:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,137:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,137:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,138:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,139:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,139:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,142:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,142:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,144:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,144:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,145:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,145:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,146:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,146:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,147:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,147:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,147:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,148:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,148:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,148:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,149:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,149:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,149:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,153:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,153:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,154:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,154:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,154:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,155:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,155:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,156:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,156:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,158:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,158:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,161:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,161:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,163:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,163:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,169:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,169:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,169:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,169:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,172:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,172:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,172:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:25:31,710:INFO:Uploading results into container
2025-02-25 16:25:31,712:INFO:Uploading model into container now
2025-02-25 16:25:31,740:INFO:_master_model_container: 15
2025-02-25 16:25:31,741:INFO:_display_container: 3
2025-02-25 16:25:31,742:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:25:31,742:INFO:create_model() successfully completed......................................
2025-02-25 16:25:32,022:INFO:Initializing tune_model()
2025-02-25 16:25:32,023:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2025-02-25 16:25:32,023:INFO:Checking exceptions
2025-02-25 16:25:32,062:INFO:Copying training dataset
2025-02-25 16:25:32,069:INFO:Checking base model
2025-02-25 16:25:32,070:INFO:Base model : Random Forest Classifier
2025-02-25 16:25:32,083:INFO:Declaring metric variables
2025-02-25 16:25:32,094:INFO:Defining Hyperparameters
2025-02-25 16:25:32,389:INFO:Tuning with n_jobs=-1
2025-02-25 16:25:32,389:INFO:Initializing RandomizedSearchCV
2025-02-25 16:26:13,630:INFO:best_params: {'actual_estimator__n_estimators': 230, 'actual_estimator__min_samples_split': 2, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.05, 'actual_estimator__max_features': 'sqrt', 'actual_estimator__max_depth': 7, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': {}, 'actual_estimator__bootstrap': False}
2025-02-25 16:26:13,634:INFO:Hyperparameter search completed
2025-02-25 16:26:13,634:INFO:SubProcess create_model() called ==================================
2025-02-25 16:26:13,637:INFO:Initializing create_model()
2025-02-25 16:26:13,637:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B9922E4590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 230, 'min_samples_split': 2, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.05, 'max_features': 'sqrt', 'max_depth': 7, 'criterion': 'entropy', 'class_weight': {}, 'bootstrap': False})
2025-02-25 16:26:13,638:INFO:Checking exceptions
2025-02-25 16:26:13,638:INFO:Importing libraries
2025-02-25 16:26:13,639:INFO:Copying training dataset
2025-02-25 16:26:13,650:INFO:Defining folds
2025-02-25 16:26:13,651:INFO:Declaring metric variables
2025-02-25 16:26:13,663:INFO:Importing untrained model
2025-02-25 16:26:13,663:INFO:Declaring custom model
2025-02-25 16:26:13,672:INFO:Random Forest Classifier Imported successfully
2025-02-25 16:26:13,717:INFO:Starting cross validation
2025-02-25 16:26:13,746:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:26:16,728:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,739:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,741:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:26:16,751:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,753:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,760:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:26:16,774:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,774:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,805:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,812:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:26:16,826:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,856:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,867:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,874:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:26:16,877:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,880:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,887:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:16,893:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:26:16,900:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:17,121:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:17,122:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:17,130:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:17,132:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:26:17,133:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:17,138:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:17,143:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:17,241:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:17,251:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:17,256:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:18,526:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:18,534:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:18,534:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:18,544:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:18,545:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:18,554:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:18,579:INFO:Calculating mean and std
2025-02-25 16:26:18,585:INFO:Creating metrics dataframe
2025-02-25 16:26:18,601:INFO:Finalizing model
2025-02-25 16:26:18,734:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000130 seconds.
2025-02-25 16:26:18,734:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 16:26:18,734:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 16:26:18,735:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 16:26:18,735:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:26:18,736:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:26:18,736:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:26:18,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,739:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,739:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,739:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,747:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,747:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,747:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,750:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,750:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,750:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,751:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,751:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,752:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,752:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,752:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,753:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,753:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,755:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,755:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,755:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,756:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,756:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,756:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,764:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,764:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,764:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,765:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,765:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,767:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,767:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,767:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,768:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,768:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,770:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,770:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,770:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,771:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,771:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,771:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,772:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,772:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,772:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,773:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,773:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,774:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,774:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,775:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,775:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,775:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,776:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,776:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,777:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,777:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,779:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,779:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,780:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,780:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,780:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,781:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,781:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,782:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,782:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,783:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,783:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,784:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,785:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,785:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,786:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,786:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,787:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,787:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,787:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,788:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,788:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,788:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,789:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,789:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,790:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,790:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,791:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,791:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,791:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,792:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,792:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,793:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,793:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,794:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,794:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,797:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,797:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,798:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,798:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,799:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,799:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,804:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,804:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,809:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,809:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,809:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,810:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,810:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,812:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,812:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,812:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,813:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,813:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,814:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,814:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,814:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,815:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,817:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,817:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,817:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,819:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,819:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,820:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,820:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,821:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,821:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,822:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,822:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,823:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,823:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,823:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,824:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,824:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,824:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,825:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,825:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,826:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,826:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,826:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,827:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,827:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,827:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,828:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,828:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,828:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,830:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,830:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,830:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,832:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,832:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,832:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,834:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,834:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,835:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,835:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,838:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,838:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,839:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,839:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,840:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,840:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,842:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,842:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,844:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,844:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,844:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,845:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,845:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,847:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,847:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,847:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,849:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,850:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,850:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,851:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,851:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,852:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,852:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,854:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,854:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,855:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,855:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,856:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,856:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,856:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,857:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,857:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,858:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,858:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,859:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,859:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,865:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,865:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,865:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,866:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,866:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,867:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:18,867:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:19,719:INFO:Uploading results into container
2025-02-25 16:26:19,722:INFO:Uploading model into container now
2025-02-25 16:26:19,722:INFO:_master_model_container: 16
2025-02-25 16:26:19,723:INFO:_display_container: 4
2025-02-25 16:26:19,723:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:26:19,723:INFO:create_model() successfully completed......................................
2025-02-25 16:26:19,992:INFO:SubProcess create_model() end ==================================
2025-02-25 16:26:19,992:INFO:choose_better activated
2025-02-25 16:26:20,002:INFO:SubProcess create_model() called ==================================
2025-02-25 16:26:20,004:INFO:Initializing create_model()
2025-02-25 16:26:20,004:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:26:20,004:INFO:Checking exceptions
2025-02-25 16:26:20,010:INFO:Importing libraries
2025-02-25 16:26:20,010:INFO:Copying training dataset
2025-02-25 16:26:20,018:INFO:Defining folds
2025-02-25 16:26:20,019:INFO:Declaring metric variables
2025-02-25 16:26:20,019:INFO:Importing untrained model
2025-02-25 16:26:20,019:INFO:Declaring custom model
2025-02-25 16:26:20,021:INFO:Random Forest Classifier Imported successfully
2025-02-25 16:26:20,022:INFO:Starting cross validation
2025-02-25 16:26:20,051:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:26:22,045:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,063:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,072:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,088:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,088:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,105:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,128:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,131:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,140:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,143:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,150:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,157:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,289:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,302:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,315:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,458:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,469:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,479:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,493:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,504:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,514:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,871:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,880:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:22,888:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:23,429:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:23,435:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:23,439:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:23,447:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:23,451:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:23,456:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:26:23,475:INFO:Calculating mean and std
2025-02-25 16:26:23,476:INFO:Creating metrics dataframe
2025-02-25 16:26:23,482:INFO:Finalizing model
2025-02-25 16:26:23,624:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000105 seconds.
2025-02-25 16:26:23,625:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 16:26:23,625:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 16:26:23,626:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 16:26:23,626:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:26:23,626:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:26:23,627:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:26:23,627:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,627:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,631:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,631:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,632:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,632:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,632:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,651:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,651:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,656:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,656:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,656:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,679:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,679:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,681:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,682:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,682:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,682:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,684:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,684:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,685:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,685:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,687:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,687:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,688:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,688:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,688:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,689:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,689:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,690:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,690:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,691:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,691:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,692:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,692:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,692:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,693:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,693:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,694:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,694:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,695:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,695:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,697:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,697:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,698:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,699:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,699:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,701:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,701:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,703:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,703:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,705:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,705:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,709:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,709:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,710:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,710:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,711:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,711:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,712:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,712:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,713:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,713:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,713:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,715:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,716:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,716:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,717:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,717:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,717:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,718:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,718:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,719:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,719:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,720:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,720:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,721:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,721:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,721:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,722:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,722:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,723:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,723:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,724:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,724:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,724:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,725:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,725:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,725:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,727:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,727:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,728:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,730:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,730:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,731:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,731:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,733:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,733:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,733:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,734:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,734:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,737:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,737:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,737:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,739:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,739:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,742:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,742:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,747:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,747:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,750:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,750:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,751:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,751:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,751:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,752:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,752:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,753:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,753:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,753:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,755:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,755:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,756:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,756:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,764:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,764:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,765:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,767:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,768:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:23,768:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:26:24,326:INFO:Uploading results into container
2025-02-25 16:26:24,328:INFO:Uploading model into container now
2025-02-25 16:26:24,330:INFO:_master_model_container: 17
2025-02-25 16:26:24,330:INFO:_display_container: 5
2025-02-25 16:26:24,331:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:26:24,331:INFO:create_model() successfully completed......................................
2025-02-25 16:26:24,602:INFO:SubProcess create_model() end ==================================
2025-02-25 16:26:24,604:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) result for Accuracy is 0.6401
2025-02-25 16:26:24,606:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) result for Accuracy is 0.6918
2025-02-25 16:26:24,607:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) is best model
2025-02-25 16:26:24,607:INFO:choose_better completed
2025-02-25 16:26:24,634:INFO:_master_model_container: 17
2025-02-25 16:26:24,634:INFO:_display_container: 4
2025-02-25 16:26:24,637:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:26:24,637:INFO:tune_model() successfully completed......................................
2025-02-25 16:26:46,923:INFO:Initializing evaluate_model()
2025-02-25 16:26:46,923:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-02-25 16:26:46,954:INFO:Initializing plot_model()
2025-02-25 16:26:46,954:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2025-02-25 16:26:46,956:INFO:Checking exceptions
2025-02-25 16:26:47,051:INFO:Preloading libraries
2025-02-25 16:26:47,098:INFO:Copying training dataset
2025-02-25 16:26:47,098:INFO:Plot type: pipeline
2025-02-25 16:26:47,896:INFO:Visual Rendered Successfully
2025-02-25 16:26:48,200:INFO:plot_model() successfully completed......................................
2025-02-25 16:26:48,213:INFO:Initializing plot_model()
2025-02-25 16:26:48,213:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-02-25 16:26:48,213:INFO:Checking exceptions
2025-02-25 16:26:48,338:INFO:Preloading libraries
2025-02-25 16:26:48,387:INFO:Copying training dataset
2025-02-25 16:26:48,388:INFO:Plot type: confusion_matrix
2025-02-25 16:26:48,949:INFO:Fitting Model
2025-02-25 16:26:48,953:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-02-25 16:26:48,954:INFO:Scoring test/hold-out set
2025-02-25 16:26:49,617:INFO:Visual Rendered Successfully
2025-02-25 16:26:49,902:INFO:plot_model() successfully completed......................................
2025-02-25 16:26:49,904:INFO:Initializing plot_model()
2025-02-25 16:26:49,905:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), plot=feature, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-02-25 16:26:49,905:INFO:Checking exceptions
2025-02-25 16:26:49,983:INFO:Preloading libraries
2025-02-25 16:26:50,044:INFO:Copying training dataset
2025-02-25 16:26:50,045:INFO:Plot type: feature
2025-02-25 16:26:50,047:WARNING:No coef_ found. Trying feature_importances_
2025-02-25 16:26:50,559:INFO:Visual Rendered Successfully
2025-02-25 16:26:50,856:INFO:plot_model() successfully completed......................................
2025-02-25 16:27:14,878:INFO:Initializing finalize_model()
2025-02-25 16:27:14,880:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-25 16:27:14,881:INFO:Finalizing RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:27:14,892:INFO:Initializing create_model()
2025-02-25 16:27:14,892:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B9F0487BD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:27:14,892:INFO:Checking exceptions
2025-02-25 16:27:14,897:INFO:Importing libraries
2025-02-25 16:27:14,898:INFO:Copying training dataset
2025-02-25 16:27:14,899:INFO:Defining folds
2025-02-25 16:27:14,899:INFO:Declaring metric variables
2025-02-25 16:27:14,900:INFO:Importing untrained model
2025-02-25 16:27:14,900:INFO:Declaring custom model
2025-02-25 16:27:14,903:INFO:Random Forest Classifier Imported successfully
2025-02-25 16:27:14,960:INFO:Cross validation set to False
2025-02-25 16:27:14,961:INFO:Fitting Model
2025-02-25 16:27:15,101:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000134 seconds.
2025-02-25 16:27:15,102:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 16:27:15,102:INFO:[LightGBM] [Info] Total Bins 464
2025-02-25 16:27:15,102:INFO:[LightGBM] [Info] Number of data points in the train set: 204, number of used features: 7
2025-02-25 16:27:15,103:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:27:15,103:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:27:15,103:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:27:15,103:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,104:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,104:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,104:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,104:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,105:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,105:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,106:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,106:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,106:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,106:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,107:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,108:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,108:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,109:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,109:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,110:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,111:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,111:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,114:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,114:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,115:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,115:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,117:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,117:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,119:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,119:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,120:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,120:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,121:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,121:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,121:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,122:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,122:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,123:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,123:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,123:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,124:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,124:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,125:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,125:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,127:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,127:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,129:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,130:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,130:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,131:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,131:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,131:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,131:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,132:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,132:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,134:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,134:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,134:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,136:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,136:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,137:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,137:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,137:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,138:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,138:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,139:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,142:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,144:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,144:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,145:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,145:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,146:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,146:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,148:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,148:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,149:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,149:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,150:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,150:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,153:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,153:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,154:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,154:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,155:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,155:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,156:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,156:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,156:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,156:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,161:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,161:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,161:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,167:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,167:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,169:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,172:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,172:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,174:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,174:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,181:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,181:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,181:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,195:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,195:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,202:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,203:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,203:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,205:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,206:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,206:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,206:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,206:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,208:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,208:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,208:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,209:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,212:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,212:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,213:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,213:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,217:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,219:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,219:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,219:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,245:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,245:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:15,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:27:16,259:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-25 16:27:16,259:INFO:create_model() successfully completed......................................
2025-02-25 16:27:16,518:INFO:_master_model_container: 17
2025-02-25 16:27:16,518:INFO:_display_container: 4
2025-02-25 16:27:16,601:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-25 16:27:16,601:INFO:finalize_model() successfully completed......................................
2025-02-25 16:36:31,618:INFO:PyCaret ClassificationExperiment
2025-02-25 16:36:31,618:INFO:Logging name: wheat_classification
2025-02-25 16:36:31,619:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-25 16:36:31,619:INFO:version 3.3.2
2025-02-25 16:36:31,619:INFO:Initializing setup()
2025-02-25 16:36:31,619:INFO:self.USI: 3d9e
2025-02-25 16:36:31,619:INFO:self._variable_keys: {'target_param', 'fold_shuffle_param', 'n_jobs_param', 'y_train', 'fix_imbalance', 'data', 'idx', 'X', 'logging_param', 'X_test', 'gpu_param', 'is_multiclass', 'fold_groups_param', 'gpu_n_jobs_param', 'memory', 'pipeline', 'USI', '_ml_usecase', 'log_plots_param', 'fold_generator', 'exp_id', 'y_test', 'y', '_available_plots', 'seed', 'exp_name_log', 'X_train', 'html_param'}
2025-02-25 16:36:31,620:INFO:Checking environment
2025-02-25 16:36:31,620:INFO:python_version: 3.11.11
2025-02-25 16:36:31,620:INFO:python_build: ('main', 'Dec 11 2024 16:34:19')
2025-02-25 16:36:31,620:INFO:machine: AMD64
2025-02-25 16:36:31,620:INFO:platform: Windows-10-10.0.26100-SP0
2025-02-25 16:36:31,630:INFO:Memory: svmem(total=16969424896, available=2514305024, percent=85.2, used=14455119872, free=2514305024)
2025-02-25 16:36:31,630:INFO:Physical Core: 4
2025-02-25 16:36:31,630:INFO:Logical Core: 8
2025-02-25 16:36:31,630:INFO:Checking libraries
2025-02-25 16:36:31,630:INFO:System:
2025-02-25 16:36:31,630:INFO:    python: 3.11.11 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:34:19) [MSC v.1929 64 bit (AMD64)]
2025-02-25 16:36:31,630:INFO:executable: C:\Users\Gabriel\anaconda3\envs\pycaret-env\python.exe
2025-02-25 16:36:31,630:INFO:   machine: Windows-10-10.0.26100-SP0
2025-02-25 16:36:31,630:INFO:PyCaret required dependencies:
2025-02-25 16:36:31,631:INFO:                 pip: 25.0
2025-02-25 16:36:31,631:INFO:          setuptools: 75.8.0
2025-02-25 16:36:31,631:INFO:             pycaret: 3.3.2
2025-02-25 16:36:31,631:INFO:             IPython: 8.32.0
2025-02-25 16:36:31,631:INFO:          ipywidgets: 8.1.5
2025-02-25 16:36:31,631:INFO:                tqdm: 4.67.1
2025-02-25 16:36:31,631:INFO:               numpy: 1.26.4
2025-02-25 16:36:31,631:INFO:              pandas: 2.1.4
2025-02-25 16:36:31,631:INFO:              jinja2: 3.1.5
2025-02-25 16:36:31,631:INFO:               scipy: 1.11.4
2025-02-25 16:36:31,631:INFO:              joblib: 1.3.2
2025-02-25 16:36:31,631:INFO:             sklearn: 1.4.2
2025-02-25 16:36:31,631:INFO:                pyod: 2.0.3
2025-02-25 16:36:31,631:INFO:            imblearn: 0.13.0
2025-02-25 16:36:31,632:INFO:   category_encoders: 2.7.0
2025-02-25 16:36:31,632:INFO:            lightgbm: 4.6.0
2025-02-25 16:36:31,632:INFO:               numba: 0.61.0
2025-02-25 16:36:31,632:INFO:            requests: 2.32.3
2025-02-25 16:36:31,632:INFO:          matplotlib: 3.7.5
2025-02-25 16:36:31,632:INFO:          scikitplot: 0.3.7
2025-02-25 16:36:31,632:INFO:         yellowbrick: 1.5
2025-02-25 16:36:31,632:INFO:              plotly: 5.24.1
2025-02-25 16:36:31,632:INFO:    plotly-resampler: Not installed
2025-02-25 16:36:31,632:INFO:             kaleido: 0.2.1
2025-02-25 16:36:31,632:INFO:           schemdraw: 0.15
2025-02-25 16:36:31,632:INFO:         statsmodels: 0.14.4
2025-02-25 16:36:31,632:INFO:              sktime: 0.26.0
2025-02-25 16:36:31,633:INFO:               tbats: 1.1.3
2025-02-25 16:36:31,633:INFO:            pmdarima: 2.0.4
2025-02-25 16:36:31,633:INFO:              psutil: 7.0.0
2025-02-25 16:36:31,633:INFO:          markupsafe: 3.0.2
2025-02-25 16:36:31,633:INFO:             pickle5: Not installed
2025-02-25 16:36:31,633:INFO:         cloudpickle: 3.1.1
2025-02-25 16:36:31,633:INFO:         deprecation: 2.1.0
2025-02-25 16:36:31,633:INFO:              xxhash: 3.5.0
2025-02-25 16:36:31,633:INFO:           wurlitzer: Not installed
2025-02-25 16:36:31,633:INFO:PyCaret optional dependencies:
2025-02-25 16:36:31,634:INFO:                shap: Not installed
2025-02-25 16:36:31,634:INFO:           interpret: Not installed
2025-02-25 16:36:31,635:INFO:                umap: Not installed
2025-02-25 16:36:31,635:INFO:     ydata_profiling: Not installed
2025-02-25 16:36:31,635:INFO:  explainerdashboard: Not installed
2025-02-25 16:36:31,635:INFO:             autoviz: Not installed
2025-02-25 16:36:31,635:INFO:           fairlearn: Not installed
2025-02-25 16:36:31,635:INFO:          deepchecks: Not installed
2025-02-25 16:36:31,635:INFO:             xgboost: Not installed
2025-02-25 16:36:31,635:INFO:            catboost: Not installed
2025-02-25 16:36:31,635:INFO:              kmodes: Not installed
2025-02-25 16:36:31,636:INFO:             mlxtend: Not installed
2025-02-25 16:36:31,636:INFO:       statsforecast: Not installed
2025-02-25 16:36:31,636:INFO:        tune_sklearn: Not installed
2025-02-25 16:36:31,637:INFO:                 ray: Not installed
2025-02-25 16:36:31,637:INFO:            hyperopt: Not installed
2025-02-25 16:36:31,637:INFO:              optuna: Not installed
2025-02-25 16:36:31,637:INFO:               skopt: Not installed
2025-02-25 16:36:31,638:INFO:              mlflow: 2.20.2
2025-02-25 16:36:31,638:INFO:              gradio: Not installed
2025-02-25 16:36:31,638:INFO:             fastapi: Not installed
2025-02-25 16:36:31,639:INFO:             uvicorn: Not installed
2025-02-25 16:36:31,639:INFO:              m2cgen: Not installed
2025-02-25 16:36:31,639:INFO:           evidently: Not installed
2025-02-25 16:36:31,639:INFO:               fugue: Not installed
2025-02-25 16:36:31,639:INFO:           streamlit: Not installed
2025-02-25 16:36:31,639:INFO:             prophet: Not installed
2025-02-25 16:36:31,639:INFO:None
2025-02-25 16:36:31,639:INFO:Set up data.
2025-02-25 16:36:31,651:INFO:Set up folding strategy.
2025-02-25 16:36:31,651:INFO:Set up train/test split.
2025-02-25 16:36:31,656:INFO:Set up index.
2025-02-25 16:36:31,657:INFO:Assigning column types.
2025-02-25 16:36:31,667:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-25 16:36:31,802:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-25 16:36:31,806:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:36:31,922:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:31,923:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:32,100:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-25 16:36:32,102:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:36:32,219:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:32,220:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:32,222:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-25 16:36:32,420:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:36:32,525:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:32,527:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:32,729:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 16:36:32,803:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:32,805:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:32,807:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-25 16:36:33,079:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:33,080:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:33,358:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:33,360:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:33,362:INFO:Preparing preprocessing pipeline...
2025-02-25 16:36:33,364:INFO:Set up label encoding.
2025-02-25 16:36:33,364:INFO:Set up simple imputation.
2025-02-25 16:36:33,365:INFO:Set up imbalanced handling.
2025-02-25 16:36:33,365:INFO:Set up column transformation.
2025-02-25 16:36:33,365:INFO:Set up feature normalization.
2025-02-25 16:36:33,365:INFO:Set up feature selection.
2025-02-25 16:36:33,610:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:33,611:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:33,787:INFO:Finished creating preprocessing pipeline.
2025-02-25 16:36:33,851:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Gabriel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImp...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=1,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2025-02-25 16:36:33,852:INFO:Creating final display dataframe.
2025-02-25 16:36:34,058:INFO:Setup _display_container:                     Description                 Value
0                    Session id                    42
1                        Target                  Type
2                   Target type            Multiclass
3                Target mapping      1: 0, 2: 1, 3: 2
4           Original data shape              (199, 8)
5        Transformed data shape              (204, 2)
6   Transformed train set shape              (144, 2)
7    Transformed test set shape               (60, 2)
8              Numeric features                     7
9                    Preprocess                  True
10              Imputation type                simple
11           Numeric imputation                  mean
12       Categorical imputation                  mode
13                Fix imbalance                  True
14         Fix imbalance method                 SMOTE
15               Transformation                  True
16        Transformation method           yeo-johnson
17                    Normalize                  True
18             Normalize method                zscore
19            Feature selection                  True
20     Feature selection method               classic
21  Feature selection estimator              lightgbm
22  Number of features selected                   0.2
23               Fold Generator       StratifiedKFold
24                  Fold Number                    10
25                     CPU Jobs                    -1
26                      Use GPU                 False
27               Log Experiment                 False
28              Experiment Name  wheat_classification
29                          USI                  3d9e
2025-02-25 16:36:34,301:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:34,301:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:34,566:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:34,568:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 16:36:34,574:INFO:setup() successfully completed in 2.97s...............
2025-02-25 16:36:37,655:INFO:Initializing compare_models()
2025-02-25 16:36:37,656:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-02-25 16:36:37,656:INFO:Checking exceptions
2025-02-25 16:36:37,663:INFO:Preparing display monitor
2025-02-25 16:36:37,728:INFO:Initializing Logistic Regression
2025-02-25 16:36:37,728:INFO:Total runtime is 0.0 minutes
2025-02-25 16:36:37,739:INFO:SubProcess create_model() called ==================================
2025-02-25 16:36:37,740:INFO:Initializing create_model()
2025-02-25 16:36:37,740:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:36:37,740:INFO:Checking exceptions
2025-02-25 16:36:37,742:INFO:Importing libraries
2025-02-25 16:36:37,742:INFO:Copying training dataset
2025-02-25 16:36:37,747:INFO:Defining folds
2025-02-25 16:36:37,748:INFO:Declaring metric variables
2025-02-25 16:36:37,759:INFO:Importing untrained model
2025-02-25 16:36:37,770:INFO:Logistic Regression Imported successfully
2025-02-25 16:36:37,792:INFO:Starting cross validation
2025-02-25 16:36:37,812:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:36:46,173:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:46,184:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,192:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,208:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,263:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:46,275:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,287:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,297:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,323:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:46,342:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,356:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,368:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,577:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:46,590:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,602:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,613:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,687:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:46,697:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,710:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,724:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,774:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:46,781:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,785:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,795:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,810:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:46,822:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,834:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:46,844:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:47,212:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:47,221:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:47,225:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:47,229:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:47,252:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:47,257:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:47,265:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:47,275:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:47,277:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:47,282:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:47,293:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:47,303:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:47,332:INFO:Calculating mean and std
2025-02-25 16:36:47,337:INFO:Creating metrics dataframe
2025-02-25 16:36:47,343:INFO:Uploading results into container
2025-02-25 16:36:47,345:INFO:Uploading model into container now
2025-02-25 16:36:47,345:INFO:_master_model_container: 1
2025-02-25 16:36:47,345:INFO:_display_container: 2
2025-02-25 16:36:47,346:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-25 16:36:47,346:INFO:create_model() successfully completed......................................
2025-02-25 16:36:47,755:INFO:SubProcess create_model() end ==================================
2025-02-25 16:36:47,756:INFO:Creating metrics dataframe
2025-02-25 16:36:47,773:INFO:Initializing K Neighbors Classifier
2025-02-25 16:36:47,773:INFO:Total runtime is 0.167429780960083 minutes
2025-02-25 16:36:47,783:INFO:SubProcess create_model() called ==================================
2025-02-25 16:36:47,784:INFO:Initializing create_model()
2025-02-25 16:36:47,785:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:36:47,785:INFO:Checking exceptions
2025-02-25 16:36:47,785:INFO:Importing libraries
2025-02-25 16:36:47,785:INFO:Copying training dataset
2025-02-25 16:36:47,793:INFO:Defining folds
2025-02-25 16:36:47,795:INFO:Declaring metric variables
2025-02-25 16:36:47,808:INFO:Importing untrained model
2025-02-25 16:36:47,818:INFO:K Neighbors Classifier Imported successfully
2025-02-25 16:36:47,836:INFO:Starting cross validation
2025-02-25 16:36:47,863:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:36:49,117:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,122:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,123:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,125:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,129:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,132:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,319:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,324:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,329:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,604:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,617:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,630:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,628:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,642:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,647:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,755:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,764:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,769:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,797:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,803:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,810:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,840:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,844:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:49,848:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:50,123:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:50,126:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:50,129:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:50,143:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:50,150:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:50,159:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:50,177:INFO:Calculating mean and std
2025-02-25 16:36:50,180:INFO:Creating metrics dataframe
2025-02-25 16:36:50,184:INFO:Uploading results into container
2025-02-25 16:36:50,186:INFO:Uploading model into container now
2025-02-25 16:36:50,187:INFO:_master_model_container: 2
2025-02-25 16:36:50,188:INFO:_display_container: 2
2025-02-25 16:36:50,188:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-25 16:36:50,188:INFO:create_model() successfully completed......................................
2025-02-25 16:36:50,434:INFO:SubProcess create_model() end ==================================
2025-02-25 16:36:50,435:INFO:Creating metrics dataframe
2025-02-25 16:36:50,457:INFO:Initializing Naive Bayes
2025-02-25 16:36:50,457:INFO:Total runtime is 0.21215610106786092 minutes
2025-02-25 16:36:50,466:INFO:SubProcess create_model() called ==================================
2025-02-25 16:36:50,466:INFO:Initializing create_model()
2025-02-25 16:36:50,467:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:36:50,467:INFO:Checking exceptions
2025-02-25 16:36:50,467:INFO:Importing libraries
2025-02-25 16:36:50,467:INFO:Copying training dataset
2025-02-25 16:36:50,478:INFO:Defining folds
2025-02-25 16:36:50,479:INFO:Declaring metric variables
2025-02-25 16:36:50,487:INFO:Importing untrained model
2025-02-25 16:36:50,496:INFO:Naive Bayes Imported successfully
2025-02-25 16:36:50,510:INFO:Starting cross validation
2025-02-25 16:36:50,535:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:36:51,814:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:51,835:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:51,845:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:51,854:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:51,922:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:51,946:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:51,963:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,122:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,130:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,138:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,254:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,264:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,268:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,274:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,279:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,289:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,298:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,303:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,308:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,403:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,414:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,420:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,553:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,559:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,566:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,704:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,711:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,717:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,737:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,743:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,746:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:52,762:INFO:Calculating mean and std
2025-02-25 16:36:52,766:INFO:Creating metrics dataframe
2025-02-25 16:36:52,770:INFO:Uploading results into container
2025-02-25 16:36:52,771:INFO:Uploading model into container now
2025-02-25 16:36:52,772:INFO:_master_model_container: 3
2025-02-25 16:36:52,772:INFO:_display_container: 2
2025-02-25 16:36:52,772:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-25 16:36:52,772:INFO:create_model() successfully completed......................................
2025-02-25 16:36:53,004:INFO:SubProcess create_model() end ==================================
2025-02-25 16:36:53,005:INFO:Creating metrics dataframe
2025-02-25 16:36:53,031:INFO:Initializing Decision Tree Classifier
2025-02-25 16:36:53,031:INFO:Total runtime is 0.25506431659062706 minutes
2025-02-25 16:36:53,041:INFO:SubProcess create_model() called ==================================
2025-02-25 16:36:53,042:INFO:Initializing create_model()
2025-02-25 16:36:53,042:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:36:53,042:INFO:Checking exceptions
2025-02-25 16:36:53,042:INFO:Importing libraries
2025-02-25 16:36:53,043:INFO:Copying training dataset
2025-02-25 16:36:53,050:INFO:Defining folds
2025-02-25 16:36:53,050:INFO:Declaring metric variables
2025-02-25 16:36:53,060:INFO:Importing untrained model
2025-02-25 16:36:53,072:INFO:Decision Tree Classifier Imported successfully
2025-02-25 16:36:53,093:INFO:Starting cross validation
2025-02-25 16:36:53,120:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:36:54,128:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,134:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,144:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,163:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,173:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,173:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,180:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,183:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,194:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,337:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,347:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,354:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,356:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,363:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,367:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,453:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,461:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,471:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,491:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,500:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,512:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,613:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,619:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,629:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,881:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,890:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,892:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,898:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,899:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,909:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:54,930:INFO:Calculating mean and std
2025-02-25 16:36:54,934:INFO:Creating metrics dataframe
2025-02-25 16:36:54,939:INFO:Uploading results into container
2025-02-25 16:36:54,941:INFO:Uploading model into container now
2025-02-25 16:36:54,941:INFO:_master_model_container: 4
2025-02-25 16:36:54,943:INFO:_display_container: 2
2025-02-25 16:36:54,943:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-02-25 16:36:54,944:INFO:create_model() successfully completed......................................
2025-02-25 16:36:55,197:INFO:SubProcess create_model() end ==================================
2025-02-25 16:36:55,197:INFO:Creating metrics dataframe
2025-02-25 16:36:55,221:INFO:Initializing SVM - Linear Kernel
2025-02-25 16:36:55,222:INFO:Total runtime is 0.29157129923502606 minutes
2025-02-25 16:36:55,235:INFO:SubProcess create_model() called ==================================
2025-02-25 16:36:55,236:INFO:Initializing create_model()
2025-02-25 16:36:55,236:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:36:55,236:INFO:Checking exceptions
2025-02-25 16:36:55,237:INFO:Importing libraries
2025-02-25 16:36:55,237:INFO:Copying training dataset
2025-02-25 16:36:55,251:INFO:Defining folds
2025-02-25 16:36:55,251:INFO:Declaring metric variables
2025-02-25 16:36:55,262:INFO:Importing untrained model
2025-02-25 16:36:55,273:INFO:SVM - Linear Kernel Imported successfully
2025-02-25 16:36:55,294:INFO:Starting cross validation
2025-02-25 16:36:55,319:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:36:56,658:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:56,662:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:56,666:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:56,667:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:56,671:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:56,783:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:56,786:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:56,794:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:56,798:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:56,803:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:56,846:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:56,851:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:56,860:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:56,872:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:56,901:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:56,906:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:56,916:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:56,927:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,030:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:57,033:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,043:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,053:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,060:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:57,067:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,077:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,079:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:57,084:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,087:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,094:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,098:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:57,104:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,180:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:57,183:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,190:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,194:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:57,199:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,392:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:57,395:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,404:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,409:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:57,413:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,431:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:57,434:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,443:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,447:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:57,452:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:57,474:INFO:Calculating mean and std
2025-02-25 16:36:57,477:INFO:Creating metrics dataframe
2025-02-25 16:36:57,483:INFO:Uploading results into container
2025-02-25 16:36:57,485:INFO:Uploading model into container now
2025-02-25 16:36:57,486:INFO:_master_model_container: 5
2025-02-25 16:36:57,487:INFO:_display_container: 2
2025-02-25 16:36:57,489:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-25 16:36:57,489:INFO:create_model() successfully completed......................................
2025-02-25 16:36:57,731:INFO:SubProcess create_model() end ==================================
2025-02-25 16:36:57,731:INFO:Creating metrics dataframe
2025-02-25 16:36:57,751:INFO:Initializing Ridge Classifier
2025-02-25 16:36:57,752:INFO:Total runtime is 0.33373837073644 minutes
2025-02-25 16:36:57,758:INFO:SubProcess create_model() called ==================================
2025-02-25 16:36:57,758:INFO:Initializing create_model()
2025-02-25 16:36:57,758:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:36:57,760:INFO:Checking exceptions
2025-02-25 16:36:57,760:INFO:Importing libraries
2025-02-25 16:36:57,760:INFO:Copying training dataset
2025-02-25 16:36:57,769:INFO:Defining folds
2025-02-25 16:36:57,769:INFO:Declaring metric variables
2025-02-25 16:36:57,780:INFO:Importing untrained model
2025-02-25 16:36:57,788:INFO:Ridge Classifier Imported successfully
2025-02-25 16:36:57,806:INFO:Starting cross validation
2025-02-25 16:36:57,830:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:36:59,173:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:59,178:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,180:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:59,198:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,208:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,211:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:59,213:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,216:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,220:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:59,223:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:59,226:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,228:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,236:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,240:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:59,248:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,372:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:59,380:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,390:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,396:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:59,403:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,450:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:59,455:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,466:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,471:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:59,477:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,547:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:59,552:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,563:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,569:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:59,575:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,606:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:59,610:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,620:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,626:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:59,632:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,680:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:36:59,683:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,694:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:36:59,697:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:36:59,704:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:00,035:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:00,041:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:00,049:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:00,052:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:00,055:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:00,056:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:00,060:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:00,069:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:00,073:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:00,078:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:00,101:INFO:Calculating mean and std
2025-02-25 16:37:00,106:INFO:Creating metrics dataframe
2025-02-25 16:37:00,111:INFO:Uploading results into container
2025-02-25 16:37:00,112:INFO:Uploading model into container now
2025-02-25 16:37:00,114:INFO:_master_model_container: 6
2025-02-25 16:37:00,114:INFO:_display_container: 2
2025-02-25 16:37:00,115:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-02-25 16:37:00,115:INFO:create_model() successfully completed......................................
2025-02-25 16:37:00,389:INFO:SubProcess create_model() end ==================================
2025-02-25 16:37:00,390:INFO:Creating metrics dataframe
2025-02-25 16:37:00,417:INFO:Initializing Random Forest Classifier
2025-02-25 16:37:00,418:INFO:Total runtime is 0.3781531572341919 minutes
2025-02-25 16:37:00,428:INFO:SubProcess create_model() called ==================================
2025-02-25 16:37:00,429:INFO:Initializing create_model()
2025-02-25 16:37:00,430:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:37:00,430:INFO:Checking exceptions
2025-02-25 16:37:00,430:INFO:Importing libraries
2025-02-25 16:37:00,430:INFO:Copying training dataset
2025-02-25 16:37:00,446:INFO:Defining folds
2025-02-25 16:37:00,446:INFO:Declaring metric variables
2025-02-25 16:37:00,456:INFO:Importing untrained model
2025-02-25 16:37:00,469:INFO:Random Forest Classifier Imported successfully
2025-02-25 16:37:00,486:INFO:Starting cross validation
2025-02-25 16:37:00,513:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:37:02,477:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,488:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,496:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,499:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,512:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,516:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,516:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,526:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,531:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,646:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,650:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,653:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,961:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,974:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:02,985:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:03,182:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:03,190:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:03,195:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:03,251:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:03,261:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:03,266:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:03,322:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:03,327:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:03,333:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:04,045:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:04,049:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:04,051:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:04,058:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:04,060:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:04,067:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:04,095:INFO:Calculating mean and std
2025-02-25 16:37:04,100:INFO:Creating metrics dataframe
2025-02-25 16:37:04,107:INFO:Uploading results into container
2025-02-25 16:37:04,108:INFO:Uploading model into container now
2025-02-25 16:37:04,109:INFO:_master_model_container: 7
2025-02-25 16:37:04,109:INFO:_display_container: 2
2025-02-25 16:37:04,112:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:37:04,112:INFO:create_model() successfully completed......................................
2025-02-25 16:37:04,370:INFO:SubProcess create_model() end ==================================
2025-02-25 16:37:04,371:INFO:Creating metrics dataframe
2025-02-25 16:37:04,398:INFO:Initializing Quadratic Discriminant Analysis
2025-02-25 16:37:04,399:INFO:Total runtime is 0.4445300857226054 minutes
2025-02-25 16:37:04,410:INFO:SubProcess create_model() called ==================================
2025-02-25 16:37:04,410:INFO:Initializing create_model()
2025-02-25 16:37:04,411:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:37:04,411:INFO:Checking exceptions
2025-02-25 16:37:04,411:INFO:Importing libraries
2025-02-25 16:37:04,411:INFO:Copying training dataset
2025-02-25 16:37:04,421:INFO:Defining folds
2025-02-25 16:37:04,421:INFO:Declaring metric variables
2025-02-25 16:37:04,433:INFO:Importing untrained model
2025-02-25 16:37:04,443:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-25 16:37:04,460:INFO:Starting cross validation
2025-02-25 16:37:04,491:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:37:05,402:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:05,408:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,422:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,430:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:05,434:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,435:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,444:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,454:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,456:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:05,464:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,476:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,485:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,620:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:05,621:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,630:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,633:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,643:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:05,647:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,650:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,653:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,704:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:05,708:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,714:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,725:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:05,725:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,726:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,737:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,739:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:05,741:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,775:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:05,780:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,790:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,795:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,980:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:05,985:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:05,995:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:06,002:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:06,017:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:06,018:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:06,023:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:06,027:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:06,038:INFO:Calculating mean and std
2025-02-25 16:37:06,042:INFO:Creating metrics dataframe
2025-02-25 16:37:06,048:INFO:Uploading results into container
2025-02-25 16:37:06,049:INFO:Uploading model into container now
2025-02-25 16:37:06,051:INFO:_master_model_container: 8
2025-02-25 16:37:06,051:INFO:_display_container: 2
2025-02-25 16:37:06,053:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-25 16:37:06,053:INFO:create_model() successfully completed......................................
2025-02-25 16:37:06,330:INFO:SubProcess create_model() end ==================================
2025-02-25 16:37:06,330:INFO:Creating metrics dataframe
2025-02-25 16:37:06,347:INFO:Initializing Ada Boost Classifier
2025-02-25 16:37:06,347:INFO:Total runtime is 0.47699467341105145 minutes
2025-02-25 16:37:06,355:INFO:SubProcess create_model() called ==================================
2025-02-25 16:37:06,356:INFO:Initializing create_model()
2025-02-25 16:37:06,356:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:37:06,357:INFO:Checking exceptions
2025-02-25 16:37:06,357:INFO:Importing libraries
2025-02-25 16:37:06,357:INFO:Copying training dataset
2025-02-25 16:37:06,367:INFO:Defining folds
2025-02-25 16:37:06,367:INFO:Declaring metric variables
2025-02-25 16:37:06,373:INFO:Importing untrained model
2025-02-25 16:37:06,381:INFO:Ada Boost Classifier Imported successfully
2025-02-25 16:37:06,397:INFO:Starting cross validation
2025-02-25 16:37:06,423:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:37:07,288:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:37:07,288:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:37:07,341:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:37:07,355:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:37:07,724:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:07,728:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:07,739:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:07,748:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:07,754:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:07,754:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:07,771:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:07,777:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:07,779:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:07,783:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:07,845:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:07,849:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:07,870:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:07,881:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:07,897:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:07,902:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:07,936:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:07,968:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,202:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:37:08,251:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:37:08,286:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:37:08,492:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:08,497:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,506:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,507:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:08,513:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,570:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:08,573:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:37:08,575:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,581:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,590:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,612:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:08,615:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,624:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,628:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:08,633:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,831:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:08,834:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,840:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,846:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:08,874:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:37:08,917:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 16:37:09,144:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:09,148:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:09,155:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:09,161:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:09,221:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:09,224:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:09,231:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:09,239:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:09,256:INFO:Calculating mean and std
2025-02-25 16:37:09,259:INFO:Creating metrics dataframe
2025-02-25 16:37:09,267:INFO:Uploading results into container
2025-02-25 16:37:09,268:INFO:Uploading model into container now
2025-02-25 16:37:09,269:INFO:_master_model_container: 9
2025-02-25 16:37:09,269:INFO:_display_container: 2
2025-02-25 16:37:09,270:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-02-25 16:37:09,270:INFO:create_model() successfully completed......................................
2025-02-25 16:37:09,500:INFO:SubProcess create_model() end ==================================
2025-02-25 16:37:09,500:INFO:Creating metrics dataframe
2025-02-25 16:37:09,527:INFO:Initializing Gradient Boosting Classifier
2025-02-25 16:37:09,527:INFO:Total runtime is 0.5299902280171712 minutes
2025-02-25 16:37:09,536:INFO:SubProcess create_model() called ==================================
2025-02-25 16:37:09,537:INFO:Initializing create_model()
2025-02-25 16:37:09,537:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:37:09,537:INFO:Checking exceptions
2025-02-25 16:37:09,538:INFO:Importing libraries
2025-02-25 16:37:09,538:INFO:Copying training dataset
2025-02-25 16:37:09,547:INFO:Defining folds
2025-02-25 16:37:09,548:INFO:Declaring metric variables
2025-02-25 16:37:09,556:INFO:Importing untrained model
2025-02-25 16:37:09,565:INFO:Gradient Boosting Classifier Imported successfully
2025-02-25 16:37:09,583:INFO:Starting cross validation
2025-02-25 16:37:09,601:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:37:11,576:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:11,580:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:11,590:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:11,597:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:11,750:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:11,755:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:11,774:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:11,801:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:11,968:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:11,974:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:11,988:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:12,002:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:12,016:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:12,023:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:12,034:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:12,046:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:12,131:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:12,137:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:12,146:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:12,158:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,134:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:13,137:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,142:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,148:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,163:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:13,168:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,178:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,192:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,276:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:13,281:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,299:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,333:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,819:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:13,822:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,830:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:13,838:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:14,004:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:14,008:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:14,016:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:14,027:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:14,051:INFO:Calculating mean and std
2025-02-25 16:37:14,053:INFO:Creating metrics dataframe
2025-02-25 16:37:14,062:INFO:Uploading results into container
2025-02-25 16:37:14,063:INFO:Uploading model into container now
2025-02-25 16:37:14,064:INFO:_master_model_container: 10
2025-02-25 16:37:14,064:INFO:_display_container: 2
2025-02-25 16:37:14,065:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-25 16:37:14,065:INFO:create_model() successfully completed......................................
2025-02-25 16:37:14,414:INFO:SubProcess create_model() end ==================================
2025-02-25 16:37:14,416:INFO:Creating metrics dataframe
2025-02-25 16:37:14,454:INFO:Initializing Linear Discriminant Analysis
2025-02-25 16:37:14,454:INFO:Total runtime is 0.6121032357215881 minutes
2025-02-25 16:37:14,465:INFO:SubProcess create_model() called ==================================
2025-02-25 16:37:14,466:INFO:Initializing create_model()
2025-02-25 16:37:14,467:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:37:14,467:INFO:Checking exceptions
2025-02-25 16:37:14,467:INFO:Importing libraries
2025-02-25 16:37:14,467:INFO:Copying training dataset
2025-02-25 16:37:14,480:INFO:Defining folds
2025-02-25 16:37:14,480:INFO:Declaring metric variables
2025-02-25 16:37:14,492:INFO:Importing untrained model
2025-02-25 16:37:14,501:INFO:Linear Discriminant Analysis Imported successfully
2025-02-25 16:37:14,524:INFO:Starting cross validation
2025-02-25 16:37:14,546:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:37:15,742:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:15,748:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:15,758:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:15,771:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:15,775:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:15,776:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:15,786:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:15,800:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:15,835:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:15,838:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:15,839:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:15,841:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:15,842:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:15,846:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:15,854:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:15,856:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,000:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:16,007:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,017:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,029:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,072:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:16,077:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,088:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,099:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,122:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:16,126:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,137:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,149:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,173:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:16,179:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,184:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,189:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,453:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:16,458:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,461:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 16:37:16,471:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,476:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,479:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,498:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,517:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:16,539:INFO:Calculating mean and std
2025-02-25 16:37:16,549:INFO:Creating metrics dataframe
2025-02-25 16:37:16,557:INFO:Uploading results into container
2025-02-25 16:37:16,558:INFO:Uploading model into container now
2025-02-25 16:37:16,563:INFO:_master_model_container: 11
2025-02-25 16:37:16,563:INFO:_display_container: 2
2025-02-25 16:37:16,563:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-25 16:37:16,565:INFO:create_model() successfully completed......................................
2025-02-25 16:37:16,853:INFO:SubProcess create_model() end ==================================
2025-02-25 16:37:16,853:INFO:Creating metrics dataframe
2025-02-25 16:37:16,883:INFO:Initializing Extra Trees Classifier
2025-02-25 16:37:16,883:INFO:Total runtime is 0.6525975584983825 minutes
2025-02-25 16:37:16,895:INFO:SubProcess create_model() called ==================================
2025-02-25 16:37:16,896:INFO:Initializing create_model()
2025-02-25 16:37:16,896:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:37:16,896:INFO:Checking exceptions
2025-02-25 16:37:16,896:INFO:Importing libraries
2025-02-25 16:37:16,897:INFO:Copying training dataset
2025-02-25 16:37:16,911:INFO:Defining folds
2025-02-25 16:37:16,911:INFO:Declaring metric variables
2025-02-25 16:37:16,924:INFO:Importing untrained model
2025-02-25 16:37:16,932:INFO:Extra Trees Classifier Imported successfully
2025-02-25 16:37:16,953:INFO:Starting cross validation
2025-02-25 16:37:16,982:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:37:18,766:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:18,775:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:18,779:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:18,786:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:18,792:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:18,811:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:18,827:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:18,868:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:18,875:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,168:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,177:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,202:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,210:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,211:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,214:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,221:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,221:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,238:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,355:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,363:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,374:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,377:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,384:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:19,393:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:20,091:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:20,095:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:20,101:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:20,101:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:20,107:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:20,108:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:20,124:INFO:Calculating mean and std
2025-02-25 16:37:20,128:INFO:Creating metrics dataframe
2025-02-25 16:37:20,133:INFO:Uploading results into container
2025-02-25 16:37:20,134:INFO:Uploading model into container now
2025-02-25 16:37:20,136:INFO:_master_model_container: 12
2025-02-25 16:37:20,136:INFO:_display_container: 2
2025-02-25 16:37:20,139:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-02-25 16:37:20,139:INFO:create_model() successfully completed......................................
2025-02-25 16:37:20,409:INFO:SubProcess create_model() end ==================================
2025-02-25 16:37:20,411:INFO:Creating metrics dataframe
2025-02-25 16:37:20,445:INFO:Initializing Light Gradient Boosting Machine
2025-02-25 16:37:20,447:INFO:Total runtime is 0.7119842052459716 minutes
2025-02-25 16:37:20,456:INFO:SubProcess create_model() called ==================================
2025-02-25 16:37:20,457:INFO:Initializing create_model()
2025-02-25 16:37:20,458:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:37:20,458:INFO:Checking exceptions
2025-02-25 16:37:20,459:INFO:Importing libraries
2025-02-25 16:37:20,459:INFO:Copying training dataset
2025-02-25 16:37:20,467:INFO:Defining folds
2025-02-25 16:37:20,467:INFO:Declaring metric variables
2025-02-25 16:37:20,476:INFO:Importing untrained model
2025-02-25 16:37:20,489:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-25 16:37:20,513:INFO:Starting cross validation
2025-02-25 16:37:20,542:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:37:22,365:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,368:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,371:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,464:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,471:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,478:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,559:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,565:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,569:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,672:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,684:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,694:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,756:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,765:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,774:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,789:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,797:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,801:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,830:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,836:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,840:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:22,846:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,920:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,930:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:22,939:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:23,412:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:23,416:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:23,421:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:23,427:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:23,429:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:23,437:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:23,457:INFO:Calculating mean and std
2025-02-25 16:37:23,462:INFO:Creating metrics dataframe
2025-02-25 16:37:23,467:INFO:Uploading results into container
2025-02-25 16:37:23,467:INFO:Uploading model into container now
2025-02-25 16:37:23,469:INFO:_master_model_container: 13
2025-02-25 16:37:23,469:INFO:_display_container: 2
2025-02-25 16:37:23,471:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-25 16:37:23,471:INFO:create_model() successfully completed......................................
2025-02-25 16:37:23,708:INFO:SubProcess create_model() end ==================================
2025-02-25 16:37:23,708:INFO:Creating metrics dataframe
2025-02-25 16:37:23,739:INFO:Initializing Dummy Classifier
2025-02-25 16:37:23,739:INFO:Total runtime is 0.7668581247329711 minutes
2025-02-25 16:37:23,748:INFO:SubProcess create_model() called ==================================
2025-02-25 16:37:23,749:INFO:Initializing create_model()
2025-02-25 16:37:23,751:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B5CCCD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:37:23,751:INFO:Checking exceptions
2025-02-25 16:37:23,751:INFO:Importing libraries
2025-02-25 16:37:23,751:INFO:Copying training dataset
2025-02-25 16:37:23,761:INFO:Defining folds
2025-02-25 16:37:23,761:INFO:Declaring metric variables
2025-02-25 16:37:23,769:INFO:Importing untrained model
2025-02-25 16:37:23,782:INFO:Dummy Classifier Imported successfully
2025-02-25 16:37:23,795:INFO:Starting cross validation
2025-02-25 16:37:23,812:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:37:25,116:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,126:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,128:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:25,133:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,141:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,151:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,157:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:25,162:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,170:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,178:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,180:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:25,182:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,271:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,277:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,280:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:25,282:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,374:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,387:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,390:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,393:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:25,402:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,409:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,414:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:25,415:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,433:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,439:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,442:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:25,446:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,550:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,556:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,560:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:25,563:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,707:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,714:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,716:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:25,718:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,725:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,733:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,738:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:37:25,743:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:25,756:INFO:Calculating mean and std
2025-02-25 16:37:25,759:INFO:Creating metrics dataframe
2025-02-25 16:37:25,766:INFO:Uploading results into container
2025-02-25 16:37:25,767:INFO:Uploading model into container now
2025-02-25 16:37:25,768:INFO:_master_model_container: 14
2025-02-25 16:37:25,768:INFO:_display_container: 2
2025-02-25 16:37:25,770:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-02-25 16:37:25,770:INFO:create_model() successfully completed......................................
2025-02-25 16:37:25,993:INFO:SubProcess create_model() end ==================================
2025-02-25 16:37:25,993:INFO:Creating metrics dataframe
2025-02-25 16:37:26,021:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-02-25 16:37:26,039:INFO:Initializing create_model()
2025-02-25 16:37:26,039:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:37:26,041:INFO:Checking exceptions
2025-02-25 16:37:26,044:INFO:Importing libraries
2025-02-25 16:37:26,046:INFO:Copying training dataset
2025-02-25 16:37:26,057:INFO:Defining folds
2025-02-25 16:37:26,058:INFO:Declaring metric variables
2025-02-25 16:37:26,058:INFO:Importing untrained model
2025-02-25 16:37:26,059:INFO:Declaring custom model
2025-02-25 16:37:26,061:INFO:Naive Bayes Imported successfully
2025-02-25 16:37:26,083:INFO:Cross validation set to False
2025-02-25 16:37:26,083:INFO:Fitting Model
2025-02-25 16:37:26,211:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000115 seconds.
2025-02-25 16:37:26,211:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 16:37:26,211:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 16:37:26,212:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 16:37:26,212:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:37:26,212:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:37:26,213:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:37:26,213:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,213:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,215:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,217:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,217:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,217:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,218:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,218:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,218:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,219:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,219:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,219:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,258:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,258:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,258:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,268:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,268:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,268:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,270:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,270:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,270:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,271:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,271:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,271:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,272:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,272:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,272:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,273:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,273:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,274:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,274:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,274:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,275:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,275:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,275:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,275:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,277:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,277:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,277:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,277:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,279:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,279:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,279:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,279:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,280:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,280:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,280:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,281:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,281:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,282:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,282:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,282:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,284:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,284:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,284:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,287:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,287:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,287:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,288:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,288:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,288:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,289:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,289:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,289:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,290:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,290:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,294:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,294:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,295:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,295:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,296:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,297:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,298:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,298:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,299:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,299:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,300:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,300:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,302:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,303:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,303:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,303:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,305:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,305:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,305:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,306:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,306:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,306:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,307:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,307:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,309:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,310:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,310:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,311:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,311:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,312:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,312:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,313:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,313:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,315:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,315:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,317:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,317:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,318:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,318:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,319:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,319:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,320:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,320:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,321:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,321:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,322:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,322:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,323:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,323:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,324:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,324:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,326:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,326:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,326:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,326:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,326:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,327:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,327:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,327:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,328:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,328:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,328:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,329:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,329:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,329:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,334:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,334:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,336:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,336:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,337:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,337:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,337:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,338:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:26,381:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-25 16:37:26,381:INFO:create_model() successfully completed......................................
2025-02-25 16:37:26,710:INFO:_master_model_container: 14
2025-02-25 16:37:26,710:INFO:_display_container: 2
2025-02-25 16:37:26,711:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-25 16:37:26,711:INFO:compare_models() successfully completed......................................
2025-02-25 16:37:26,725:INFO:Initializing create_model()
2025-02-25 16:37:26,725:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:37:26,727:INFO:Checking exceptions
2025-02-25 16:37:26,764:INFO:Importing libraries
2025-02-25 16:37:26,764:INFO:Copying training dataset
2025-02-25 16:37:26,773:INFO:Defining folds
2025-02-25 16:37:26,773:INFO:Declaring metric variables
2025-02-25 16:37:26,781:INFO:Importing untrained model
2025-02-25 16:37:26,789:INFO:Random Forest Classifier Imported successfully
2025-02-25 16:37:26,810:INFO:Starting cross validation
2025-02-25 16:37:26,833:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:37:28,569:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,581:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,594:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,646:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,669:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,672:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,682:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,693:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,709:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,898:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,899:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,910:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,910:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,915:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,922:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:28,998:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,009:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,017:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,154:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,160:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,171:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,415:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,424:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,433:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,854:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,863:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,872:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,906:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,912:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,921:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:37:29,945:INFO:Calculating mean and std
2025-02-25 16:37:29,949:INFO:Creating metrics dataframe
2025-02-25 16:37:29,969:INFO:Finalizing model
2025-02-25 16:37:30,110:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000045 seconds.
2025-02-25 16:37:30,110:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 16:37:30,110:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 16:37:30,110:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 16:37:30,111:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:37:30,111:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:37:30,111:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:37:30,111:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,113:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,113:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,113:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,114:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,114:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,114:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,115:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,115:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,115:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,115:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,117:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,117:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,117:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,118:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,118:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,118:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,118:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,119:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,119:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,119:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,120:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,120:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,120:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,120:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,121:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,122:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,122:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,122:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,123:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,123:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,123:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,124:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,124:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,124:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,125:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,125:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,129:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,129:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,129:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,130:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,130:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,130:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,131:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,131:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,132:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,132:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,132:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,134:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,134:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,134:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,135:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,135:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,135:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,136:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,136:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,137:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,137:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,139:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,139:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,139:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,139:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,139:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,142:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,142:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,144:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,144:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,144:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,145:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,145:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,146:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,146:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,146:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,147:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,147:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,147:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,148:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,148:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,149:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,149:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,149:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,150:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,150:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,153:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,153:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,153:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,155:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,155:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,155:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,155:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,155:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,156:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,156:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,158:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,158:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,161:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,161:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,161:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,167:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,167:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,169:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,169:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,172:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,172:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,172:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,179:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,179:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,179:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,181:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,181:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,181:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,185:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,185:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,185:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,195:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,195:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,195:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,195:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,201:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,201:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,202:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,202:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,202:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,203:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,203:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,203:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,205:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,205:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,205:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,206:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,206:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,206:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,207:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,207:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,207:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,208:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,208:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,208:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,209:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,209:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,209:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,209:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,212:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,212:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,212:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,212:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,213:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,213:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,213:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:37:30,710:INFO:Uploading results into container
2025-02-25 16:37:30,713:INFO:Uploading model into container now
2025-02-25 16:37:30,744:INFO:_master_model_container: 15
2025-02-25 16:37:30,745:INFO:_display_container: 3
2025-02-25 16:37:30,746:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:37:30,747:INFO:create_model() successfully completed......................................
2025-02-25 16:37:30,979:INFO:Initializing tune_model()
2025-02-25 16:37:30,979:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2025-02-25 16:37:30,980:INFO:Checking exceptions
2025-02-25 16:37:31,017:INFO:Copying training dataset
2025-02-25 16:37:31,025:INFO:Checking base model
2025-02-25 16:37:31,027:INFO:Base model : Random Forest Classifier
2025-02-25 16:37:31,035:INFO:Declaring metric variables
2025-02-25 16:37:31,044:INFO:Defining Hyperparameters
2025-02-25 16:37:31,313:INFO:Tuning with n_jobs=-1
2025-02-25 16:37:31,313:INFO:Initializing RandomizedSearchCV
2025-02-25 16:38:09,332:INFO:best_params: {'actual_estimator__n_estimators': 230, 'actual_estimator__min_samples_split': 2, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.05, 'actual_estimator__max_features': 'sqrt', 'actual_estimator__max_depth': 7, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': {}, 'actual_estimator__bootstrap': False}
2025-02-25 16:38:09,336:INFO:Hyperparameter search completed
2025-02-25 16:38:09,336:INFO:SubProcess create_model() called ==================================
2025-02-25 16:38:09,339:INFO:Initializing create_model()
2025-02-25 16:38:09,339:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B992220A90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 230, 'min_samples_split': 2, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.05, 'max_features': 'sqrt', 'max_depth': 7, 'criterion': 'entropy', 'class_weight': {}, 'bootstrap': False})
2025-02-25 16:38:09,340:INFO:Checking exceptions
2025-02-25 16:38:09,340:INFO:Importing libraries
2025-02-25 16:38:09,340:INFO:Copying training dataset
2025-02-25 16:38:09,348:INFO:Defining folds
2025-02-25 16:38:09,348:INFO:Declaring metric variables
2025-02-25 16:38:09,354:INFO:Importing untrained model
2025-02-25 16:38:09,355:INFO:Declaring custom model
2025-02-25 16:38:09,365:INFO:Random Forest Classifier Imported successfully
2025-02-25 16:38:09,381:INFO:Starting cross validation
2025-02-25 16:38:09,400:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:38:11,305:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,310:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,319:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,319:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,322:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:38:11,323:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:38:11,325:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,332:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,385:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,394:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,400:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:38:11,408:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,766:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,772:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,778:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:38:11,782:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,840:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,851:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:11,856:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:38:11,861:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:12,021:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:12,032:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:12,038:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:38:12,041:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:12,279:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:12,286:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:12,290:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:12,588:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:12,596:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:12,606:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:13,172:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:13,175:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:13,182:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:13,182:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:13,186:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:13,195:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:13,214:INFO:Calculating mean and std
2025-02-25 16:38:13,217:INFO:Creating metrics dataframe
2025-02-25 16:38:13,230:INFO:Finalizing model
2025-02-25 16:38:13,355:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000074 seconds.
2025-02-25 16:38:13,356:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 16:38:13,356:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 16:38:13,356:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 16:38:13,357:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:38:13,357:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:38:13,357:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:38:13,358:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,358:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,358:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,359:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,359:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,359:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,360:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,360:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,360:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,360:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,360:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,361:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,361:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,361:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,362:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,362:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,362:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,362:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,362:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,363:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,363:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,363:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,364:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,364:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,364:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,365:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,365:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,366:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,366:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,366:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,366:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,368:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,368:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,368:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,369:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,369:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,369:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,369:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,370:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,370:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,371:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,371:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,372:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,372:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,373:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,373:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,373:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,373:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,374:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,374:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,374:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,374:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,374:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,374:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,376:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,376:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,376:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,376:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,376:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,377:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,377:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,377:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,377:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,378:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,378:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,379:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,379:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,380:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,380:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,380:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,381:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,381:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,381:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,382:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,382:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,383:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,383:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,383:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,383:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,384:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,384:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,384:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,384:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,385:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,385:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,385:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,385:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,387:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,387:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,387:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,388:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,388:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,388:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,389:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,389:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,390:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,390:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,391:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,391:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,392:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,392:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,392:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,392:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,393:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,393:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,393:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,393:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,393:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,394:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,394:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,394:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,394:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,394:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,396:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,396:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,396:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,396:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,397:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,397:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,397:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,398:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,398:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,398:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,399:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,399:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,400:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,400:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,400:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,401:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,401:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,402:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,402:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,402:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,403:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,403:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,404:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,404:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,405:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,405:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,405:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,406:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,406:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,407:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,407:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,408:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,408:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,409:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,409:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,413:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,413:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,414:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,414:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,425:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,425:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,437:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,437:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,438:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,438:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,438:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,439:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,439:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,440:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,440:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,440:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,441:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,441:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,442:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,442:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,443:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,443:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,446:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,446:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,446:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,447:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,449:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,449:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,451:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,451:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,451:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,452:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,453:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,453:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,454:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,454:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,455:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,455:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,455:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,456:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,456:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,457:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,457:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,457:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,458:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,458:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,459:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,459:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,460:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,460:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,460:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,460:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,461:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,461:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,461:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,462:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,463:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,463:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,463:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,464:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,464:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,465:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,465:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,465:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,467:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,467:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,468:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,468:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,469:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,469:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,469:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,470:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,470:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,470:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,471:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,471:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,471:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,472:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,472:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,472:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,472:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,473:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,473:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,473:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,473:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,473:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,473:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,473:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,474:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,474:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:13,474:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:14,369:INFO:Uploading results into container
2025-02-25 16:38:14,373:INFO:Uploading model into container now
2025-02-25 16:38:14,373:INFO:_master_model_container: 16
2025-02-25 16:38:14,373:INFO:_display_container: 4
2025-02-25 16:38:14,375:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:38:14,375:INFO:create_model() successfully completed......................................
2025-02-25 16:38:14,641:INFO:SubProcess create_model() end ==================================
2025-02-25 16:38:14,642:INFO:choose_better activated
2025-02-25 16:38:14,656:INFO:SubProcess create_model() called ==================================
2025-02-25 16:38:14,658:INFO:Initializing create_model()
2025-02-25 16:38:14,658:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:38:14,660:INFO:Checking exceptions
2025-02-25 16:38:14,665:INFO:Importing libraries
2025-02-25 16:38:14,665:INFO:Copying training dataset
2025-02-25 16:38:14,674:INFO:Defining folds
2025-02-25 16:38:14,674:INFO:Declaring metric variables
2025-02-25 16:38:14,674:INFO:Importing untrained model
2025-02-25 16:38:14,674:INFO:Declaring custom model
2025-02-25 16:38:14,676:INFO:Random Forest Classifier Imported successfully
2025-02-25 16:38:14,676:INFO:Starting cross validation
2025-02-25 16:38:14,706:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 16:38:16,522:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,529:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,548:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,550:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,566:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,566:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,577:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,578:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,594:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,715:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,718:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,725:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,849:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,854:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,857:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,861:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,866:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,869:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,871:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,875:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:16,878:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:17,480:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:17,491:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:17,500:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:17,869:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:17,876:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:17,876:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:17,884:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:17,887:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:17,894:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:17,919:INFO:Calculating mean and std
2025-02-25 16:38:17,922:INFO:Creating metrics dataframe
2025-02-25 16:38:17,929:INFO:Finalizing model
2025-02-25 16:38:18,058:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000112 seconds.
2025-02-25 16:38:18,059:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 16:38:18,059:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 16:38:18,060:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 16:38:18,060:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:38:18,060:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:38:18,061:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:38:18,061:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,061:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,062:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,062:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,063:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,063:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,063:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,064:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,064:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,064:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,066:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,066:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,067:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,067:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,068:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,068:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,069:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,069:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,069:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,070:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,070:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,071:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,071:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,072:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,072:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,073:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,073:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,075:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,075:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,076:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,076:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,077:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,077:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,078:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,078:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,079:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,080:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,080:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,081:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,082:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,082:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,083:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,083:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,084:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,085:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,085:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,086:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,086:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,087:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,087:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,088:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,088:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,088:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,089:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,090:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,090:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,091:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,091:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,092:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,092:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,093:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,093:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,093:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,093:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,094:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,094:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,095:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,095:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,096:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,096:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,096:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,097:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,097:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,098:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,098:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,099:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,100:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,100:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,101:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,101:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,102:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,102:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,103:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,103:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,104:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,104:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,105:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,105:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,106:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,106:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,107:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,107:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,108:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,108:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,109:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,109:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,111:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,111:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,111:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,111:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,111:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,113:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,113:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,114:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,114:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,115:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,115:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,115:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,116:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,117:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,117:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,118:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,118:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,119:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,119:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,120:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,121:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,121:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,122:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,122:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,123:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,123:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,124:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,124:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,125:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,125:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,126:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,127:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,127:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,130:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,130:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,131:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,131:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,131:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,132:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,132:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,134:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,134:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,135:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,135:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,136:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,137:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,138:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,138:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,139:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,139:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,142:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,144:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,144:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,144:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,145:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,145:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,146:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,146:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,147:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,147:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,148:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,148:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,149:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,149:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,150:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,150:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,152:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,153:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,153:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,153:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,155:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,155:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,156:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,156:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,156:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,158:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,158:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,159:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,161:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,161:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,162:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,163:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,163:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,167:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,169:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,169:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,172:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,174:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,174:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,179:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,179:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,181:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,181:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,185:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,185:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,185:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,201:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,202:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,202:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:18,824:INFO:Uploading results into container
2025-02-25 16:38:18,826:INFO:Uploading model into container now
2025-02-25 16:38:18,828:INFO:_master_model_container: 17
2025-02-25 16:38:18,828:INFO:_display_container: 5
2025-02-25 16:38:18,829:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:38:18,830:INFO:create_model() successfully completed......................................
2025-02-25 16:38:19,187:INFO:SubProcess create_model() end ==================================
2025-02-25 16:38:19,188:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) result for Accuracy is 0.6401
2025-02-25 16:38:19,190:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) result for Accuracy is 0.6918
2025-02-25 16:38:19,191:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) is best model
2025-02-25 16:38:19,191:INFO:choose_better completed
2025-02-25 16:38:19,224:INFO:_master_model_container: 17
2025-02-25 16:38:19,225:INFO:_display_container: 4
2025-02-25 16:38:19,227:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:38:19,227:INFO:tune_model() successfully completed......................................
2025-02-25 16:38:19,527:INFO:Initializing evaluate_model()
2025-02-25 16:38:19,527:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-02-25 16:38:19,552:INFO:Initializing plot_model()
2025-02-25 16:38:19,553:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2025-02-25 16:38:19,553:INFO:Checking exceptions
2025-02-25 16:38:19,658:INFO:Preloading libraries
2025-02-25 16:38:19,712:INFO:Copying training dataset
2025-02-25 16:38:19,712:INFO:Plot type: pipeline
2025-02-25 16:38:20,358:INFO:Visual Rendered Successfully
2025-02-25 16:38:20,628:INFO:plot_model() successfully completed......................................
2025-02-25 16:38:20,639:INFO:Initializing plot_model()
2025-02-25 16:38:20,641:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-02-25 16:38:20,641:INFO:Checking exceptions
2025-02-25 16:38:20,754:INFO:Preloading libraries
2025-02-25 16:38:20,806:INFO:Copying training dataset
2025-02-25 16:38:20,806:INFO:Plot type: confusion_matrix
2025-02-25 16:38:21,039:INFO:Fitting Model
2025-02-25 16:38:21,040:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-02-25 16:38:21,041:INFO:Scoring test/hold-out set
2025-02-25 16:38:21,743:INFO:Visual Rendered Successfully
2025-02-25 16:38:22,018:INFO:plot_model() successfully completed......................................
2025-02-25 16:38:22,022:INFO:Initializing plot_model()
2025-02-25 16:38:22,022:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), plot=feature, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-02-25 16:38:22,023:INFO:Checking exceptions
2025-02-25 16:38:22,143:INFO:Preloading libraries
2025-02-25 16:38:22,202:INFO:Copying training dataset
2025-02-25 16:38:22,203:INFO:Plot type: feature
2025-02-25 16:38:22,204:WARNING:No coef_ found. Trying feature_importances_
2025-02-25 16:38:22,689:INFO:Visual Rendered Successfully
2025-02-25 16:38:22,955:INFO:plot_model() successfully completed......................................
2025-02-25 16:38:22,971:INFO:Initializing finalize_model()
2025-02-25 16:38:22,972:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-25 16:38:22,973:INFO:Finalizing RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 16:38:22,984:INFO:Initializing create_model()
2025-02-25 16:38:22,984:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 16:38:22,984:INFO:Checking exceptions
2025-02-25 16:38:22,988:INFO:Importing libraries
2025-02-25 16:38:22,989:INFO:Copying training dataset
2025-02-25 16:38:22,990:INFO:Defining folds
2025-02-25 16:38:22,991:INFO:Declaring metric variables
2025-02-25 16:38:22,991:INFO:Importing untrained model
2025-02-25 16:38:22,992:INFO:Declaring custom model
2025-02-25 16:38:22,995:INFO:Random Forest Classifier Imported successfully
2025-02-25 16:38:23,024:INFO:Cross validation set to False
2025-02-25 16:38:23,025:INFO:Fitting Model
2025-02-25 16:38:23,173:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000066 seconds.
2025-02-25 16:38:23,173:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 16:38:23,174:INFO:[LightGBM] [Info] Total Bins 464
2025-02-25 16:38:23,174:INFO:[LightGBM] [Info] Number of data points in the train set: 204, number of used features: 7
2025-02-25 16:38:23,175:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:38:23,175:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:38:23,175:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 16:38:23,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,179:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,181:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,181:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,185:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,195:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,195:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,201:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,202:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,203:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,203:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,205:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,205:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,206:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,206:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,207:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,207:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,208:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,208:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,209:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,209:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,212:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,212:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,212:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,213:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,213:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,215:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,215:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,215:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,218:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,218:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,219:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,245:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,258:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,258:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,268:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,268:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,270:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,270:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,271:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,271:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,272:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,272:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,273:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,273:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,274:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,274:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,275:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,275:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,277:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,277:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,278:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,279:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,279:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,280:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,280:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,281:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,281:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,282:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,282:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,282:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,284:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,284:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,287:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,287:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,288:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,288:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,289:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,289:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,290:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,290:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,294:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,294:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,295:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,295:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,296:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,297:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,297:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,298:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,298:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,299:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,300:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,300:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,302:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,302:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,303:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,303:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,304:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,304:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,305:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,307:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,307:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,309:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,309:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,310:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,310:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,310:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,311:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,311:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,312:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,312:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,313:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,313:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,315:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,315:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,317:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,317:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,318:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,318:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,319:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,319:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,320:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,321:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,322:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,322:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,323:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,323:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,324:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,324:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,326:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,326:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,326:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,327:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,327:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,327:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,327:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,328:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,328:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,328:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,328:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,328:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:23,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 16:38:24,301:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-25 16:38:24,301:INFO:create_model() successfully completed......................................
2025-02-25 16:38:24,567:INFO:_master_model_container: 17
2025-02-25 16:38:24,568:INFO:_display_container: 4
2025-02-25 16:38:24,646:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-25 16:38:24,647:INFO:finalize_model() successfully completed......................................
2025-02-25 16:38:24,957:INFO:Initializing predict_model()
2025-02-25 16:38:24,958:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B98F278CC0>)
2025-02-25 16:38:24,958:INFO:Checking exceptions
2025-02-25 16:38:24,958:INFO:Preloading libraries
2025-02-25 16:38:24,965:INFO:Set up data.
2025-02-25 16:38:24,982:INFO:Set up index.
2025-02-25 16:38:25,214:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
                          ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
                          ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

  warnings.warn(traceback.format_exc())

2025-02-25 16:38:25,224:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:25,229:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:25,235:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:38:25,237:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:25,589:INFO:Initializing predict_model()
2025-02-25 16:38:25,590:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98C47BCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B98AB6C0E0>)
2025-02-25 16:38:25,590:INFO:Checking exceptions
2025-02-25 16:38:25,590:INFO:Preloading libraries
2025-02-25 16:38:25,593:INFO:Set up data.
2025-02-25 16:38:25,605:INFO:Set up index.
2025-02-25 16:38:25,835:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
                          ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
                          ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

  warnings.warn(traceback.format_exc())

2025-02-25 16:38:25,839:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:25,846:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:25,848:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 16:38:25,853:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 16:38:54,218:INFO:Initializing save_model()
2025-02-25 16:38:54,219:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False), model_name=wheat_classifier_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Gabriel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImp...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=1,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-25 16:38:54,219:INFO:Adding model into prep_pipe
2025-02-25 16:38:54,219:WARNING:Only Model saved as it was a pipeline.
2025-02-25 16:38:54,522:INFO:wheat_classifier_model.pkl saved in current working directory
2025-02-25 16:38:54,579:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-25 16:38:54,580:INFO:save_model() successfully completed......................................
2025-02-25 19:23:16,302:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 19:23:16,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 19:23:16,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 19:23:16,303:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-25 19:28:27,352:INFO:PyCaret ClassificationExperiment
2025-02-25 19:28:27,352:INFO:Logging name: wheat_classification
2025-02-25 19:28:27,352:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-25 19:28:27,353:INFO:version 3.3.2
2025-02-25 19:28:27,353:INFO:Initializing setup()
2025-02-25 19:28:27,353:INFO:self.USI: 7445
2025-02-25 19:28:27,353:INFO:self._variable_keys: {'html_param', 'y', 'X', 'n_jobs_param', 'USI', 'seed', 'X_test', '_ml_usecase', 'fold_generator', 'fold_groups_param', 'exp_name_log', 'target_param', 'log_plots_param', 'data', 'fold_shuffle_param', 'idx', 'exp_id', 'y_test', 'is_multiclass', 'memory', 'fix_imbalance', 'X_train', 'logging_param', '_available_plots', 'gpu_param', 'gpu_n_jobs_param', 'y_train', 'pipeline'}
2025-02-25 19:28:27,353:INFO:Checking environment
2025-02-25 19:28:27,353:INFO:python_version: 3.11.11
2025-02-25 19:28:27,354:INFO:python_build: ('main', 'Dec 11 2024 16:34:19')
2025-02-25 19:28:27,354:INFO:machine: AMD64
2025-02-25 19:28:27,354:INFO:platform: Windows-10-10.0.26100-SP0
2025-02-25 19:28:27,361:INFO:Memory: svmem(total=16969424896, available=2418896896, percent=85.7, used=14550528000, free=2418896896)
2025-02-25 19:28:27,362:INFO:Physical Core: 4
2025-02-25 19:28:27,362:INFO:Logical Core: 8
2025-02-25 19:28:27,362:INFO:Checking libraries
2025-02-25 19:28:27,362:INFO:System:
2025-02-25 19:28:27,362:INFO:    python: 3.11.11 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:34:19) [MSC v.1929 64 bit (AMD64)]
2025-02-25 19:28:27,362:INFO:executable: C:\Users\Gabriel\anaconda3\envs\pycaret-env\python.exe
2025-02-25 19:28:27,362:INFO:   machine: Windows-10-10.0.26100-SP0
2025-02-25 19:28:27,362:INFO:PyCaret required dependencies:
2025-02-25 19:28:27,646:INFO:                 pip: 25.0
2025-02-25 19:28:27,648:INFO:          setuptools: 75.8.0
2025-02-25 19:28:27,648:INFO:             pycaret: 3.3.2
2025-02-25 19:28:27,648:INFO:             IPython: 8.32.0
2025-02-25 19:28:27,648:INFO:          ipywidgets: 8.1.5
2025-02-25 19:28:27,648:INFO:                tqdm: 4.67.1
2025-02-25 19:28:27,650:INFO:               numpy: 1.26.4
2025-02-25 19:28:27,650:INFO:              pandas: 2.1.4
2025-02-25 19:28:27,653:INFO:              jinja2: 3.1.5
2025-02-25 19:28:27,653:INFO:               scipy: 1.11.4
2025-02-25 19:28:27,654:INFO:              joblib: 1.3.2
2025-02-25 19:28:27,655:INFO:             sklearn: 1.4.2
2025-02-25 19:28:27,655:INFO:                pyod: 2.0.3
2025-02-25 19:28:27,655:INFO:            imblearn: 0.13.0
2025-02-25 19:28:27,655:INFO:   category_encoders: 2.7.0
2025-02-25 19:28:27,655:INFO:            lightgbm: 4.6.0
2025-02-25 19:28:27,655:INFO:               numba: 0.61.0
2025-02-25 19:28:27,655:INFO:            requests: 2.32.3
2025-02-25 19:28:27,655:INFO:          matplotlib: 3.7.5
2025-02-25 19:28:27,655:INFO:          scikitplot: 0.3.7
2025-02-25 19:28:27,655:INFO:         yellowbrick: 1.5
2025-02-25 19:28:27,655:INFO:              plotly: 5.24.1
2025-02-25 19:28:27,657:INFO:    plotly-resampler: Not installed
2025-02-25 19:28:27,657:INFO:             kaleido: 0.2.1
2025-02-25 19:28:27,657:INFO:           schemdraw: 0.15
2025-02-25 19:28:27,657:INFO:         statsmodels: 0.14.4
2025-02-25 19:28:27,657:INFO:              sktime: 0.26.0
2025-02-25 19:28:27,657:INFO:               tbats: 1.1.3
2025-02-25 19:28:27,658:INFO:            pmdarima: 2.0.4
2025-02-25 19:28:27,658:INFO:              psutil: 7.0.0
2025-02-25 19:28:27,658:INFO:          markupsafe: 3.0.2
2025-02-25 19:28:27,658:INFO:             pickle5: Not installed
2025-02-25 19:28:27,658:INFO:         cloudpickle: 3.1.1
2025-02-25 19:28:27,658:INFO:         deprecation: 2.1.0
2025-02-25 19:28:27,658:INFO:              xxhash: 3.5.0
2025-02-25 19:28:27,658:INFO:           wurlitzer: Not installed
2025-02-25 19:28:27,658:INFO:PyCaret optional dependencies:
2025-02-25 19:28:27,771:INFO:                shap: Not installed
2025-02-25 19:28:27,771:INFO:           interpret: Not installed
2025-02-25 19:28:27,772:INFO:                umap: Not installed
2025-02-25 19:28:27,775:INFO:     ydata_profiling: Not installed
2025-02-25 19:28:27,775:INFO:  explainerdashboard: Not installed
2025-02-25 19:28:27,775:INFO:             autoviz: Not installed
2025-02-25 19:28:27,775:INFO:           fairlearn: Not installed
2025-02-25 19:28:27,775:INFO:          deepchecks: Not installed
2025-02-25 19:28:27,775:INFO:             xgboost: Not installed
2025-02-25 19:28:27,776:INFO:            catboost: Not installed
2025-02-25 19:28:27,776:INFO:              kmodes: Not installed
2025-02-25 19:28:27,776:INFO:             mlxtend: Not installed
2025-02-25 19:28:27,776:INFO:       statsforecast: Not installed
2025-02-25 19:28:27,776:INFO:        tune_sklearn: Not installed
2025-02-25 19:28:27,776:INFO:                 ray: Not installed
2025-02-25 19:28:27,776:INFO:            hyperopt: Not installed
2025-02-25 19:28:27,776:INFO:              optuna: Not installed
2025-02-25 19:28:27,776:INFO:               skopt: Not installed
2025-02-25 19:28:27,776:INFO:              mlflow: 2.20.2
2025-02-25 19:28:27,776:INFO:              gradio: Not installed
2025-02-25 19:28:27,776:INFO:             fastapi: Not installed
2025-02-25 19:28:27,776:INFO:             uvicorn: Not installed
2025-02-25 19:28:27,777:INFO:              m2cgen: Not installed
2025-02-25 19:28:27,778:INFO:           evidently: Not installed
2025-02-25 19:28:27,778:INFO:               fugue: Not installed
2025-02-25 19:28:27,778:INFO:           streamlit: Not installed
2025-02-25 19:28:27,778:INFO:             prophet: Not installed
2025-02-25 19:28:27,778:INFO:None
2025-02-25 19:28:27,778:INFO:Set up data.
2025-02-25 19:28:27,807:INFO:Set up folding strategy.
2025-02-25 19:28:27,808:INFO:Set up train/test split.
2025-02-25 19:28:27,818:INFO:Set up index.
2025-02-25 19:28:27,819:INFO:Assigning column types.
2025-02-25 19:28:27,831:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-25 19:28:28,004:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-25 19:28:28,022:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 19:28:28,166:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:28,167:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:28,333:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-25 19:28:28,335:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 19:28:28,425:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:28,426:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:28,427:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-25 19:28:28,614:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 19:28:28,712:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:28,713:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:28,933:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 19:28:29,046:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:29,047:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:29,048:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-25 19:28:29,284:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:29,284:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:29,546:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:29,547:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:29,556:INFO:Preparing preprocessing pipeline...
2025-02-25 19:28:29,559:INFO:Set up label encoding.
2025-02-25 19:28:29,560:INFO:Set up simple imputation.
2025-02-25 19:28:29,560:INFO:Set up imbalanced handling.
2025-02-25 19:28:29,560:INFO:Set up column transformation.
2025-02-25 19:28:29,560:INFO:Set up feature normalization.
2025-02-25 19:28:29,560:INFO:Set up feature selection.
2025-02-25 19:28:29,843:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:29,844:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:30,287:INFO:Finished creating preprocessing pipeline.
2025-02-25 19:28:30,358:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Gabriel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImp...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=1,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2025-02-25 19:28:30,358:INFO:Creating final display dataframe.
2025-02-25 19:28:30,635:INFO:Setup _display_container:                     Description                 Value
0                    Session id                    42
1                        Target                  Type
2                   Target type            Multiclass
3                Target mapping      1: 0, 2: 1, 3: 2
4           Original data shape              (199, 8)
5        Transformed data shape              (204, 2)
6   Transformed train set shape              (144, 2)
7    Transformed test set shape               (60, 2)
8              Numeric features                     7
9                    Preprocess                  True
10              Imputation type                simple
11           Numeric imputation                  mean
12       Categorical imputation                  mode
13                Fix imbalance                  True
14         Fix imbalance method                 SMOTE
15               Transformation                  True
16        Transformation method           yeo-johnson
17                    Normalize                  True
18             Normalize method                zscore
19            Feature selection                  True
20     Feature selection method               classic
21  Feature selection estimator              lightgbm
22  Number of features selected                   0.2
23               Fold Generator       StratifiedKFold
24                  Fold Number                    10
25                     CPU Jobs                    -1
26                      Use GPU                 False
27               Log Experiment          MlflowLogger
28              Experiment Name  wheat_classification
29                          USI                  7445
2025-02-25 19:28:30,945:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:30,946:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:31,222:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:31,223:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:28:31,230:INFO:Logging experiment in loggers
2025-02-25 19:30:01,572:INFO:PyCaret ClassificationExperiment
2025-02-25 19:30:01,572:INFO:Logging name: wheat_classification
2025-02-25 19:30:01,573:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-25 19:30:01,573:INFO:version 3.3.2
2025-02-25 19:30:01,573:INFO:Initializing setup()
2025-02-25 19:30:01,573:INFO:self.USI: 2f1a
2025-02-25 19:30:01,574:INFO:self._variable_keys: {'target_param', 'fold_shuffle_param', 'n_jobs_param', 'y_train', 'fix_imbalance', 'data', 'idx', 'X', 'logging_param', 'X_test', 'gpu_param', 'is_multiclass', 'fold_groups_param', 'gpu_n_jobs_param', 'memory', 'pipeline', 'USI', '_ml_usecase', 'log_plots_param', 'fold_generator', 'exp_id', 'y_test', 'y', '_available_plots', 'seed', 'exp_name_log', 'X_train', 'html_param'}
2025-02-25 19:30:01,574:INFO:Checking environment
2025-02-25 19:30:01,574:INFO:python_version: 3.11.11
2025-02-25 19:30:01,574:INFO:python_build: ('main', 'Dec 11 2024 16:34:19')
2025-02-25 19:30:01,574:INFO:machine: AMD64
2025-02-25 19:30:01,575:INFO:platform: Windows-10-10.0.26100-SP0
2025-02-25 19:30:01,586:INFO:Memory: svmem(total=16969424896, available=2457419776, percent=85.5, used=14512005120, free=2457419776)
2025-02-25 19:30:01,586:INFO:Physical Core: 4
2025-02-25 19:30:01,586:INFO:Logical Core: 8
2025-02-25 19:30:01,587:INFO:Checking libraries
2025-02-25 19:30:01,587:INFO:System:
2025-02-25 19:30:01,587:INFO:    python: 3.11.11 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:34:19) [MSC v.1929 64 bit (AMD64)]
2025-02-25 19:30:01,587:INFO:executable: C:\Users\Gabriel\anaconda3\envs\pycaret-env\python.exe
2025-02-25 19:30:01,588:INFO:   machine: Windows-10-10.0.26100-SP0
2025-02-25 19:30:01,588:INFO:PyCaret required dependencies:
2025-02-25 19:30:01,588:INFO:                 pip: 25.0
2025-02-25 19:30:01,588:INFO:          setuptools: 75.8.0
2025-02-25 19:30:01,589:INFO:             pycaret: 3.3.2
2025-02-25 19:30:01,589:INFO:             IPython: 8.32.0
2025-02-25 19:30:01,589:INFO:          ipywidgets: 8.1.5
2025-02-25 19:30:01,589:INFO:                tqdm: 4.67.1
2025-02-25 19:30:01,589:INFO:               numpy: 1.26.4
2025-02-25 19:30:01,589:INFO:              pandas: 2.1.4
2025-02-25 19:30:01,590:INFO:              jinja2: 3.1.5
2025-02-25 19:30:01,590:INFO:               scipy: 1.11.4
2025-02-25 19:30:01,590:INFO:              joblib: 1.3.2
2025-02-25 19:30:01,591:INFO:             sklearn: 1.4.2
2025-02-25 19:30:01,591:INFO:                pyod: 2.0.3
2025-02-25 19:30:01,591:INFO:            imblearn: 0.13.0
2025-02-25 19:30:01,591:INFO:   category_encoders: 2.7.0
2025-02-25 19:30:01,591:INFO:            lightgbm: 4.6.0
2025-02-25 19:30:01,592:INFO:               numba: 0.61.0
2025-02-25 19:30:01,592:INFO:            requests: 2.32.3
2025-02-25 19:30:01,592:INFO:          matplotlib: 3.7.5
2025-02-25 19:30:01,592:INFO:          scikitplot: 0.3.7
2025-02-25 19:30:01,592:INFO:         yellowbrick: 1.5
2025-02-25 19:30:01,593:INFO:              plotly: 5.24.1
2025-02-25 19:30:01,593:INFO:    plotly-resampler: Not installed
2025-02-25 19:30:01,593:INFO:             kaleido: 0.2.1
2025-02-25 19:30:01,593:INFO:           schemdraw: 0.15
2025-02-25 19:30:01,594:INFO:         statsmodels: 0.14.4
2025-02-25 19:30:01,594:INFO:              sktime: 0.26.0
2025-02-25 19:30:01,594:INFO:               tbats: 1.1.3
2025-02-25 19:30:01,594:INFO:            pmdarima: 2.0.4
2025-02-25 19:30:01,594:INFO:              psutil: 7.0.0
2025-02-25 19:30:01,595:INFO:          markupsafe: 3.0.2
2025-02-25 19:30:01,595:INFO:             pickle5: Not installed
2025-02-25 19:30:01,595:INFO:         cloudpickle: 3.1.1
2025-02-25 19:30:01,595:INFO:         deprecation: 2.1.0
2025-02-25 19:30:01,595:INFO:              xxhash: 3.5.0
2025-02-25 19:30:01,596:INFO:           wurlitzer: Not installed
2025-02-25 19:30:01,596:INFO:PyCaret optional dependencies:
2025-02-25 19:30:01,596:INFO:                shap: Not installed
2025-02-25 19:30:01,597:INFO:           interpret: Not installed
2025-02-25 19:30:01,597:INFO:                umap: Not installed
2025-02-25 19:30:01,597:INFO:     ydata_profiling: Not installed
2025-02-25 19:30:01,597:INFO:  explainerdashboard: Not installed
2025-02-25 19:30:01,597:INFO:             autoviz: Not installed
2025-02-25 19:30:01,598:INFO:           fairlearn: Not installed
2025-02-25 19:30:01,598:INFO:          deepchecks: Not installed
2025-02-25 19:30:01,598:INFO:             xgboost: Not installed
2025-02-25 19:30:01,598:INFO:            catboost: Not installed
2025-02-25 19:30:01,599:INFO:              kmodes: Not installed
2025-02-25 19:30:01,599:INFO:             mlxtend: Not installed
2025-02-25 19:30:01,599:INFO:       statsforecast: Not installed
2025-02-25 19:30:01,599:INFO:        tune_sklearn: Not installed
2025-02-25 19:30:01,599:INFO:                 ray: Not installed
2025-02-25 19:30:01,600:INFO:            hyperopt: Not installed
2025-02-25 19:30:01,600:INFO:              optuna: Not installed
2025-02-25 19:30:01,600:INFO:               skopt: Not installed
2025-02-25 19:30:01,600:INFO:              mlflow: 2.20.2
2025-02-25 19:30:01,600:INFO:              gradio: Not installed
2025-02-25 19:30:01,601:INFO:             fastapi: Not installed
2025-02-25 19:30:01,601:INFO:             uvicorn: Not installed
2025-02-25 19:30:01,601:INFO:              m2cgen: Not installed
2025-02-25 19:30:01,601:INFO:           evidently: Not installed
2025-02-25 19:30:01,601:INFO:               fugue: Not installed
2025-02-25 19:30:01,601:INFO:           streamlit: Not installed
2025-02-25 19:30:01,601:INFO:             prophet: Not installed
2025-02-25 19:30:01,602:INFO:None
2025-02-25 19:30:01,602:INFO:Set up data.
2025-02-25 19:30:01,614:INFO:Set up folding strategy.
2025-02-25 19:30:01,615:INFO:Set up train/test split.
2025-02-25 19:30:01,624:INFO:Set up index.
2025-02-25 19:30:01,624:INFO:Assigning column types.
2025-02-25 19:30:01,632:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-25 19:30:01,799:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-25 19:30:01,803:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 19:30:01,902:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:01,903:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:02,068:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-25 19:30:02,074:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 19:30:02,186:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:02,187:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:02,188:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-25 19:30:02,350:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 19:30:02,474:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:02,475:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:02,648:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-25 19:30:02,739:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:02,740:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:02,741:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-25 19:30:03,041:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:03,043:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:03,316:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:03,317:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:03,321:INFO:Preparing preprocessing pipeline...
2025-02-25 19:30:03,323:INFO:Set up label encoding.
2025-02-25 19:30:03,323:INFO:Set up simple imputation.
2025-02-25 19:30:03,323:INFO:Set up imbalanced handling.
2025-02-25 19:30:03,323:INFO:Set up column transformation.
2025-02-25 19:30:03,324:INFO:Set up feature normalization.
2025-02-25 19:30:03,324:INFO:Set up feature selection.
2025-02-25 19:30:03,590:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:03,590:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:03,818:INFO:Finished creating preprocessing pipeline.
2025-02-25 19:30:03,886:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Gabriel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImp...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=1,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2025-02-25 19:30:03,886:INFO:Creating final display dataframe.
2025-02-25 19:30:04,142:INFO:Setup _display_container:                     Description                 Value
0                    Session id                    42
1                        Target                  Type
2                   Target type            Multiclass
3                Target mapping      1: 0, 2: 1, 3: 2
4           Original data shape              (199, 8)
5        Transformed data shape              (204, 2)
6   Transformed train set shape              (144, 2)
7    Transformed test set shape               (60, 2)
8              Numeric features                     7
9                    Preprocess                  True
10              Imputation type                simple
11           Numeric imputation                  mean
12       Categorical imputation                  mode
13                Fix imbalance                  True
14         Fix imbalance method                 SMOTE
15               Transformation                  True
16        Transformation method           yeo-johnson
17                    Normalize                  True
18             Normalize method                zscore
19            Feature selection                  True
20     Feature selection method               classic
21  Feature selection estimator              lightgbm
22  Number of features selected                   0.2
23               Fold Generator       StratifiedKFold
24                  Fold Number                    10
25                     CPU Jobs                    -1
26                      Use GPU                 False
27               Log Experiment                 False
28              Experiment Name  wheat_classification
29                          USI                  2f1a
2025-02-25 19:30:04,436:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:04,437:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:04,727:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:04,728:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-25 19:30:04,734:INFO:setup() successfully completed in 3.18s...............
2025-02-25 19:31:16,445:INFO:Initializing compare_models()
2025-02-25 19:31:16,445:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, include=None, exclude=None, fold=10, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, 'include': None, 'exclude': None, 'fold': 10, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-02-25 19:31:16,445:INFO:Checking exceptions
2025-02-25 19:31:16,454:INFO:Preparing display monitor
2025-02-25 19:31:16,501:INFO:Initializing Logistic Regression
2025-02-25 19:31:16,502:INFO:Total runtime is 0.0 minutes
2025-02-25 19:31:16,511:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:16,511:INFO:Initializing create_model()
2025-02-25 19:31:16,512:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:16,512:INFO:Checking exceptions
2025-02-25 19:31:16,512:INFO:Importing libraries
2025-02-25 19:31:16,512:INFO:Copying training dataset
2025-02-25 19:31:16,526:INFO:Defining folds
2025-02-25 19:31:16,527:INFO:Declaring metric variables
2025-02-25 19:31:16,535:INFO:Importing untrained model
2025-02-25 19:31:16,544:INFO:Logistic Regression Imported successfully
2025-02-25 19:31:16,561:INFO:Starting cross validation
2025-02-25 19:31:16,583:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:24,206:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:24,211:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,214:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:24,217:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,220:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,221:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,222:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:24,226:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,230:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,230:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,236:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,240:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:24,241:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,245:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,253:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,258:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,385:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:24,389:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,394:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,398:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,425:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:24,431:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,439:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,444:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,454:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:24,464:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,472:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,477:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,511:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:24,515:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,521:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,526:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,637:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:24,638:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,639:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:24,640:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,640:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,642:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,642:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,644:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:24,653:INFO:Calculating mean and std
2025-02-25 19:31:24,658:INFO:Creating metrics dataframe
2025-02-25 19:31:24,662:INFO:Uploading results into container
2025-02-25 19:31:24,664:INFO:Uploading model into container now
2025-02-25 19:31:24,665:INFO:_master_model_container: 1
2025-02-25 19:31:24,665:INFO:_display_container: 2
2025-02-25 19:31:24,666:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-25 19:31:24,666:INFO:create_model() successfully completed......................................
2025-02-25 19:31:25,005:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:25,005:INFO:Creating metrics dataframe
2025-02-25 19:31:25,023:INFO:Initializing K Neighbors Classifier
2025-02-25 19:31:25,024:INFO:Total runtime is 0.1420197566350301 minutes
2025-02-25 19:31:25,033:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:25,035:INFO:Initializing create_model()
2025-02-25 19:31:25,035:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:25,035:INFO:Checking exceptions
2025-02-25 19:31:25,036:INFO:Importing libraries
2025-02-25 19:31:25,036:INFO:Copying training dataset
2025-02-25 19:31:25,044:INFO:Defining folds
2025-02-25 19:31:25,044:INFO:Declaring metric variables
2025-02-25 19:31:25,052:INFO:Importing untrained model
2025-02-25 19:31:25,061:INFO:K Neighbors Classifier Imported successfully
2025-02-25 19:31:25,081:INFO:Starting cross validation
2025-02-25 19:31:25,110:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:26,152:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,164:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,177:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,182:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,184:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,198:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,200:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,209:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,213:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,394:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,404:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,416:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,501:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,511:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,520:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,558:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,568:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,579:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,620:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,632:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,640:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,671:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,675:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,685:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,916:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,922:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,924:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,929:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,930:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,941:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:26,955:INFO:Calculating mean and std
2025-02-25 19:31:26,960:INFO:Creating metrics dataframe
2025-02-25 19:31:26,968:INFO:Uploading results into container
2025-02-25 19:31:26,969:INFO:Uploading model into container now
2025-02-25 19:31:26,970:INFO:_master_model_container: 2
2025-02-25 19:31:26,970:INFO:_display_container: 2
2025-02-25 19:31:26,971:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-25 19:31:26,971:INFO:create_model() successfully completed......................................
2025-02-25 19:31:27,290:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:27,291:INFO:Creating metrics dataframe
2025-02-25 19:31:27,313:INFO:Initializing Naive Bayes
2025-02-25 19:31:27,313:INFO:Total runtime is 0.1801862597465515 minutes
2025-02-25 19:31:27,322:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:27,324:INFO:Initializing create_model()
2025-02-25 19:31:27,324:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:27,324:INFO:Checking exceptions
2025-02-25 19:31:27,325:INFO:Importing libraries
2025-02-25 19:31:27,325:INFO:Copying training dataset
2025-02-25 19:31:27,334:INFO:Defining folds
2025-02-25 19:31:27,334:INFO:Declaring metric variables
2025-02-25 19:31:27,346:INFO:Importing untrained model
2025-02-25 19:31:27,352:INFO:Naive Bayes Imported successfully
2025-02-25 19:31:27,368:INFO:Starting cross validation
2025-02-25 19:31:27,394:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:28,429:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,430:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,438:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,442:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,449:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:28,449:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,453:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,495:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,507:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,518:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,521:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,528:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,541:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,652:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,663:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,674:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,710:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,721:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,730:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,762:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,772:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,783:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,832:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,841:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:28,850:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:29,077:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:29,081:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:29,088:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:29,090:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:29,097:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:29,099:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:29,116:INFO:Calculating mean and std
2025-02-25 19:31:29,121:INFO:Creating metrics dataframe
2025-02-25 19:31:29,130:INFO:Uploading results into container
2025-02-25 19:31:29,131:INFO:Uploading model into container now
2025-02-25 19:31:29,132:INFO:_master_model_container: 3
2025-02-25 19:31:29,132:INFO:_display_container: 2
2025-02-25 19:31:29,134:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-25 19:31:29,134:INFO:create_model() successfully completed......................................
2025-02-25 19:31:29,441:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:29,442:INFO:Creating metrics dataframe
2025-02-25 19:31:29,461:INFO:Initializing Decision Tree Classifier
2025-02-25 19:31:29,462:INFO:Total runtime is 0.21600476106007893 minutes
2025-02-25 19:31:29,471:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:29,471:INFO:Initializing create_model()
2025-02-25 19:31:29,471:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:29,471:INFO:Checking exceptions
2025-02-25 19:31:29,471:INFO:Importing libraries
2025-02-25 19:31:29,471:INFO:Copying training dataset
2025-02-25 19:31:29,481:INFO:Defining folds
2025-02-25 19:31:29,481:INFO:Declaring metric variables
2025-02-25 19:31:29,489:INFO:Importing untrained model
2025-02-25 19:31:29,498:INFO:Decision Tree Classifier Imported successfully
2025-02-25 19:31:29,516:INFO:Starting cross validation
2025-02-25 19:31:29,543:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:30,551:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,557:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,561:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,574:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,586:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,598:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,614:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,627:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,630:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,670:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,679:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,685:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,829:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,834:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,838:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,895:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,902:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,909:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,912:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,918:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,925:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,960:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,964:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:30,967:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:31,144:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:31,149:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:31,155:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:31,180:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:31,189:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:31,198:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:31,213:INFO:Calculating mean and std
2025-02-25 19:31:31,219:INFO:Creating metrics dataframe
2025-02-25 19:31:31,223:INFO:Uploading results into container
2025-02-25 19:31:31,225:INFO:Uploading model into container now
2025-02-25 19:31:31,226:INFO:_master_model_container: 4
2025-02-25 19:31:31,226:INFO:_display_container: 2
2025-02-25 19:31:31,228:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-02-25 19:31:31,228:INFO:create_model() successfully completed......................................
2025-02-25 19:31:31,533:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:31,535:INFO:Creating metrics dataframe
2025-02-25 19:31:31,557:INFO:Initializing SVM - Linear Kernel
2025-02-25 19:31:31,558:INFO:Total runtime is 0.25094310442606604 minutes
2025-02-25 19:31:31,567:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:31,567:INFO:Initializing create_model()
2025-02-25 19:31:31,568:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:31,568:INFO:Checking exceptions
2025-02-25 19:31:31,569:INFO:Importing libraries
2025-02-25 19:31:31,569:INFO:Copying training dataset
2025-02-25 19:31:31,580:INFO:Defining folds
2025-02-25 19:31:31,581:INFO:Declaring metric variables
2025-02-25 19:31:31,591:INFO:Importing untrained model
2025-02-25 19:31:31,629:INFO:SVM - Linear Kernel Imported successfully
2025-02-25 19:31:31,662:INFO:Starting cross validation
2025-02-25 19:31:31,686:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:32,723:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:32,729:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,735:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,742:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:32,744:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,744:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,751:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,754:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:32,757:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,819:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:32,822:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,818:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:32,830:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,837:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,840:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,848:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,861:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:32,992:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:32,995:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,000:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,003:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:33,006:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,049:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:33,057:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,065:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,067:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:33,071:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,142:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:33,144:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,148:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,161:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,207:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:33,210:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,220:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,224:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:33,229:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,405:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:33,407:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,407:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:33,410:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,413:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:33,413:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,416:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,425:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,426:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:33,429:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:33,447:INFO:Calculating mean and std
2025-02-25 19:31:33,450:INFO:Creating metrics dataframe
2025-02-25 19:31:33,456:INFO:Uploading results into container
2025-02-25 19:31:33,457:INFO:Uploading model into container now
2025-02-25 19:31:33,459:INFO:_master_model_container: 5
2025-02-25 19:31:33,459:INFO:_display_container: 2
2025-02-25 19:31:33,461:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-25 19:31:33,462:INFO:create_model() successfully completed......................................
2025-02-25 19:31:33,763:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:33,764:INFO:Creating metrics dataframe
2025-02-25 19:31:33,795:INFO:Initializing Ridge Classifier
2025-02-25 19:31:33,795:INFO:Total runtime is 0.2882245580355326 minutes
2025-02-25 19:31:33,804:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:33,805:INFO:Initializing create_model()
2025-02-25 19:31:33,805:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:33,806:INFO:Checking exceptions
2025-02-25 19:31:33,806:INFO:Importing libraries
2025-02-25 19:31:33,806:INFO:Copying training dataset
2025-02-25 19:31:33,817:INFO:Defining folds
2025-02-25 19:31:33,817:INFO:Declaring metric variables
2025-02-25 19:31:33,825:INFO:Importing untrained model
2025-02-25 19:31:33,833:INFO:Ridge Classifier Imported successfully
2025-02-25 19:31:33,848:INFO:Starting cross validation
2025-02-25 19:31:33,865:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:34,880:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:34,885:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:34,890:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:34,893:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:34,907:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:34,908:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:34,912:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:34,914:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:34,918:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:34,918:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:34,922:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:34,932:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:34,933:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:34,934:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:34,948:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:34,954:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:34,943:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:34,962:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:34,966:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:34,972:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,015:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:35,019:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,030:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,035:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:35,039:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,150:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:35,151:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,162:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,167:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:35,175:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,227:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:35,232:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,240:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,242:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:35,246:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,321:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:35,326:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,334:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,337:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:35,339:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,502:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:35,506:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,517:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,519:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:35,521:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,524:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:35,529:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,533:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,535:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:35,537:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:35,550:INFO:Calculating mean and std
2025-02-25 19:31:35,555:INFO:Creating metrics dataframe
2025-02-25 19:31:35,559:INFO:Uploading results into container
2025-02-25 19:31:35,560:INFO:Uploading model into container now
2025-02-25 19:31:35,561:INFO:_master_model_container: 6
2025-02-25 19:31:35,562:INFO:_display_container: 2
2025-02-25 19:31:35,563:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-02-25 19:31:35,563:INFO:create_model() successfully completed......................................
2025-02-25 19:31:35,878:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:35,879:INFO:Creating metrics dataframe
2025-02-25 19:31:35,908:INFO:Initializing Random Forest Classifier
2025-02-25 19:31:35,909:INFO:Total runtime is 0.3234593590100606 minutes
2025-02-25 19:31:35,921:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:35,922:INFO:Initializing create_model()
2025-02-25 19:31:35,922:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:35,923:INFO:Checking exceptions
2025-02-25 19:31:35,923:INFO:Importing libraries
2025-02-25 19:31:35,923:INFO:Copying training dataset
2025-02-25 19:31:35,937:INFO:Defining folds
2025-02-25 19:31:35,938:INFO:Declaring metric variables
2025-02-25 19:31:35,952:INFO:Importing untrained model
2025-02-25 19:31:35,968:INFO:Random Forest Classifier Imported successfully
2025-02-25 19:31:35,990:INFO:Starting cross validation
2025-02-25 19:31:36,020:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:37,790:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:37,793:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:37,794:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:37,800:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:37,803:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:37,807:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:37,811:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:37,816:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:37,925:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:37,941:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:37,952:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,164:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,174:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,188:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,213:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,224:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,233:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,670:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,673:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,676:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,709:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,716:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:38,724:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:39,132:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:39,140:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:39,149:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:39,159:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:39,169:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:39,177:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:39,204:INFO:Calculating mean and std
2025-02-25 19:31:39,208:INFO:Creating metrics dataframe
2025-02-25 19:31:39,214:INFO:Uploading results into container
2025-02-25 19:31:39,216:INFO:Uploading model into container now
2025-02-25 19:31:39,217:INFO:_master_model_container: 7
2025-02-25 19:31:39,217:INFO:_display_container: 2
2025-02-25 19:31:39,218:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 19:31:39,219:INFO:create_model() successfully completed......................................
2025-02-25 19:31:39,559:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:39,560:INFO:Creating metrics dataframe
2025-02-25 19:31:39,588:INFO:Initializing Quadratic Discriminant Analysis
2025-02-25 19:31:39,589:INFO:Total runtime is 0.38479867776234944 minutes
2025-02-25 19:31:39,601:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:39,602:INFO:Initializing create_model()
2025-02-25 19:31:39,602:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:39,602:INFO:Checking exceptions
2025-02-25 19:31:39,602:INFO:Importing libraries
2025-02-25 19:31:39,603:INFO:Copying training dataset
2025-02-25 19:31:39,611:INFO:Defining folds
2025-02-25 19:31:39,611:INFO:Declaring metric variables
2025-02-25 19:31:39,622:INFO:Importing untrained model
2025-02-25 19:31:39,633:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-25 19:31:39,651:INFO:Starting cross validation
2025-02-25 19:31:39,676:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:40,611:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:40,615:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,619:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,624:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:40,626:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,628:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,631:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,647:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,648:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:40,654:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,665:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,684:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,904:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:40,906:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,911:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,918:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,939:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:40,944:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,957:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:40,969:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,054:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:41,055:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:41,057:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,060:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,060:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,065:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,070:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,072:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:41,074:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,127:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:41,128:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,135:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,139:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,354:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:41,359:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,366:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:41,368:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,370:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,378:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,380:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,388:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:41,420:INFO:Calculating mean and std
2025-02-25 19:31:41,424:INFO:Creating metrics dataframe
2025-02-25 19:31:41,427:INFO:Uploading results into container
2025-02-25 19:31:41,428:INFO:Uploading model into container now
2025-02-25 19:31:41,429:INFO:_master_model_container: 8
2025-02-25 19:31:41,429:INFO:_display_container: 2
2025-02-25 19:31:41,431:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-25 19:31:41,431:INFO:create_model() successfully completed......................................
2025-02-25 19:31:41,773:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:41,773:INFO:Creating metrics dataframe
2025-02-25 19:31:41,806:INFO:Initializing Ada Boost Classifier
2025-02-25 19:31:41,806:INFO:Total runtime is 0.4217445532480876 minutes
2025-02-25 19:31:41,814:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:41,815:INFO:Initializing create_model()
2025-02-25 19:31:41,815:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:41,816:INFO:Checking exceptions
2025-02-25 19:31:41,816:INFO:Importing libraries
2025-02-25 19:31:41,816:INFO:Copying training dataset
2025-02-25 19:31:41,841:INFO:Defining folds
2025-02-25 19:31:41,842:INFO:Declaring metric variables
2025-02-25 19:31:41,850:INFO:Importing untrained model
2025-02-25 19:31:41,863:INFO:Ada Boost Classifier Imported successfully
2025-02-25 19:31:41,881:INFO:Starting cross validation
2025-02-25 19:31:41,904:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:42,868:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 19:31:42,869:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 19:31:43,045:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 19:31:43,080:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 19:31:43,244:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:43,249:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,256:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,262:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:43,268:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,314:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:43,316:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,323:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,344:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,459:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:43,465:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,475:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,489:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,540:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:43,544:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,551:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,553:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:43,555:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,609:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 19:31:43,616:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 19:31:43,877:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 19:31:43,932:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:43,935:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,946:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,952:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:43,958:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,959:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:43,963:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,973:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:43,977:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:43,983:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,039:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 19:31:44,167:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:44,169:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,174:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,177:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,341:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 19:31:44,347:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-25 19:31:44,396:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:44,400:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,411:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,418:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,646:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:44,651:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,661:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,671:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,689:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:44,692:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,702:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,712:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:44,732:INFO:Calculating mean and std
2025-02-25 19:31:44,737:INFO:Creating metrics dataframe
2025-02-25 19:31:44,742:INFO:Uploading results into container
2025-02-25 19:31:44,744:INFO:Uploading model into container now
2025-02-25 19:31:44,745:INFO:_master_model_container: 9
2025-02-25 19:31:44,745:INFO:_display_container: 2
2025-02-25 19:31:44,746:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-02-25 19:31:44,746:INFO:create_model() successfully completed......................................
2025-02-25 19:31:45,102:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:45,102:INFO:Creating metrics dataframe
2025-02-25 19:31:45,134:INFO:Initializing Gradient Boosting Classifier
2025-02-25 19:31:45,134:INFO:Total runtime is 0.4772162119547526 minutes
2025-02-25 19:31:45,146:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:45,146:INFO:Initializing create_model()
2025-02-25 19:31:45,147:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:45,147:INFO:Checking exceptions
2025-02-25 19:31:45,147:INFO:Importing libraries
2025-02-25 19:31:45,147:INFO:Copying training dataset
2025-02-25 19:31:45,159:INFO:Defining folds
2025-02-25 19:31:45,159:INFO:Declaring metric variables
2025-02-25 19:31:45,173:INFO:Importing untrained model
2025-02-25 19:31:45,188:INFO:Gradient Boosting Classifier Imported successfully
2025-02-25 19:31:45,211:INFO:Starting cross validation
2025-02-25 19:31:45,233:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:47,308:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:47,317:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:47,326:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:47,347:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:47,404:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:47,408:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:47,412:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:47,416:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:47,432:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:47,439:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:47,450:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:47,467:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:47,524:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:47,529:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:47,538:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:47,546:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:48,180:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:48,183:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:48,195:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:48,198:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:48,249:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:48,250:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:48,254:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:48,257:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:48,309:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:48,311:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:48,314:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:48,317:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:49,024:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:49,033:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:49,048:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:49,057:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:49,372:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:49,378:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:49,385:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:49,392:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:49,477:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:49,483:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:49,488:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:49,498:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:49,518:INFO:Calculating mean and std
2025-02-25 19:31:49,524:INFO:Creating metrics dataframe
2025-02-25 19:31:49,530:INFO:Uploading results into container
2025-02-25 19:31:49,532:INFO:Uploading model into container now
2025-02-25 19:31:49,533:INFO:_master_model_container: 10
2025-02-25 19:31:49,533:INFO:_display_container: 2
2025-02-25 19:31:49,534:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-25 19:31:49,534:INFO:create_model() successfully completed......................................
2025-02-25 19:31:49,902:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:49,902:INFO:Creating metrics dataframe
2025-02-25 19:31:49,929:INFO:Initializing Linear Discriminant Analysis
2025-02-25 19:31:49,930:INFO:Total runtime is 0.5571492513020834 minutes
2025-02-25 19:31:49,940:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:49,941:INFO:Initializing create_model()
2025-02-25 19:31:49,941:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:49,941:INFO:Checking exceptions
2025-02-25 19:31:49,941:INFO:Importing libraries
2025-02-25 19:31:49,941:INFO:Copying training dataset
2025-02-25 19:31:49,951:INFO:Defining folds
2025-02-25 19:31:49,951:INFO:Declaring metric variables
2025-02-25 19:31:49,959:INFO:Importing untrained model
2025-02-25 19:31:49,968:INFO:Linear Discriminant Analysis Imported successfully
2025-02-25 19:31:49,984:INFO:Starting cross validation
2025-02-25 19:31:50,007:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:51,211:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:51,213:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,215:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,221:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,332:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:51,337:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,344:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,355:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,367:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:51,370:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,378:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,385:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,568:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:51,572:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,579:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,587:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,624:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:51,629:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,634:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,643:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,696:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:51,703:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,710:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,719:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,751:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:51,756:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,760:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,764:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,880:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:51,882:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,892:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:51,899:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:52,207:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:52,210:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:52,219:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:52,229:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:52,252:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-25 19:31:52,254:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:52,263:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:52,269:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:52,286:INFO:Calculating mean and std
2025-02-25 19:31:52,288:INFO:Creating metrics dataframe
2025-02-25 19:31:52,292:INFO:Uploading results into container
2025-02-25 19:31:52,293:INFO:Uploading model into container now
2025-02-25 19:31:52,296:INFO:_master_model_container: 11
2025-02-25 19:31:52,296:INFO:_display_container: 2
2025-02-25 19:31:52,297:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-25 19:31:52,297:INFO:create_model() successfully completed......................................
2025-02-25 19:31:52,658:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:52,658:INFO:Creating metrics dataframe
2025-02-25 19:31:52,691:INFO:Initializing Extra Trees Classifier
2025-02-25 19:31:52,691:INFO:Total runtime is 0.6031529664993287 minutes
2025-02-25 19:31:52,699:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:52,700:INFO:Initializing create_model()
2025-02-25 19:31:52,700:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:52,700:INFO:Checking exceptions
2025-02-25 19:31:52,700:INFO:Importing libraries
2025-02-25 19:31:52,700:INFO:Copying training dataset
2025-02-25 19:31:52,712:INFO:Defining folds
2025-02-25 19:31:52,712:INFO:Declaring metric variables
2025-02-25 19:31:52,720:INFO:Importing untrained model
2025-02-25 19:31:52,727:INFO:Extra Trees Classifier Imported successfully
2025-02-25 19:31:52,745:INFO:Starting cross validation
2025-02-25 19:31:52,770:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:54,898:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:54,900:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:54,912:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:54,913:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:54,921:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:54,924:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:54,926:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:54,935:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:54,948:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,040:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,051:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,062:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,212:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,239:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,247:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,584:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,595:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,600:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,717:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,726:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,737:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,839:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,849:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:55,859:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:56,358:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:56,359:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:56,365:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:56,366:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:56,371:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:56,374:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:56,396:INFO:Calculating mean and std
2025-02-25 19:31:56,400:INFO:Creating metrics dataframe
2025-02-25 19:31:56,407:INFO:Uploading results into container
2025-02-25 19:31:56,409:INFO:Uploading model into container now
2025-02-25 19:31:56,410:INFO:_master_model_container: 12
2025-02-25 19:31:56,410:INFO:_display_container: 2
2025-02-25 19:31:56,412:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-02-25 19:31:56,412:INFO:create_model() successfully completed......................................
2025-02-25 19:31:56,731:INFO:SubProcess create_model() end ==================================
2025-02-25 19:31:56,732:INFO:Creating metrics dataframe
2025-02-25 19:31:56,759:INFO:Initializing Light Gradient Boosting Machine
2025-02-25 19:31:56,760:INFO:Total runtime is 0.6709577759106955 minutes
2025-02-25 19:31:56,770:INFO:SubProcess create_model() called ==================================
2025-02-25 19:31:56,770:INFO:Initializing create_model()
2025-02-25 19:31:56,771:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:31:56,771:INFO:Checking exceptions
2025-02-25 19:31:56,771:INFO:Importing libraries
2025-02-25 19:31:56,771:INFO:Copying training dataset
2025-02-25 19:31:56,782:INFO:Defining folds
2025-02-25 19:31:56,783:INFO:Declaring metric variables
2025-02-25 19:31:56,794:INFO:Importing untrained model
2025-02-25 19:31:56,805:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-25 19:31:56,824:INFO:Starting cross validation
2025-02-25 19:31:56,847:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:31:59,333:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,342:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,346:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,352:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,362:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,369:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,433:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,445:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,455:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,585:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,593:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,603:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,607:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,616:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,620:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:31:59,623:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,750:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,764:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,770:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,792:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,803:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,810:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,842:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,851:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:31:59,862:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:00,605:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:00,614:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:00,625:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:00,630:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:00,637:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:00,646:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:00,667:INFO:Calculating mean and std
2025-02-25 19:32:00,671:INFO:Creating metrics dataframe
2025-02-25 19:32:00,680:INFO:Uploading results into container
2025-02-25 19:32:00,682:INFO:Uploading model into container now
2025-02-25 19:32:00,683:INFO:_master_model_container: 13
2025-02-25 19:32:00,683:INFO:_display_container: 2
2025-02-25 19:32:00,685:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-25 19:32:00,685:INFO:create_model() successfully completed......................................
2025-02-25 19:32:01,059:INFO:SubProcess create_model() end ==================================
2025-02-25 19:32:01,060:INFO:Creating metrics dataframe
2025-02-25 19:32:01,105:INFO:Initializing Dummy Classifier
2025-02-25 19:32:01,106:INFO:Total runtime is 0.7434139688809713 minutes
2025-02-25 19:32:01,117:INFO:SubProcess create_model() called ==================================
2025-02-25 19:32:01,117:INFO:Initializing create_model()
2025-02-25 19:32:01,118:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98B9A5610>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:32:01,118:INFO:Checking exceptions
2025-02-25 19:32:01,118:INFO:Importing libraries
2025-02-25 19:32:01,119:INFO:Copying training dataset
2025-02-25 19:32:01,135:INFO:Defining folds
2025-02-25 19:32:01,136:INFO:Declaring metric variables
2025-02-25 19:32:01,146:INFO:Importing untrained model
2025-02-25 19:32:01,190:INFO:Dummy Classifier Imported successfully
2025-02-25 19:32:01,205:INFO:Starting cross validation
2025-02-25 19:32:01,232:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:32:02,407:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,415:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,419:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:02,424:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,444:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,454:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,458:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:02,460:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,527:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,537:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,539:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:02,542:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,655:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,664:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,668:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:02,675:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,688:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,694:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,696:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,696:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:02,701:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,702:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,704:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:02,708:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,788:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,799:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,801:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:02,805:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,806:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,815:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:02,821:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:02,823:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:03,127:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:03,132:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:03,139:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:03,140:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:03,142:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:03,148:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:03,156:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:03,161:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:03,179:INFO:Calculating mean and std
2025-02-25 19:32:03,183:INFO:Creating metrics dataframe
2025-02-25 19:32:03,187:INFO:Uploading results into container
2025-02-25 19:32:03,189:INFO:Uploading model into container now
2025-02-25 19:32:03,189:INFO:_master_model_container: 14
2025-02-25 19:32:03,190:INFO:_display_container: 2
2025-02-25 19:32:03,190:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-02-25 19:32:03,190:INFO:create_model() successfully completed......................................
2025-02-25 19:32:03,481:INFO:SubProcess create_model() end ==================================
2025-02-25 19:32:03,482:INFO:Creating metrics dataframe
2025-02-25 19:32:03,509:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-02-25 19:32:03,536:INFO:Initializing create_model()
2025-02-25 19:32:03,538:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:32:03,538:INFO:Checking exceptions
2025-02-25 19:32:03,542:INFO:Importing libraries
2025-02-25 19:32:03,542:INFO:Copying training dataset
2025-02-25 19:32:03,551:INFO:Defining folds
2025-02-25 19:32:03,551:INFO:Declaring metric variables
2025-02-25 19:32:03,551:INFO:Importing untrained model
2025-02-25 19:32:03,551:INFO:Declaring custom model
2025-02-25 19:32:03,552:INFO:Naive Bayes Imported successfully
2025-02-25 19:32:03,578:INFO:Cross validation set to False
2025-02-25 19:32:03,578:INFO:Fitting Model
2025-02-25 19:32:03,706:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000118 seconds.
2025-02-25 19:32:03,706:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 19:32:03,707:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 19:32:03,707:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 19:32:03,707:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:03,708:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:03,708:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:03,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,709:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,709:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,709:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,710:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,710:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,711:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,711:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,711:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,711:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,712:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,712:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,712:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,713:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,713:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,713:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,716:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,717:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,717:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,717:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,718:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,718:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,718:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,719:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,719:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,719:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,720:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,720:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,720:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,721:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,721:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,721:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,722:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,722:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,722:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,723:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,723:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,724:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,724:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,724:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,725:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,725:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,725:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,725:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,725:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,727:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,727:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,727:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,727:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,730:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,730:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,730:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,731:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,731:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,731:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,734:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,734:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,734:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,734:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,734:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,734:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,737:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,737:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,737:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,737:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,737:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,739:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,739:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,739:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,739:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,739:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,742:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,742:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,742:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,742:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,742:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,747:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,747:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,747:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,750:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,750:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,750:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,750:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,752:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,752:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,752:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,753:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,753:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,753:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,755:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,755:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,755:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,755:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,764:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,764:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,765:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,765:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,765:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,768:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,768:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,769:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,769:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,769:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,770:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,770:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,770:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,771:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,771:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,772:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,772:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,772:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,772:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,773:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,773:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,774:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,774:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,775:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,775:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,776:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,776:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,776:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,777:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,777:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,779:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,779:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,780:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,780:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,782:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,782:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,782:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,783:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,783:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,783:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,784:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,784:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,785:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,785:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,786:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,786:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,786:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,787:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,787:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,789:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,790:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,790:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,791:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,791:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,792:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,792:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,793:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,793:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,794:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,794:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,794:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,796:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,796:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,797:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,797:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,798:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,798:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,798:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,799:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,799:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,804:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,804:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,809:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,809:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,810:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,810:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,810:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,810:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,810:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:03,849:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-25 19:32:03,849:INFO:create_model() successfully completed......................................
2025-02-25 19:32:04,216:INFO:_master_model_container: 14
2025-02-25 19:32:04,216:INFO:_display_container: 2
2025-02-25 19:32:04,217:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-25 19:32:04,217:INFO:compare_models() successfully completed......................................
2025-02-25 19:32:07,763:INFO:Initializing create_model()
2025-02-25 19:32:07,764:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=rf, fold=10, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:32:07,764:INFO:Checking exceptions
2025-02-25 19:32:07,798:INFO:Importing libraries
2025-02-25 19:32:07,798:INFO:Copying training dataset
2025-02-25 19:32:07,810:INFO:Defining folds
2025-02-25 19:32:07,810:INFO:Declaring metric variables
2025-02-25 19:32:07,820:INFO:Importing untrained model
2025-02-25 19:32:07,832:INFO:Random Forest Classifier Imported successfully
2025-02-25 19:32:07,850:INFO:Starting cross validation
2025-02-25 19:32:07,877:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:32:09,673:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:09,688:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:09,689:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:09,695:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:09,698:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:09,704:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:09,743:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:09,752:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:09,760:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:09,934:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:09,939:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:09,953:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,048:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,058:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,069:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,175:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,185:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,195:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,610:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,617:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,629:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,701:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,707:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:10,717:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:11,021:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:11,028:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:11,030:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:11,034:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:11,038:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:11,045:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:11,066:INFO:Calculating mean and std
2025-02-25 19:32:11,070:INFO:Creating metrics dataframe
2025-02-25 19:32:11,087:INFO:Finalizing model
2025-02-25 19:32:11,215:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000109 seconds.
2025-02-25 19:32:11,215:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 19:32:11,216:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 19:32:11,216:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 19:32:11,217:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:11,217:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:11,217:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:11,217:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,218:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,218:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,219:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,219:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,219:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,245:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,245:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,258:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,258:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,258:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,270:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,270:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,270:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,271:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,271:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,272:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,273:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,273:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,273:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,274:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,274:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,275:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,275:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,277:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,277:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,278:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,278:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,279:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,279:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,280:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,280:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,280:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,281:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,281:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,282:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,282:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,284:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,284:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,287:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,288:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,289:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,289:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,290:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,290:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,294:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,294:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,295:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,295:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,296:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,296:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,297:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,297:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,298:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,298:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,299:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,300:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,300:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,302:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,302:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,303:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,303:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,304:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,304:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,305:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,306:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,306:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,307:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,309:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,309:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,310:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,310:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,311:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,312:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,312:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,313:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,313:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,315:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,317:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,317:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,317:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,319:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,319:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,320:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,320:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,320:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,321:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,321:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,322:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,322:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,322:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,323:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,323:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,324:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,324:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,324:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,326:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,326:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,327:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,327:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,327:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,328:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,329:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,329:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,330:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,332:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,334:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,336:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,336:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,337:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,337:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,338:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,338:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,339:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,339:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,340:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,340:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,340:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,341:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,341:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,343:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,343:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,346:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,346:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,346:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,346:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,347:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,347:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,347:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,348:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,348:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,348:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,348:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,349:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,349:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:11,884:INFO:Uploading results into container
2025-02-25 19:32:11,886:INFO:Uploading model into container now
2025-02-25 19:32:11,924:INFO:_master_model_container: 15
2025-02-25 19:32:11,924:INFO:_display_container: 3
2025-02-25 19:32:11,925:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 19:32:11,925:INFO:create_model() successfully completed......................................
2025-02-25 19:32:12,325:INFO:Initializing tune_model()
2025-02-25 19:32:12,325:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=10, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2025-02-25 19:32:12,325:INFO:Checking exceptions
2025-02-25 19:32:12,368:INFO:Copying training dataset
2025-02-25 19:32:12,379:INFO:Checking base model
2025-02-25 19:32:12,380:INFO:Base model : Random Forest Classifier
2025-02-25 19:32:12,390:INFO:Declaring metric variables
2025-02-25 19:32:12,402:INFO:Defining Hyperparameters
2025-02-25 19:32:12,755:INFO:Tuning with n_jobs=-1
2025-02-25 19:32:12,755:INFO:Initializing RandomizedSearchCV
2025-02-25 19:32:48,876:INFO:best_params: {'actual_estimator__n_estimators': 230, 'actual_estimator__min_samples_split': 2, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.05, 'actual_estimator__max_features': 'sqrt', 'actual_estimator__max_depth': 7, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': {}, 'actual_estimator__bootstrap': False}
2025-02-25 19:32:48,879:INFO:Hyperparameter search completed
2025-02-25 19:32:48,881:INFO:SubProcess create_model() called ==================================
2025-02-25 19:32:48,883:INFO:Initializing create_model()
2025-02-25 19:32:48,883:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001B98C2F4850>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 230, 'min_samples_split': 2, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.05, 'max_features': 'sqrt', 'max_depth': 7, 'criterion': 'entropy', 'class_weight': {}, 'bootstrap': False})
2025-02-25 19:32:48,883:INFO:Checking exceptions
2025-02-25 19:32:48,884:INFO:Importing libraries
2025-02-25 19:32:48,884:INFO:Copying training dataset
2025-02-25 19:32:48,895:INFO:Defining folds
2025-02-25 19:32:48,896:INFO:Declaring metric variables
2025-02-25 19:32:48,907:INFO:Importing untrained model
2025-02-25 19:32:48,907:INFO:Declaring custom model
2025-02-25 19:32:48,920:INFO:Random Forest Classifier Imported successfully
2025-02-25 19:32:48,942:INFO:Starting cross validation
2025-02-25 19:32:48,962:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:32:50,966:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:50,974:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:50,977:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:50,983:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,019:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,026:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,030:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:51,033:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,077:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,088:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,096:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:51,102:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,342:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,355:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,366:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,565:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,577:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,583:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:51,589:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,881:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,890:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:51,901:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,403:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,412:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,415:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:52,419:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,553:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,564:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,566:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:32:52,573:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,914:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,922:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,930:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,968:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,976:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:52,983:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:53,004:INFO:Calculating mean and std
2025-02-25 19:32:53,007:INFO:Creating metrics dataframe
2025-02-25 19:32:53,026:INFO:Finalizing model
2025-02-25 19:32:53,162:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000097 seconds.
2025-02-25 19:32:53,162:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 19:32:53,162:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 19:32:53,163:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 19:32:53,163:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:53,163:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:53,163:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:53,163:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,164:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,165:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,166:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,169:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,169:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,170:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,172:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,172:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,178:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,179:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,179:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,179:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,184:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,185:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,185:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,185:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,185:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,187:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,188:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,190:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,191:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,192:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,195:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,195:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,197:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,199:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,201:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,201:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,201:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,201:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,201:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,203:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,203:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,205:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,205:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,206:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,206:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,207:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,207:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,208:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,208:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,209:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,209:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,213:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,213:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,214:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,215:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,215:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,217:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,217:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,217:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,218:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,218:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,219:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,245:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,245:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,258:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,270:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,270:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,270:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,271:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,271:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,272:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,272:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,273:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,273:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,274:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,274:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,275:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,275:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,277:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,278:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,278:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,279:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,279:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,280:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,280:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,281:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,281:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,281:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,282:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,287:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,287:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,288:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,288:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,289:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,289:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,290:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:53,294:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:54,045:INFO:Uploading results into container
2025-02-25 19:32:54,046:INFO:Uploading model into container now
2025-02-25 19:32:54,047:INFO:_master_model_container: 16
2025-02-25 19:32:54,047:INFO:_display_container: 4
2025-02-25 19:32:54,050:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 19:32:54,050:INFO:create_model() successfully completed......................................
2025-02-25 19:32:54,360:INFO:SubProcess create_model() end ==================================
2025-02-25 19:32:54,361:INFO:choose_better activated
2025-02-25 19:32:54,371:INFO:SubProcess create_model() called ==================================
2025-02-25 19:32:54,373:INFO:Initializing create_model()
2025-02-25 19:32:54,373:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:32:54,374:INFO:Checking exceptions
2025-02-25 19:32:54,379:INFO:Importing libraries
2025-02-25 19:32:54,379:INFO:Copying training dataset
2025-02-25 19:32:54,389:INFO:Defining folds
2025-02-25 19:32:54,389:INFO:Declaring metric variables
2025-02-25 19:32:54,389:INFO:Importing untrained model
2025-02-25 19:32:54,390:INFO:Declaring custom model
2025-02-25 19:32:54,392:INFO:Random Forest Classifier Imported successfully
2025-02-25 19:32:54,393:INFO:Starting cross validation
2025-02-25 19:32:54,419:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-25 19:32:56,652:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:56,672:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:56,682:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:56,697:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:56,708:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:56,723:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:56,724:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:56,736:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:56,740:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:56,988:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:56,989:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,001:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,001:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,010:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,014:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,523:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,528:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,537:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,894:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,903:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,912:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,915:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,924:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:57,935:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:58,381:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:58,389:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:58,397:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:58,438:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:58,443:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:58,450:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:32:58,466:INFO:Calculating mean and std
2025-02-25 19:32:58,468:INFO:Creating metrics dataframe
2025-02-25 19:32:58,472:INFO:Finalizing model
2025-02-25 19:32:58,600:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000056 seconds.
2025-02-25 19:32:58,600:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 19:32:58,601:INFO:[LightGBM] [Info] Total Bins 338
2025-02-25 19:32:58,601:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-25 19:32:58,601:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:58,602:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:58,602:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:32:58,602:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,602:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,606:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,606:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,606:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,607:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,607:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,607:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,608:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,608:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,610:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,610:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,611:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,611:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,611:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,612:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,614:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,614:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,618:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,619:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,619:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,624:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,624:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,625:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,625:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,625:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,626:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,626:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,627:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,627:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,627:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,631:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,631:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,632:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,632:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,651:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,651:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,651:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,656:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,656:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,656:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,679:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,679:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,681:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,682:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,682:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,684:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,684:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,684:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,684:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,685:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,685:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,685:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,685:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,685:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,687:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,687:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,687:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,688:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,689:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,689:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,691:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,691:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,692:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,692:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,693:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,693:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,694:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,694:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,695:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,697:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,697:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,698:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,698:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,699:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,699:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,701:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,701:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,703:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,705:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,705:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,709:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,710:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,710:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,710:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,712:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,712:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,712:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,713:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,713:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,715:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,715:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,716:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,716:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,718:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,718:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,718:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,718:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,719:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,719:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,719:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,720:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,720:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,720:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,721:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,721:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,722:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,722:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,722:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,723:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,723:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,723:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,724:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,725:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,725:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,727:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,728:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,728:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,728:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,730:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,730:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,731:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,731:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,733:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:58,733:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:32:59,326:INFO:Uploading results into container
2025-02-25 19:32:59,328:INFO:Uploading model into container now
2025-02-25 19:32:59,329:INFO:_master_model_container: 17
2025-02-25 19:32:59,329:INFO:_display_container: 5
2025-02-25 19:32:59,331:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 19:32:59,331:INFO:create_model() successfully completed......................................
2025-02-25 19:32:59,670:INFO:SubProcess create_model() end ==================================
2025-02-25 19:32:59,671:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) result for Accuracy is 0.6401
2025-02-25 19:32:59,673:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) result for Accuracy is 0.6918
2025-02-25 19:32:59,674:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) is best model
2025-02-25 19:32:59,674:INFO:choose_better completed
2025-02-25 19:32:59,705:INFO:_master_model_container: 17
2025-02-25 19:32:59,705:INFO:_display_container: 4
2025-02-25 19:32:59,708:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 19:32:59,708:INFO:tune_model() successfully completed......................................
2025-02-25 19:33:00,031:INFO:Initializing evaluate_model()
2025-02-25 19:33:00,031:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-02-25 19:33:00,060:INFO:Initializing plot_model()
2025-02-25 19:33:00,060:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2025-02-25 19:33:00,061:INFO:Checking exceptions
2025-02-25 19:33:00,117:INFO:Preloading libraries
2025-02-25 19:33:00,162:INFO:Copying training dataset
2025-02-25 19:33:00,163:INFO:Plot type: pipeline
2025-02-25 19:33:00,825:INFO:Visual Rendered Successfully
2025-02-25 19:33:01,247:INFO:plot_model() successfully completed......................................
2025-02-25 19:33:01,256:INFO:Initializing plot_model()
2025-02-25 19:33:01,257:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-02-25 19:33:01,257:INFO:Checking exceptions
2025-02-25 19:33:01,320:INFO:Preloading libraries
2025-02-25 19:33:01,345:INFO:Copying training dataset
2025-02-25 19:33:01,346:INFO:Plot type: confusion_matrix
2025-02-25 19:33:01,570:INFO:Fitting Model
2025-02-25 19:33:01,571:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-02-25 19:33:01,572:INFO:Scoring test/hold-out set
2025-02-25 19:33:02,142:INFO:Visual Rendered Successfully
2025-02-25 19:33:02,547:INFO:plot_model() successfully completed......................................
2025-02-25 19:33:02,549:INFO:Initializing plot_model()
2025-02-25 19:33:02,549:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), plot=feature, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-02-25 19:33:02,549:INFO:Checking exceptions
2025-02-25 19:33:02,611:INFO:Preloading libraries
2025-02-25 19:33:02,633:INFO:Copying training dataset
2025-02-25 19:33:02,634:INFO:Plot type: feature
2025-02-25 19:33:02,636:WARNING:No coef_ found. Trying feature_importances_
2025-02-25 19:33:03,016:INFO:Visual Rendered Successfully
2025-02-25 19:33:03,414:INFO:plot_model() successfully completed......................................
2025-02-25 19:33:45,461:INFO:Initializing finalize_model()
2025-02-25 19:33:45,461:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-25 19:33:45,463:INFO:Finalizing RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-25 19:33:45,472:INFO:Initializing create_model()
2025-02-25 19:33:45,472:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-25 19:33:45,472:INFO:Checking exceptions
2025-02-25 19:33:45,477:INFO:Importing libraries
2025-02-25 19:33:45,477:INFO:Copying training dataset
2025-02-25 19:33:45,479:INFO:Defining folds
2025-02-25 19:33:45,479:INFO:Declaring metric variables
2025-02-25 19:33:45,479:INFO:Importing untrained model
2025-02-25 19:33:45,480:INFO:Declaring custom model
2025-02-25 19:33:45,482:INFO:Random Forest Classifier Imported successfully
2025-02-25 19:33:45,506:INFO:Cross validation set to False
2025-02-25 19:33:45,506:INFO:Fitting Model
2025-02-25 19:33:45,644:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000134 seconds.
2025-02-25 19:33:45,644:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-25 19:33:45,646:INFO:[LightGBM] [Info] Total Bins 464
2025-02-25 19:33:45,646:INFO:[LightGBM] [Info] Number of data points in the train set: 204, number of used features: 7
2025-02-25 19:33:45,646:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:33:45,647:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:33:45,647:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-25 19:33:45,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,651:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,651:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,656:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,656:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,656:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,679:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,679:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,681:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,681:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,682:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,682:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,683:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,683:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,683:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,684:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,684:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,684:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,685:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,685:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,685:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,687:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,687:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,689:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,689:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,689:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,689:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,690:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,690:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,691:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,692:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,692:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,693:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,693:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,694:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,694:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,694:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,695:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,695:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,697:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,697:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,698:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,699:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,699:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,703:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,703:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,705:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,705:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,709:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,709:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,710:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,711:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,711:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,712:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,712:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,713:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,713:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,714:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,715:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,716:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,716:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,717:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,717:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,718:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,718:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,719:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,719:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,720:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,720:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,721:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,721:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,722:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,722:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,723:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,723:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,724:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,724:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,725:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,727:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,728:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,730:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,730:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,731:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,733:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,734:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,734:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,737:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,737:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,739:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,742:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,743:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,747:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,747:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,750:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,750:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,751:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,751:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,752:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,752:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,753:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,755:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,756:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,756:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,759:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,760:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,762:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,764:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,765:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,765:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,767:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,768:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,768:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,769:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,770:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,770:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,771:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,771:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,772:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,772:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,773:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,774:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,774:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,775:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,775:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,776:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,776:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,777:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,778:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,779:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,779:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,780:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,780:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,781:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,782:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,783:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,783:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,783:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,785:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,785:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,786:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,786:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,786:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,787:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,787:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,788:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,788:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,789:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,789:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,790:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,790:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,791:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,792:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,793:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,793:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,794:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,796:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,797:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,798:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,798:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,799:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,804:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,804:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:45,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-25 19:33:46,813:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-25 19:33:46,814:INFO:create_model() successfully completed......................................
2025-02-25 19:33:47,167:INFO:_master_model_container: 17
2025-02-25 19:33:47,168:INFO:_display_container: 4
2025-02-25 19:33:47,234:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-25 19:33:47,235:INFO:finalize_model() successfully completed......................................
2025-02-25 19:33:53,427:INFO:Initializing predict_model()
2025-02-25 19:33:53,427:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B98895BEC0>)
2025-02-25 19:33:53,428:INFO:Checking exceptions
2025-02-25 19:33:53,428:INFO:Preloading libraries
2025-02-25 19:34:14,279:INFO:Initializing predict_model()
2025-02-25 19:34:14,280:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001B98AAEAA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B98BD37B00>)
2025-02-25 19:34:14,280:INFO:Checking exceptions
2025-02-25 19:34:14,280:INFO:Preloading libraries
2025-02-25 19:34:14,287:INFO:Set up data.
2025-02-25 19:34:14,296:INFO:Set up index.
2025-02-25 19:34:14,568:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
                          ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
                          ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

  warnings.warn(traceback.format_exc())

2025-02-25 19:34:14,573:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:34:14,579:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:34:14,581:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-25 19:34:14,583:WARNING:C:\Users\Gabriel\anaconda3\envs\pycaret-env\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-25 19:34:32,481:INFO:Initializing save_model()
2025-02-25 19:34:32,481:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False), model_name=wheat_classifier_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Gabriel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImp...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=1,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-25 19:34:32,482:INFO:Adding model into prep_pipe
2025-02-25 19:34:32,482:WARNING:Only Model saved as it was a pipeline.
2025-02-25 19:34:32,754:INFO:wheat_classifier_model.pkl saved in current working directory
2025-02-25 19:34:32,809:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-25 19:34:32,810:INFO:save_model() successfully completed......................................
2025-02-26 14:45:21,195:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.2', 'setuptools': '75.1.0', 'pycaret': '3.3.2', 'IPython': '8.27.0', 'ipywidgets': '8.1.5', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.2', 'imblearn': '0.12.4', 'category_encoders': '2.6.4', 'lightgbm': '4.5.0', 'numba': '0.60.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.0', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.1.0', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.15', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.0', 'setuptools': '75.8.0', 'pycaret': '3.3.2', 'IPython': '8.32.0', 'ipywidgets': '8.1.5', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.5', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.3', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.11', 'machine': 'AMD64'}}
  warnings.warn(

2025-02-26 14:54:10,079:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-26 14:54:10,079:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-26 14:54:10,079:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-26 14:54:10,080:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-26 14:54:30,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-26 14:54:30,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-26 14:54:30,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-26 14:54:30,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-26 14:54:54,684:INFO:PyCaret ClassificationExperiment
2025-02-26 14:54:54,684:INFO:Logging name: wheat_classification
2025-02-26 14:54:54,684:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-26 14:54:54,684:INFO:version 3.3.2
2025-02-26 14:54:54,684:INFO:Initializing setup()
2025-02-26 14:54:54,684:INFO:self.USI: 0796
2025-02-26 14:54:54,684:INFO:self._variable_keys: {'USI', 'memory', 'gpu_n_jobs_param', 'y_test', 'logging_param', 'is_multiclass', 'log_plots_param', 'data', 'n_jobs_param', 'pipeline', 'exp_name_log', 'X_test', 'fix_imbalance', '_available_plots', 'seed', 'html_param', 'y_train', 'fold_generator', 'X', 'X_train', 'exp_id', 'fold_shuffle_param', 'target_param', 'fold_groups_param', 'gpu_param', 'y', '_ml_usecase', 'idx'}
2025-02-26 14:54:54,684:INFO:Checking environment
2025-02-26 14:54:54,685:INFO:python_version: 3.10.15
2025-02-26 14:54:54,685:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2025-02-26 14:54:54,685:INFO:machine: AMD64
2025-02-26 14:54:54,685:INFO:platform: Windows-10-10.0.26100-SP0
2025-02-26 14:54:54,691:INFO:Memory: svmem(total=16969424896, available=3223957504, percent=81.0, used=13745467392, free=3223957504)
2025-02-26 14:54:54,691:INFO:Physical Core: 4
2025-02-26 14:54:54,691:INFO:Logical Core: 8
2025-02-26 14:54:54,691:INFO:Checking libraries
2025-02-26 14:54:54,691:INFO:System:
2025-02-26 14:54:54,691:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2025-02-26 14:54:54,691:INFO:executable: c:\Users\Gabriel\anaconda3\envs\mlops\python.exe
2025-02-26 14:54:54,692:INFO:   machine: Windows-10-10.0.26100-SP0
2025-02-26 14:54:54,692:INFO:PyCaret required dependencies:
2025-02-26 14:54:56,995:INFO:                 pip: 24.2
2025-02-26 14:54:56,995:INFO:          setuptools: 75.1.0
2025-02-26 14:54:56,995:INFO:             pycaret: 3.3.2
2025-02-26 14:54:56,995:INFO:             IPython: 8.27.0
2025-02-26 14:54:56,995:INFO:          ipywidgets: 8.1.5
2025-02-26 14:54:56,995:INFO:                tqdm: 4.67.1
2025-02-26 14:54:56,996:INFO:               numpy: 1.26.4
2025-02-26 14:54:56,996:INFO:              pandas: 2.1.4
2025-02-26 14:54:56,996:INFO:              jinja2: 3.1.4
2025-02-26 14:54:56,996:INFO:               scipy: 1.11.4
2025-02-26 14:54:56,996:INFO:              joblib: 1.3.2
2025-02-26 14:54:56,996:INFO:             sklearn: 1.4.2
2025-02-26 14:54:56,996:INFO:                pyod: 2.0.2
2025-02-26 14:54:56,996:INFO:            imblearn: 0.12.4
2025-02-26 14:54:56,996:INFO:   category_encoders: 2.6.4
2025-02-26 14:54:56,996:INFO:            lightgbm: 4.5.0
2025-02-26 14:54:56,996:INFO:               numba: 0.60.0
2025-02-26 14:54:56,996:INFO:            requests: 2.32.3
2025-02-26 14:54:56,996:INFO:          matplotlib: 3.7.5
2025-02-26 14:54:56,996:INFO:          scikitplot: 0.3.7
2025-02-26 14:54:56,996:INFO:         yellowbrick: 1.5
2025-02-26 14:54:56,996:INFO:              plotly: 5.24.1
2025-02-26 14:54:56,996:INFO:    plotly-resampler: Not installed
2025-02-26 14:54:56,996:INFO:             kaleido: 0.2.1
2025-02-26 14:54:56,996:INFO:           schemdraw: 0.15
2025-02-26 14:54:56,996:INFO:         statsmodels: 0.14.4
2025-02-26 14:54:56,996:INFO:              sktime: 0.26.0
2025-02-26 14:54:56,996:INFO:               tbats: 1.1.3
2025-02-26 14:54:56,996:INFO:            pmdarima: 2.0.4
2025-02-26 14:54:56,996:INFO:              psutil: 5.9.0
2025-02-26 14:54:56,996:INFO:          markupsafe: 2.1.5
2025-02-26 14:54:56,997:INFO:             pickle5: Not installed
2025-02-26 14:54:56,997:INFO:         cloudpickle: 3.1.0
2025-02-26 14:54:56,997:INFO:         deprecation: 2.1.0
2025-02-26 14:54:56,997:INFO:              xxhash: 3.5.0
2025-02-26 14:54:56,997:INFO:           wurlitzer: Not installed
2025-02-26 14:54:56,997:INFO:PyCaret optional dependencies:
2025-02-26 14:55:03,752:INFO:                shap: 0.44.1
2025-02-26 14:55:03,753:INFO:           interpret: 0.6.7
2025-02-26 14:55:03,753:INFO:                umap: 0.5.7
2025-02-26 14:55:03,753:INFO:     ydata_profiling: 4.12.1
2025-02-26 14:55:03,753:INFO:  explainerdashboard: 0.4.7
2025-02-26 14:55:03,753:INFO:             autoviz: Not installed
2025-02-26 14:55:03,753:INFO:           fairlearn: 0.7.0
2025-02-26 14:55:03,753:INFO:          deepchecks: Not installed
2025-02-26 14:55:03,753:INFO:             xgboost: 2.1.3
2025-02-26 14:55:03,753:INFO:            catboost: 1.2.7
2025-02-26 14:55:03,753:INFO:              kmodes: 0.12.2
2025-02-26 14:55:03,753:INFO:             mlxtend: 0.23.3
2025-02-26 14:55:03,753:INFO:       statsforecast: 1.5.0
2025-02-26 14:55:03,753:INFO:        tune_sklearn: Not installed
2025-02-26 14:55:03,753:INFO:                 ray: Not installed
2025-02-26 14:55:03,753:INFO:            hyperopt: 0.2.7
2025-02-26 14:55:03,753:INFO:              optuna: 4.1.0
2025-02-26 14:55:03,753:INFO:               skopt: 0.10.2
2025-02-26 14:55:03,754:INFO:              mlflow: 2.18.0
2025-02-26 14:55:03,754:INFO:              gradio: 5.8.0
2025-02-26 14:55:03,754:INFO:             fastapi: 0.115.6
2025-02-26 14:55:03,754:INFO:             uvicorn: 0.32.1
2025-02-26 14:55:03,754:INFO:              m2cgen: 0.10.0
2025-02-26 14:55:03,754:INFO:           evidently: 0.4.40
2025-02-26 14:55:03,754:INFO:               fugue: 0.8.7
2025-02-26 14:55:03,754:INFO:           streamlit: Not installed
2025-02-26 14:55:03,754:INFO:             prophet: Not installed
2025-02-26 14:55:03,754:INFO:None
2025-02-26 14:55:03,754:INFO:Set up data.
2025-02-26 14:55:03,759:INFO:Set up folding strategy.
2025-02-26 14:55:03,760:INFO:Set up train/test split.
2025-02-26 14:55:03,767:INFO:Set up index.
2025-02-26 14:55:03,768:INFO:Assigning column types.
2025-02-26 14:55:03,770:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-26 14:55:03,841:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-26 14:55:03,849:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-26 14:55:03,902:INFO:Soft dependency imported: xgboost: 2.1.3
2025-02-26 14:55:03,907:INFO:Soft dependency imported: catboost: 1.2.7
2025-02-26 14:55:04,141:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-26 14:55:04,143:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-26 14:55:04,197:INFO:Soft dependency imported: xgboost: 2.1.3
2025-02-26 14:55:04,205:INFO:Soft dependency imported: catboost: 1.2.7
2025-02-26 14:55:04,208:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-26 14:55:04,262:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-26 14:55:04,293:INFO:Soft dependency imported: xgboost: 2.1.3
2025-02-26 14:55:04,297:INFO:Soft dependency imported: catboost: 1.2.7
2025-02-26 14:55:04,354:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-26 14:55:04,395:INFO:Soft dependency imported: xgboost: 2.1.3
2025-02-26 14:55:04,397:INFO:Soft dependency imported: catboost: 1.2.7
2025-02-26 14:55:04,398:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-26 14:55:04,503:INFO:Soft dependency imported: xgboost: 2.1.3
2025-02-26 14:55:04,505:INFO:Soft dependency imported: catboost: 1.2.7
2025-02-26 14:55:04,610:INFO:Soft dependency imported: xgboost: 2.1.3
2025-02-26 14:55:04,614:INFO:Soft dependency imported: catboost: 1.2.7
2025-02-26 14:55:04,618:INFO:Preparing preprocessing pipeline...
2025-02-26 14:55:04,621:INFO:Set up label encoding.
2025-02-26 14:55:04,621:INFO:Set up simple imputation.
2025-02-26 14:55:04,621:INFO:Set up imbalanced handling.
2025-02-26 14:55:04,621:INFO:Set up column transformation.
2025-02-26 14:55:04,621:INFO:Set up feature normalization.
2025-02-26 14:55:04,621:INFO:Set up feature selection.
2025-02-26 14:55:04,765:INFO:Soft dependency imported: xgboost: 2.1.3
2025-02-26 14:55:04,769:INFO:Soft dependency imported: catboost: 1.2.7
2025-02-26 14:55:04,997:INFO:Finished creating preprocessing pipeline.
2025-02-26 14:55:05,027:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Gabriel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImp...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=1,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2025-02-26 14:55:05,027:INFO:Creating final display dataframe.
2025-02-26 14:55:05,376:INFO:Setup _display_container:                     Description                 Value
0                    Session id                    42
1                        Target                  Type
2                   Target type            Multiclass
3                Target mapping      1: 0, 2: 1, 3: 2
4           Original data shape              (199, 8)
5        Transformed data shape              (204, 2)
6   Transformed train set shape              (144, 2)
7    Transformed test set shape               (60, 2)
8              Numeric features                     7
9                    Preprocess                  True
10              Imputation type                simple
11           Numeric imputation                  mean
12       Categorical imputation                  mode
13                Fix imbalance                  True
14         Fix imbalance method                 SMOTE
15               Transformation                  True
16        Transformation method           yeo-johnson
17                    Normalize                  True
18             Normalize method                zscore
19            Feature selection                  True
20     Feature selection method               classic
21  Feature selection estimator              lightgbm
22  Number of features selected                   0.2
23               Fold Generator       StratifiedKFold
24                  Fold Number                    10
25                     CPU Jobs                    -1
26                      Use GPU                 False
27               Log Experiment                 False
28              Experiment Name  wheat_classification
29                          USI                  0796
2025-02-26 14:55:05,510:INFO:Soft dependency imported: xgboost: 2.1.3
2025-02-26 14:55:05,514:INFO:Soft dependency imported: catboost: 1.2.7
2025-02-26 14:55:05,600:INFO:Soft dependency imported: xgboost: 2.1.3
2025-02-26 14:55:05,603:INFO:Soft dependency imported: catboost: 1.2.7
2025-02-26 14:55:05,605:INFO:setup() successfully completed in 10.93s...............
2025-02-26 14:55:05,630:INFO:Initializing compare_models()
2025-02-26 14:55:05,630:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, include=None, fold=10, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, 'include': None, 'exclude': None, 'fold': 10, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-26 14:55:05,630:INFO:Checking exceptions
2025-02-26 14:55:05,636:INFO:Preparing display monitor
2025-02-26 14:55:05,673:INFO:Initializing Logistic Regression
2025-02-26 14:55:05,673:INFO:Total runtime is 0.0 minutes
2025-02-26 14:55:05,680:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:05,680:INFO:Initializing create_model()
2025-02-26 14:55:05,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:05,681:INFO:Checking exceptions
2025-02-26 14:55:05,681:INFO:Importing libraries
2025-02-26 14:55:05,681:INFO:Copying training dataset
2025-02-26 14:55:05,686:INFO:Defining folds
2025-02-26 14:55:05,686:INFO:Declaring metric variables
2025-02-26 14:55:05,690:INFO:Importing untrained model
2025-02-26 14:55:05,696:INFO:Logistic Regression Imported successfully
2025-02-26 14:55:05,704:INFO:Starting cross validation
2025-02-26 14:55:05,717:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:20,900:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:20,910:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:20,914:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:20,920:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:20,967:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:20,980:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:20,991:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:20,998:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,014:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:21,025:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,029:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,034:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,296:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:21,304:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,311:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,316:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,537:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:21,544:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,550:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,560:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,566:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:21,571:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,571:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:21,576:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,576:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,580:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,581:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,585:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,635:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:21,646:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,652:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,658:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,742:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:21,745:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,745:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:21,747:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,750:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,752:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,756:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,758:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:21,777:INFO:Calculating mean and std
2025-02-26 14:55:21,779:INFO:Creating metrics dataframe
2025-02-26 14:55:21,785:INFO:Uploading results into container
2025-02-26 14:55:21,786:INFO:Uploading model into container now
2025-02-26 14:55:21,787:INFO:_master_model_container: 1
2025-02-26 14:55:21,787:INFO:_display_container: 2
2025-02-26 14:55:21,788:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-26 14:55:21,788:INFO:create_model() successfully completed......................................
2025-02-26 14:55:21,952:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:21,952:INFO:Creating metrics dataframe
2025-02-26 14:55:21,960:INFO:Initializing K Neighbors Classifier
2025-02-26 14:55:21,961:INFO:Total runtime is 0.27147491375605265 minutes
2025-02-26 14:55:21,967:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:21,968:INFO:Initializing create_model()
2025-02-26 14:55:21,968:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:21,968:INFO:Checking exceptions
2025-02-26 14:55:21,968:INFO:Importing libraries
2025-02-26 14:55:21,969:INFO:Copying training dataset
2025-02-26 14:55:21,978:INFO:Defining folds
2025-02-26 14:55:21,978:INFO:Declaring metric variables
2025-02-26 14:55:21,984:INFO:Importing untrained model
2025-02-26 14:55:21,990:INFO:K Neighbors Classifier Imported successfully
2025-02-26 14:55:22,002:INFO:Starting cross validation
2025-02-26 14:55:22,014:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:23,138:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,144:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,149:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,182:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,187:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,196:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,410:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,415:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,420:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,502:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,506:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,511:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,534:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,537:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,542:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,567:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,571:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,575:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,595:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,600:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,604:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,625:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,629:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,632:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,765:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,767:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,771:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,782:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,784:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,786:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:23,802:INFO:Calculating mean and std
2025-02-26 14:55:23,804:INFO:Creating metrics dataframe
2025-02-26 14:55:23,808:INFO:Uploading results into container
2025-02-26 14:55:23,808:INFO:Uploading model into container now
2025-02-26 14:55:23,810:INFO:_master_model_container: 2
2025-02-26 14:55:23,810:INFO:_display_container: 2
2025-02-26 14:55:23,810:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-26 14:55:23,810:INFO:create_model() successfully completed......................................
2025-02-26 14:55:23,966:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:23,966:INFO:Creating metrics dataframe
2025-02-26 14:55:23,979:INFO:Initializing Naive Bayes
2025-02-26 14:55:23,979:INFO:Total runtime is 0.30510467290878296 minutes
2025-02-26 14:55:23,986:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:23,986:INFO:Initializing create_model()
2025-02-26 14:55:23,986:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:23,986:INFO:Checking exceptions
2025-02-26 14:55:23,987:INFO:Importing libraries
2025-02-26 14:55:23,987:INFO:Copying training dataset
2025-02-26 14:55:23,994:INFO:Defining folds
2025-02-26 14:55:23,994:INFO:Declaring metric variables
2025-02-26 14:55:24,000:INFO:Importing untrained model
2025-02-26 14:55:24,050:INFO:Naive Bayes Imported successfully
2025-02-26 14:55:24,063:INFO:Starting cross validation
2025-02-26 14:55:24,085:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:24,992:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:24,997:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:24,999:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:25,001:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,017:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,024:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,027:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,069:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,073:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,077:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,268:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,271:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,272:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,279:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,279:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,283:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,429:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,434:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,438:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,461:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,465:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,469:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,509:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,512:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,516:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,645:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,651:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,661:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,704:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,711:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,714:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:25,734:INFO:Calculating mean and std
2025-02-26 14:55:25,736:INFO:Creating metrics dataframe
2025-02-26 14:55:25,739:INFO:Uploading results into container
2025-02-26 14:55:25,741:INFO:Uploading model into container now
2025-02-26 14:55:25,743:INFO:_master_model_container: 3
2025-02-26 14:55:25,743:INFO:_display_container: 2
2025-02-26 14:55:25,743:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-26 14:55:25,743:INFO:create_model() successfully completed......................................
2025-02-26 14:55:25,903:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:25,903:INFO:Creating metrics dataframe
2025-02-26 14:55:25,914:INFO:Initializing Decision Tree Classifier
2025-02-26 14:55:25,914:INFO:Total runtime is 0.33734743197758993 minutes
2025-02-26 14:55:25,919:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:25,920:INFO:Initializing create_model()
2025-02-26 14:55:25,920:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:25,920:INFO:Checking exceptions
2025-02-26 14:55:25,920:INFO:Importing libraries
2025-02-26 14:55:25,920:INFO:Copying training dataset
2025-02-26 14:55:25,926:INFO:Defining folds
2025-02-26 14:55:25,926:INFO:Declaring metric variables
2025-02-26 14:55:25,930:INFO:Importing untrained model
2025-02-26 14:55:25,935:INFO:Decision Tree Classifier Imported successfully
2025-02-26 14:55:25,945:INFO:Starting cross validation
2025-02-26 14:55:25,956:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:26,567:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,572:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,574:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,576:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,578:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,582:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,628:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,632:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,636:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,707:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,712:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,715:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,763:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,765:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,767:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,769:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,771:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,774:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,794:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,798:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,802:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,852:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,855:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,859:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,940:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,944:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,948:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,948:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,951:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,954:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:26,972:INFO:Calculating mean and std
2025-02-26 14:55:26,975:INFO:Creating metrics dataframe
2025-02-26 14:55:26,998:INFO:Uploading results into container
2025-02-26 14:55:26,999:INFO:Uploading model into container now
2025-02-26 14:55:27,000:INFO:_master_model_container: 4
2025-02-26 14:55:27,000:INFO:_display_container: 2
2025-02-26 14:55:27,000:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-02-26 14:55:27,000:INFO:create_model() successfully completed......................................
2025-02-26 14:55:27,151:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:27,151:INFO:Creating metrics dataframe
2025-02-26 14:55:27,160:INFO:Initializing SVM - Linear Kernel
2025-02-26 14:55:27,161:INFO:Total runtime is 0.35813090403874714 minutes
2025-02-26 14:55:27,165:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:27,166:INFO:Initializing create_model()
2025-02-26 14:55:27,166:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:27,166:INFO:Checking exceptions
2025-02-26 14:55:27,166:INFO:Importing libraries
2025-02-26 14:55:27,166:INFO:Copying training dataset
2025-02-26 14:55:27,171:INFO:Defining folds
2025-02-26 14:55:27,171:INFO:Declaring metric variables
2025-02-26 14:55:27,176:INFO:Importing untrained model
2025-02-26 14:55:27,182:INFO:SVM - Linear Kernel Imported successfully
2025-02-26 14:55:27,191:INFO:Starting cross validation
2025-02-26 14:55:27,201:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:27,709:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:27,711:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,715:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,717:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:27,719:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,743:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:27,746:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,749:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,753:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,757:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:27,759:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,763:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,767:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,772:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:27,774:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,778:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,781:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,832:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:27,834:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,838:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,841:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:27,843:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,895:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:27,897:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,901:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,902:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:27,905:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,927:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:27,927:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:27,929:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,930:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,933:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,934:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:27,935:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:27,937:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,046:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:28,048:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,051:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,052:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:28,054:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,064:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:28,066:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,069:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,071:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:28,073:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,090:INFO:Calculating mean and std
2025-02-26 14:55:28,092:INFO:Creating metrics dataframe
2025-02-26 14:55:28,095:INFO:Uploading results into container
2025-02-26 14:55:28,096:INFO:Uploading model into container now
2025-02-26 14:55:28,096:INFO:_master_model_container: 5
2025-02-26 14:55:28,098:INFO:_display_container: 2
2025-02-26 14:55:28,098:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-26 14:55:28,098:INFO:create_model() successfully completed......................................
2025-02-26 14:55:28,222:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:28,222:INFO:Creating metrics dataframe
2025-02-26 14:55:28,233:INFO:Initializing Ridge Classifier
2025-02-26 14:55:28,233:INFO:Total runtime is 0.37600952784220376 minutes
2025-02-26 14:55:28,239:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:28,240:INFO:Initializing create_model()
2025-02-26 14:55:28,240:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:28,240:INFO:Checking exceptions
2025-02-26 14:55:28,240:INFO:Importing libraries
2025-02-26 14:55:28,241:INFO:Copying training dataset
2025-02-26 14:55:28,247:INFO:Defining folds
2025-02-26 14:55:28,247:INFO:Declaring metric variables
2025-02-26 14:55:28,253:INFO:Importing untrained model
2025-02-26 14:55:28,295:INFO:Ridge Classifier Imported successfully
2025-02-26 14:55:28,309:INFO:Starting cross validation
2025-02-26 14:55:28,327:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:28,800:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:28,802:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,807:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,807:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,808:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:28,809:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:28,810:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,811:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,831:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:28,833:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,837:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,839:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:28,842:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,868:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:28,871:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,875:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,877:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:28,879:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,934:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:28,936:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,940:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,942:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:28,944:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,955:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:28,958:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,962:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:28,964:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:28,966:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,025:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:29,027:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,031:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,034:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:29,035:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:29,036:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,037:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,041:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,043:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:29,045:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,127:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:29,129:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:29,129:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,130:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,132:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,133:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:29,135:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,135:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,137:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:29,139:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:29,147:INFO:Calculating mean and std
2025-02-26 14:55:29,150:INFO:Creating metrics dataframe
2025-02-26 14:55:29,153:INFO:Uploading results into container
2025-02-26 14:55:29,154:INFO:Uploading model into container now
2025-02-26 14:55:29,155:INFO:_master_model_container: 6
2025-02-26 14:55:29,155:INFO:_display_container: 2
2025-02-26 14:55:29,156:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-02-26 14:55:29,156:INFO:create_model() successfully completed......................................
2025-02-26 14:55:29,293:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:29,293:INFO:Creating metrics dataframe
2025-02-26 14:55:29,301:INFO:Initializing Random Forest Classifier
2025-02-26 14:55:29,301:INFO:Total runtime is 0.3938087264696757 minutes
2025-02-26 14:55:29,307:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:29,307:INFO:Initializing create_model()
2025-02-26 14:55:29,307:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:29,307:INFO:Checking exceptions
2025-02-26 14:55:29,308:INFO:Importing libraries
2025-02-26 14:55:29,308:INFO:Copying training dataset
2025-02-26 14:55:29,312:INFO:Defining folds
2025-02-26 14:55:29,312:INFO:Declaring metric variables
2025-02-26 14:55:29,317:INFO:Importing untrained model
2025-02-26 14:55:29,322:INFO:Random Forest Classifier Imported successfully
2025-02-26 14:55:29,334:INFO:Starting cross validation
2025-02-26 14:55:29,345:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:30,187:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,191:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,195:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,205:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,210:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,213:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,219:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,223:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,228:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,280:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,283:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,287:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,326:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,330:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,333:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,374:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,378:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,382:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,436:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,439:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,443:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,544:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,548:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,551:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,712:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,715:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,717:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,748:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,752:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,756:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:30,768:INFO:Calculating mean and std
2025-02-26 14:55:30,771:INFO:Creating metrics dataframe
2025-02-26 14:55:30,775:INFO:Uploading results into container
2025-02-26 14:55:30,776:INFO:Uploading model into container now
2025-02-26 14:55:30,776:INFO:_master_model_container: 7
2025-02-26 14:55:30,777:INFO:_display_container: 2
2025-02-26 14:55:30,777:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-26 14:55:30,778:INFO:create_model() successfully completed......................................
2025-02-26 14:55:30,894:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:30,894:INFO:Creating metrics dataframe
2025-02-26 14:55:30,905:INFO:Initializing Quadratic Discriminant Analysis
2025-02-26 14:55:30,905:INFO:Total runtime is 0.42053433259328205 minutes
2025-02-26 14:55:30,909:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:30,910:INFO:Initializing create_model()
2025-02-26 14:55:30,910:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:30,910:INFO:Checking exceptions
2025-02-26 14:55:30,910:INFO:Importing libraries
2025-02-26 14:55:30,910:INFO:Copying training dataset
2025-02-26 14:55:30,914:INFO:Defining folds
2025-02-26 14:55:30,914:INFO:Declaring metric variables
2025-02-26 14:55:30,919:INFO:Importing untrained model
2025-02-26 14:55:30,923:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-26 14:55:30,932:INFO:Starting cross validation
2025-02-26 14:55:30,941:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:31,350:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:31,352:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,354:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:31,355:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:31,356:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,356:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,356:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,359:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,359:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,361:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,363:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:31,364:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,365:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,369:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:31,371:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,376:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,380:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,427:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:31,429:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,432:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,440:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,468:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:31,470:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,475:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,479:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,490:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:31,492:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,495:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,499:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,504:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:31,506:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,509:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,514:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,604:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:31,605:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:31,606:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,607:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,609:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,611:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,613:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,615:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:31,622:INFO:Calculating mean and std
2025-02-26 14:55:31,624:INFO:Creating metrics dataframe
2025-02-26 14:55:31,627:INFO:Uploading results into container
2025-02-26 14:55:31,628:INFO:Uploading model into container now
2025-02-26 14:55:31,629:INFO:_master_model_container: 8
2025-02-26 14:55:31,629:INFO:_display_container: 2
2025-02-26 14:55:31,629:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-26 14:55:31,629:INFO:create_model() successfully completed......................................
2025-02-26 14:55:31,758:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:31,758:INFO:Creating metrics dataframe
2025-02-26 14:55:31,766:INFO:Initializing Ada Boost Classifier
2025-02-26 14:55:31,766:INFO:Total runtime is 0.43488525549570717 minutes
2025-02-26 14:55:31,770:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:31,770:INFO:Initializing create_model()
2025-02-26 14:55:31,770:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:31,770:INFO:Checking exceptions
2025-02-26 14:55:31,770:INFO:Importing libraries
2025-02-26 14:55:31,770:INFO:Copying training dataset
2025-02-26 14:55:31,775:INFO:Defining folds
2025-02-26 14:55:31,775:INFO:Declaring metric variables
2025-02-26 14:55:31,779:INFO:Importing untrained model
2025-02-26 14:55:31,785:INFO:Ada Boost Classifier Imported successfully
2025-02-26 14:55:31,792:INFO:Starting cross validation
2025-02-26 14:55:31,802:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:32,175:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-26 14:55:32,175:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-26 14:55:32,211:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-26 14:55:32,226:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-26 14:55:32,358:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:32,367:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,371:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:32,372:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,373:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,381:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,381:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:32,383:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:32,384:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,386:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,454:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:32,456:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,470:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,476:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,530:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:32,532:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,537:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,542:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,568:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-26 14:55:32,583:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-26 14:55:32,594:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-26 14:55:32,639:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-26 14:55:32,736:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:32,739:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,746:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,747:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:32,749:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,752:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,753:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,755:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:32,757:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,759:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:32,761:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,765:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,767:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:32,768:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,812:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:32,814:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,817:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,820:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-26 14:55:32,820:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,835:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-26 14:55:32,948:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:32,949:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,952:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,954:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,960:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:32,962:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,964:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,966:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:32,976:INFO:Calculating mean and std
2025-02-26 14:55:32,979:INFO:Creating metrics dataframe
2025-02-26 14:55:32,982:INFO:Uploading results into container
2025-02-26 14:55:32,983:INFO:Uploading model into container now
2025-02-26 14:55:32,984:INFO:_master_model_container: 9
2025-02-26 14:55:32,984:INFO:_display_container: 2
2025-02-26 14:55:32,985:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-02-26 14:55:32,986:INFO:create_model() successfully completed......................................
2025-02-26 14:55:33,108:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:33,108:INFO:Creating metrics dataframe
2025-02-26 14:55:33,120:INFO:Initializing Gradient Boosting Classifier
2025-02-26 14:55:33,120:INFO:Total runtime is 0.4574591080347697 minutes
2025-02-26 14:55:33,125:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:33,126:INFO:Initializing create_model()
2025-02-26 14:55:33,126:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:33,126:INFO:Checking exceptions
2025-02-26 14:55:33,126:INFO:Importing libraries
2025-02-26 14:55:33,126:INFO:Copying training dataset
2025-02-26 14:55:33,130:INFO:Defining folds
2025-02-26 14:55:33,130:INFO:Declaring metric variables
2025-02-26 14:55:33,135:INFO:Importing untrained model
2025-02-26 14:55:33,142:INFO:Gradient Boosting Classifier Imported successfully
2025-02-26 14:55:33,151:INFO:Starting cross validation
2025-02-26 14:55:33,160:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:34,070:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:34,072:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,076:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,081:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,089:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:34,092:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,098:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,103:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,116:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:34,118:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,122:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,132:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,170:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:34,173:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,177:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,183:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,632:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:34,634:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,636:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,640:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,670:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:34,672:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,676:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,680:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,708:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:34,710:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,715:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,719:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,748:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:34,751:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,755:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,758:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,882:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:34,883:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,885:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,888:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,914:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:34,915:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,917:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,920:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:34,933:INFO:Calculating mean and std
2025-02-26 14:55:34,935:INFO:Creating metrics dataframe
2025-02-26 14:55:34,938:INFO:Uploading results into container
2025-02-26 14:55:34,940:INFO:Uploading model into container now
2025-02-26 14:55:34,941:INFO:_master_model_container: 10
2025-02-26 14:55:34,941:INFO:_display_container: 2
2025-02-26 14:55:34,943:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-26 14:55:34,943:INFO:create_model() successfully completed......................................
2025-02-26 14:55:35,115:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:35,116:INFO:Creating metrics dataframe
2025-02-26 14:55:35,132:INFO:Initializing Linear Discriminant Analysis
2025-02-26 14:55:35,132:INFO:Total runtime is 0.4909837086995443 minutes
2025-02-26 14:55:35,139:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:35,139:INFO:Initializing create_model()
2025-02-26 14:55:35,140:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:35,140:INFO:Checking exceptions
2025-02-26 14:55:35,140:INFO:Importing libraries
2025-02-26 14:55:35,140:INFO:Copying training dataset
2025-02-26 14:55:35,144:INFO:Defining folds
2025-02-26 14:55:35,144:INFO:Declaring metric variables
2025-02-26 14:55:35,149:INFO:Importing untrained model
2025-02-26 14:55:35,152:INFO:Linear Discriminant Analysis Imported successfully
2025-02-26 14:55:35,159:INFO:Starting cross validation
2025-02-26 14:55:35,168:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:35,549:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:35,551:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,551:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:35,553:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,555:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,557:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,559:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,563:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:35,565:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,569:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,573:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,588:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:35,590:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,596:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,599:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,630:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:35,632:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,680:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,684:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,732:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:35,737:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,744:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,751:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,781:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:35,783:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,787:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,793:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,876:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:35,886:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,919:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:35,936:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:36,085:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:36,086:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:36,089:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:36,094:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:36,103:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-02-26 14:55:36,105:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:36,109:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:36,112:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:36,131:INFO:Calculating mean and std
2025-02-26 14:55:36,133:INFO:Creating metrics dataframe
2025-02-26 14:55:36,136:INFO:Uploading results into container
2025-02-26 14:55:36,137:INFO:Uploading model into container now
2025-02-26 14:55:36,137:INFO:_master_model_container: 11
2025-02-26 14:55:36,137:INFO:_display_container: 2
2025-02-26 14:55:36,138:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-26 14:55:36,138:INFO:create_model() successfully completed......................................
2025-02-26 14:55:36,341:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:36,341:INFO:Creating metrics dataframe
2025-02-26 14:55:36,354:INFO:Initializing Extra Trees Classifier
2025-02-26 14:55:36,354:INFO:Total runtime is 0.5113538821538289 minutes
2025-02-26 14:55:36,360:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:36,361:INFO:Initializing create_model()
2025-02-26 14:55:36,361:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:36,361:INFO:Checking exceptions
2025-02-26 14:55:36,361:INFO:Importing libraries
2025-02-26 14:55:36,361:INFO:Copying training dataset
2025-02-26 14:55:36,366:INFO:Defining folds
2025-02-26 14:55:36,368:INFO:Declaring metric variables
2025-02-26 14:55:36,373:INFO:Importing untrained model
2025-02-26 14:55:36,378:INFO:Extra Trees Classifier Imported successfully
2025-02-26 14:55:36,388:INFO:Starting cross validation
2025-02-26 14:55:36,401:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:37,171:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,176:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,178:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,179:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,180:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,182:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,183:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,186:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,187:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,236:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,239:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,243:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,327:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,332:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,335:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,406:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,410:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,413:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,450:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,454:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,458:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,467:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,471:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,476:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,731:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,733:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,736:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,776:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,778:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,781:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:37,785:INFO:Calculating mean and std
2025-02-26 14:55:37,787:INFO:Creating metrics dataframe
2025-02-26 14:55:37,790:INFO:Uploading results into container
2025-02-26 14:55:37,791:INFO:Uploading model into container now
2025-02-26 14:55:37,792:INFO:_master_model_container: 12
2025-02-26 14:55:37,792:INFO:_display_container: 2
2025-02-26 14:55:37,792:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-02-26 14:55:37,793:INFO:create_model() successfully completed......................................
2025-02-26 14:55:37,942:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:37,942:INFO:Creating metrics dataframe
2025-02-26 14:55:37,953:INFO:Initializing Extreme Gradient Boosting
2025-02-26 14:55:37,953:INFO:Total runtime is 0.5379987160364786 minutes
2025-02-26 14:55:37,958:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:37,958:INFO:Initializing create_model()
2025-02-26 14:55:37,958:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:37,958:INFO:Checking exceptions
2025-02-26 14:55:37,958:INFO:Importing libraries
2025-02-26 14:55:37,958:INFO:Copying training dataset
2025-02-26 14:55:37,962:INFO:Defining folds
2025-02-26 14:55:37,963:INFO:Declaring metric variables
2025-02-26 14:55:37,967:INFO:Importing untrained model
2025-02-26 14:55:37,973:INFO:Extreme Gradient Boosting Imported successfully
2025-02-26 14:55:37,981:INFO:Starting cross validation
2025-02-26 14:55:37,993:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:38,637:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,641:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,642:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,646:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,650:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,650:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,654:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,659:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,663:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,664:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,669:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,671:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,673:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,677:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,681:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,822:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,825:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,828:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,840:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,843:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,848:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,872:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,875:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,879:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,944:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,948:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,949:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,950:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,952:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,953:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:38,968:INFO:Calculating mean and std
2025-02-26 14:55:38,970:INFO:Creating metrics dataframe
2025-02-26 14:55:38,972:INFO:Uploading results into container
2025-02-26 14:55:38,973:INFO:Uploading model into container now
2025-02-26 14:55:38,974:INFO:_master_model_container: 13
2025-02-26 14:55:38,974:INFO:_display_container: 2
2025-02-26 14:55:38,976:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2025-02-26 14:55:38,976:INFO:create_model() successfully completed......................................
2025-02-26 14:55:39,115:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:39,115:INFO:Creating metrics dataframe
2025-02-26 14:55:39,127:INFO:Initializing Light Gradient Boosting Machine
2025-02-26 14:55:39,127:INFO:Total runtime is 0.5575600028038025 minutes
2025-02-26 14:55:39,131:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:39,132:INFO:Initializing create_model()
2025-02-26 14:55:39,132:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:39,132:INFO:Checking exceptions
2025-02-26 14:55:39,132:INFO:Importing libraries
2025-02-26 14:55:39,132:INFO:Copying training dataset
2025-02-26 14:55:39,137:INFO:Defining folds
2025-02-26 14:55:39,137:INFO:Declaring metric variables
2025-02-26 14:55:39,144:INFO:Importing untrained model
2025-02-26 14:55:39,182:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-26 14:55:39,196:INFO:Starting cross validation
2025-02-26 14:55:39,214:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:40,424:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,429:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,433:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,523:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,528:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,531:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,577:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,582:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,586:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,676:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,680:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,680:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,684:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,684:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,728:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,732:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,736:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,741:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,749:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,757:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,794:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,798:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:40,800:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:40,802:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:41,495:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:41,498:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:41,504:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:41,555:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:41,561:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:41,566:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:41,580:INFO:Calculating mean and std
2025-02-26 14:55:41,586:INFO:Creating metrics dataframe
2025-02-26 14:55:41,591:INFO:Uploading results into container
2025-02-26 14:55:41,592:INFO:Uploading model into container now
2025-02-26 14:55:41,593:INFO:_master_model_container: 14
2025-02-26 14:55:41,594:INFO:_display_container: 2
2025-02-26 14:55:41,595:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-26 14:55:41,595:INFO:create_model() successfully completed......................................
2025-02-26 14:55:41,841:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:41,841:INFO:Creating metrics dataframe
2025-02-26 14:55:41,890:INFO:Initializing CatBoost Classifier
2025-02-26 14:55:41,890:INFO:Total runtime is 0.6036141872406006 minutes
2025-02-26 14:55:41,904:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:41,906:INFO:Initializing create_model()
2025-02-26 14:55:41,907:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:41,907:INFO:Checking exceptions
2025-02-26 14:55:41,907:INFO:Importing libraries
2025-02-26 14:55:41,908:INFO:Copying training dataset
2025-02-26 14:55:41,928:INFO:Defining folds
2025-02-26 14:55:41,929:INFO:Declaring metric variables
2025-02-26 14:55:41,947:INFO:Importing untrained model
2025-02-26 14:55:41,966:INFO:CatBoost Classifier Imported successfully
2025-02-26 14:55:41,993:INFO:Starting cross validation
2025-02-26 14:55:42,025:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:47,364:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,368:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,372:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,515:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,518:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,520:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,523:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,524:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,527:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,527:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,531:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,535:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,747:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,756:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:47,760:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:48,551:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:48,555:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:48,559:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:48,954:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:48,958:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:48,961:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:48,996:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:48,998:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,001:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,016:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
2 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
2 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\catboost\core.py", line 5245, in fit
    self._fit(X, y, cat_features, text_features, embedding_features, None, graph, sample_weight, None, None, None, None, baseline, use_best_model,
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\catboost\core.py", line 2410, in _fit
    self._train(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\catboost\core.py", line 1790, in _train
    self._object._train(train_pool, test_pool, params, allow_clear_pool, init_model._object if init_model else None)
  File "_catboost.pyx", line 5017, in _catboost._CatBoost._train
  File "_catboost.pyx", line 5066, in _catboost._CatBoost._train
_catboost.CatBoostError: catboost/libs/train_lib/dir_helper.cpp:20: Can't create train working dir: catboost_info

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2025-02-26 14:55:49,017:INFO:Calculating mean and std
2025-02-26 14:55:49,019:INFO:Creating metrics dataframe
2025-02-26 14:55:49,022:INFO:Uploading results into container
2025-02-26 14:55:49,023:INFO:Uploading model into container now
2025-02-26 14:55:49,024:INFO:_master_model_container: 15
2025-02-26 14:55:49,024:INFO:_display_container: 2
2025-02-26 14:55:49,024:INFO:<catboost.core.CatBoostClassifier object at 0x000001DD5B116710>
2025-02-26 14:55:49,024:INFO:create_model() successfully completed......................................
2025-02-26 14:55:49,162:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:49,162:INFO:Creating metrics dataframe
2025-02-26 14:55:49,173:INFO:Initializing Dummy Classifier
2025-02-26 14:55:49,173:INFO:Total runtime is 0.7250014305114746 minutes
2025-02-26 14:55:49,177:INFO:SubProcess create_model() called ==================================
2025-02-26 14:55:49,178:INFO:Initializing create_model()
2025-02-26 14:55:49,178:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5B155C60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:49,178:INFO:Checking exceptions
2025-02-26 14:55:49,178:INFO:Importing libraries
2025-02-26 14:55:49,178:INFO:Copying training dataset
2025-02-26 14:55:49,184:INFO:Defining folds
2025-02-26 14:55:49,184:INFO:Declaring metric variables
2025-02-26 14:55:49,192:INFO:Importing untrained model
2025-02-26 14:55:49,197:INFO:Dummy Classifier Imported successfully
2025-02-26 14:55:49,203:INFO:Starting cross validation
2025-02-26 14:55:49,214:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:49,603:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,608:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,610:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:49,612:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,629:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,632:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,635:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:49,637:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,638:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,641:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,643:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:49,645:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,657:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,661:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,663:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:49,665:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,713:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,717:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,719:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:49,721:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,742:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,746:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,749:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:49,751:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,752:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,756:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,758:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:49,761:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,768:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,771:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,773:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:49,775:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,874:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,877:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,879:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:49,881:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,887:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,890:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,892:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:55:49,894:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:49,914:INFO:Calculating mean and std
2025-02-26 14:55:49,917:INFO:Creating metrics dataframe
2025-02-26 14:55:49,920:INFO:Uploading results into container
2025-02-26 14:55:49,921:INFO:Uploading model into container now
2025-02-26 14:55:49,922:INFO:_master_model_container: 16
2025-02-26 14:55:49,922:INFO:_display_container: 2
2025-02-26 14:55:49,922:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-02-26 14:55:49,922:INFO:create_model() successfully completed......................................
2025-02-26 14:55:50,070:INFO:SubProcess create_model() end ==================================
2025-02-26 14:55:50,071:INFO:Creating metrics dataframe
2025-02-26 14:55:50,092:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-26 14:55:50,103:INFO:Initializing create_model()
2025-02-26 14:55:50,103:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:50,103:INFO:Checking exceptions
2025-02-26 14:55:50,107:INFO:Importing libraries
2025-02-26 14:55:50,107:INFO:Copying training dataset
2025-02-26 14:55:50,110:INFO:Defining folds
2025-02-26 14:55:50,110:INFO:Declaring metric variables
2025-02-26 14:55:50,110:INFO:Importing untrained model
2025-02-26 14:55:50,110:INFO:Declaring custom model
2025-02-26 14:55:50,111:INFO:Naive Bayes Imported successfully
2025-02-26 14:55:50,120:INFO:Cross validation set to False
2025-02-26 14:55:50,121:INFO:Fitting Model
2025-02-26 14:55:50,409:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000059 seconds.
2025-02-26 14:55:50,409:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-26 14:55:50,409:INFO:[LightGBM] [Info] Total Bins 338
2025-02-26 14:55:50,409:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-26 14:55:50,409:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:55:50,410:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:55:50,410:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:55:50,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,410:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,413:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,413:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,414:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,414:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,414:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,414:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,423:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,425:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,425:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,425:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,425:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,425:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,425:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,426:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,429:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,434:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,437:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,437:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,437:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,437:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,437:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,437:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,437:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,438:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,438:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,438:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,438:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,438:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,438:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,438:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,439:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,439:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,439:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,439:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,439:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,439:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,439:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,440:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,440:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,440:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,440:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,440:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,440:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,440:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,441:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,441:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,441:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,441:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,441:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,441:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,443:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,443:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,443:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,443:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,443:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,443:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,443:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,443:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,443:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,444:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,444:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,444:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,444:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,444:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,444:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,444:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,444:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,446:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,446:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,446:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,446:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,447:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,447:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,447:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,447:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,447:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,447:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,447:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,449:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,449:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,449:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,449:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,449:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,449:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,449:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,449:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,449:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,451:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:50,464:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-26 14:55:50,464:INFO:create_model() successfully completed......................................
2025-02-26 14:55:50,667:INFO:_master_model_container: 16
2025-02-26 14:55:50,667:INFO:_display_container: 2
2025-02-26 14:55:50,667:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-26 14:55:50,667:INFO:compare_models() successfully completed......................................
2025-02-26 14:55:50,694:INFO:Initializing create_model()
2025-02-26 14:55:50,694:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=rf, fold=10, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:55:50,694:INFO:Checking exceptions
2025-02-26 14:55:50,728:INFO:Importing libraries
2025-02-26 14:55:50,728:INFO:Copying training dataset
2025-02-26 14:55:50,733:INFO:Defining folds
2025-02-26 14:55:50,734:INFO:Declaring metric variables
2025-02-26 14:55:50,738:INFO:Importing untrained model
2025-02-26 14:55:50,747:INFO:Random Forest Classifier Imported successfully
2025-02-26 14:55:50,759:INFO:Starting cross validation
2025-02-26 14:55:50,773:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:55:51,757:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:51,762:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:51,763:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:51,766:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:51,768:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:51,771:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:51,963:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:51,969:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:51,973:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,017:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,022:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,025:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,026:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,029:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,035:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,080:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,085:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,089:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,256:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,260:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,264:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,356:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,358:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,362:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,499:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,499:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,501:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,501:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,503:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:55:52,521:INFO:Calculating mean and std
2025-02-26 14:55:52,523:INFO:Creating metrics dataframe
2025-02-26 14:55:52,532:INFO:Finalizing model
2025-02-26 14:55:52,594:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000065 seconds.
2025-02-26 14:55:52,594:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-26 14:55:52,595:INFO:[LightGBM] [Info] Total Bins 338
2025-02-26 14:55:52,595:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-26 14:55:52,595:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:55:52,595:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:55:52,597:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:55:52,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,598:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,598:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,598:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,598:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,598:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,598:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,599:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,599:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,599:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,599:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,602:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,602:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,602:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,602:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,602:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,602:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,606:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,606:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,606:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,606:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,606:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,606:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,606:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,607:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,607:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,607:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,607:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,607:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,607:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,608:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,608:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,608:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,608:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,608:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,608:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,610:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,610:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,610:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,610:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,610:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,610:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,610:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,611:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,611:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,611:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,612:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,614:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,614:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,614:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,614:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,614:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,615:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,615:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,615:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,615:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,615:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,615:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,615:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,615:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,615:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,619:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,619:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,619:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,619:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,619:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,619:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,619:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,619:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,624:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,624:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,624:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,624:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,624:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,624:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,624:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,625:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,625:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,625:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,625:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,625:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,625:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,626:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,626:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,626:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,627:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,627:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,627:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,627:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,627:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,631:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,632:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,632:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,632:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,632:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:55:52,843:INFO:Uploading results into container
2025-02-26 14:55:52,844:INFO:Uploading model into container now
2025-02-26 14:55:52,854:INFO:_master_model_container: 17
2025-02-26 14:55:52,855:INFO:_display_container: 3
2025-02-26 14:55:52,855:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-26 14:55:52,856:INFO:create_model() successfully completed......................................
2025-02-26 14:55:52,997:INFO:Initializing tune_model()
2025-02-26 14:55:52,997:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=10, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>)
2025-02-26 14:55:52,997:INFO:Checking exceptions
2025-02-26 14:55:53,026:INFO:Copying training dataset
2025-02-26 14:55:53,038:INFO:Checking base model
2025-02-26 14:55:53,038:INFO:Base model : Random Forest Classifier
2025-02-26 14:55:53,045:INFO:Declaring metric variables
2025-02-26 14:55:53,051:INFO:Defining Hyperparameters
2025-02-26 14:55:53,212:INFO:Tuning with n_jobs=-1
2025-02-26 14:55:53,213:INFO:Initializing RandomizedSearchCV
2025-02-26 14:56:15,948:INFO:best_params: {'actual_estimator__n_estimators': 230, 'actual_estimator__min_samples_split': 2, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.05, 'actual_estimator__max_features': 'sqrt', 'actual_estimator__max_depth': 7, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': {}, 'actual_estimator__bootstrap': False}
2025-02-26 14:56:15,950:INFO:Hyperparameter search completed
2025-02-26 14:56:15,950:INFO:SubProcess create_model() called ==================================
2025-02-26 14:56:15,952:INFO:Initializing create_model()
2025-02-26 14:56:15,952:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DD5F858190>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 230, 'min_samples_split': 2, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.05, 'max_features': 'sqrt', 'max_depth': 7, 'criterion': 'entropy', 'class_weight': {}, 'bootstrap': False})
2025-02-26 14:56:15,952:INFO:Checking exceptions
2025-02-26 14:56:15,952:INFO:Importing libraries
2025-02-26 14:56:15,952:INFO:Copying training dataset
2025-02-26 14:56:15,957:INFO:Defining folds
2025-02-26 14:56:15,957:INFO:Declaring metric variables
2025-02-26 14:56:15,963:INFO:Importing untrained model
2025-02-26 14:56:15,963:INFO:Declaring custom model
2025-02-26 14:56:15,971:INFO:Random Forest Classifier Imported successfully
2025-02-26 14:56:15,980:INFO:Starting cross validation
2025-02-26 14:56:15,992:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:56:17,432:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,435:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,437:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:56:17,439:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,560:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,565:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,569:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,699:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,703:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,705:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:56:17,707:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,749:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,755:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,757:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:56:17,760:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,916:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,922:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:17,924:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:56:17,926:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,055:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,060:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,065:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:56:18,065:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,199:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,203:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,205:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:56:18,207:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,274:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,279:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,283:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,553:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,553:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,556:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,558:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,558:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:18,577:INFO:Calculating mean and std
2025-02-26 14:56:18,580:INFO:Creating metrics dataframe
2025-02-26 14:56:18,587:INFO:Finalizing model
2025-02-26 14:56:18,638:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000027 seconds.
2025-02-26 14:56:18,638:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-26 14:56:18,638:INFO:[LightGBM] [Info] Total Bins 338
2025-02-26 14:56:18,638:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-26 14:56:18,638:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:56:18,638:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:56:18,638:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:56:18,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,645:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,649:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,652:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,665:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,669:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:18,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:19,083:INFO:Uploading results into container
2025-02-26 14:56:19,084:INFO:Uploading model into container now
2025-02-26 14:56:19,085:INFO:_master_model_container: 18
2025-02-26 14:56:19,085:INFO:_display_container: 4
2025-02-26 14:56:19,086:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-26 14:56:19,086:INFO:create_model() successfully completed......................................
2025-02-26 14:56:19,232:INFO:SubProcess create_model() end ==================================
2025-02-26 14:56:19,232:INFO:choose_better activated
2025-02-26 14:56:19,240:INFO:SubProcess create_model() called ==================================
2025-02-26 14:56:19,241:INFO:Initializing create_model()
2025-02-26 14:56:19,241:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:56:19,241:INFO:Checking exceptions
2025-02-26 14:56:19,244:INFO:Importing libraries
2025-02-26 14:56:19,244:INFO:Copying training dataset
2025-02-26 14:56:19,250:INFO:Defining folds
2025-02-26 14:56:19,250:INFO:Declaring metric variables
2025-02-26 14:56:19,250:INFO:Importing untrained model
2025-02-26 14:56:19,250:INFO:Declaring custom model
2025-02-26 14:56:19,251:INFO:Random Forest Classifier Imported successfully
2025-02-26 14:56:19,252:INFO:Starting cross validation
2025-02-26 14:56:19,271:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-26 14:56:20,043:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,049:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,054:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,060:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,067:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,071:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,183:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,187:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,188:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,192:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,196:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,199:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,207:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,214:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,259:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,265:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,270:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,399:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,403:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,406:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,429:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,433:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,436:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,693:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,693:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,697:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,699:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,701:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,703:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:20,715:INFO:Calculating mean and std
2025-02-26 14:56:20,715:INFO:Creating metrics dataframe
2025-02-26 14:56:20,718:INFO:Finalizing model
2025-02-26 14:56:20,799:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000047 seconds.
2025-02-26 14:56:20,799:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-26 14:56:20,799:INFO:[LightGBM] [Info] Total Bins 338
2025-02-26 14:56:20,799:INFO:[LightGBM] [Info] Number of data points in the train set: 144, number of used features: 7
2025-02-26 14:56:20,800:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:56:20,800:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:56:20,800:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:56:20,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,804:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,804:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,810:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,810:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,812:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,812:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,812:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,812:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,813:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,813:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,813:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,813:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,814:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,814:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,814:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,814:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,814:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,815:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,815:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,815:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,815:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,817:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,817:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,817:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,817:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,818:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,818:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,818:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,819:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,819:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,819:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,819:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,819:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,820:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,820:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,820:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,820:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,820:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,821:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,821:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,821:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,821:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,821:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,822:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,822:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,822:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,822:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,822:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,823:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,823:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,823:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,823:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,823:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,824:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,824:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,825:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,825:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,825:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,825:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,825:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,825:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,826:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,826:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,826:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,826:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,826:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,826:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,827:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,827:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,827:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,827:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,828:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,828:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,828:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,828:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,828:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,830:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,830:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,832:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,832:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,832:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,835:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,835:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,835:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,835:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,835:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,838:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,838:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,838:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,838:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,839:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,839:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,839:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,839:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,839:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,840:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,840:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,840:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,840:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,840:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,840:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,842:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,842:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,842:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,842:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,842:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,842:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,844:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,844:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,844:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,844:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,844:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,845:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,845:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,845:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,845:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,845:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,847:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,847:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,847:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,847:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,848:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,848:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,848:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,848:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,848:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,849:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,849:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,849:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,849:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,849:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,849:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,850:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,850:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,850:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,850:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,850:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,850:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,851:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,851:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,851:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,851:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,851:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,851:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,851:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,852:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,852:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,852:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,852:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,852:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,854:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,854:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,854:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,854:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,854:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,854:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,854:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,855:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,855:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,855:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,855:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,855:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,855:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,855:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,857:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,857:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,857:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,857:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,857:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,857:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,858:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,858:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,858:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,858:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,858:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,858:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,858:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,859:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,859:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,859:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,859:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,859:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,859:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,859:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,859:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:20,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:21,074:INFO:Uploading results into container
2025-02-26 14:56:21,075:INFO:Uploading model into container now
2025-02-26 14:56:21,075:INFO:_master_model_container: 19
2025-02-26 14:56:21,075:INFO:_display_container: 5
2025-02-26 14:56:21,076:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-26 14:56:21,076:INFO:create_model() successfully completed......................................
2025-02-26 14:56:21,239:INFO:SubProcess create_model() end ==================================
2025-02-26 14:56:21,240:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) result for Accuracy is 0.6401
2025-02-26 14:56:21,241:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) result for Accuracy is 0.6918
2025-02-26 14:56:21,242:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False) is best model
2025-02-26 14:56:21,242:INFO:choose_better completed
2025-02-26 14:56:21,262:INFO:_master_model_container: 19
2025-02-26 14:56:21,264:INFO:_display_container: 4
2025-02-26 14:56:21,266:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-26 14:56:21,267:INFO:tune_model() successfully completed......................................
2025-02-26 14:56:21,464:INFO:Initializing evaluate_model()
2025-02-26 14:56:21,465:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-02-26 14:56:21,488:INFO:Initializing plot_model()
2025-02-26 14:56:21,490:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, system=True)
2025-02-26 14:56:21,490:INFO:Checking exceptions
2025-02-26 14:56:21,518:INFO:Preloading libraries
2025-02-26 14:56:21,532:INFO:Copying training dataset
2025-02-26 14:56:21,534:INFO:Plot type: pipeline
2025-02-26 14:56:21,875:INFO:Visual Rendered Successfully
2025-02-26 14:56:22,023:INFO:plot_model() successfully completed......................................
2025-02-26 14:56:22,028:INFO:Initializing plot_model()
2025-02-26 14:56:22,028:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, system=True)
2025-02-26 14:56:22,028:INFO:Checking exceptions
2025-02-26 14:56:22,070:INFO:Preloading libraries
2025-02-26 14:56:22,081:INFO:Copying training dataset
2025-02-26 14:56:22,081:INFO:Plot type: confusion_matrix
2025-02-26 14:56:22,350:INFO:Fitting Model
2025-02-26 14:56:22,353:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-02-26 14:56:22,353:INFO:Scoring test/hold-out set
2025-02-26 14:56:22,563:INFO:Visual Rendered Successfully
2025-02-26 14:56:22,690:INFO:plot_model() successfully completed......................................
2025-02-26 14:56:22,691:INFO:Initializing plot_model()
2025-02-26 14:56:22,691:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, system=True)
2025-02-26 14:56:22,691:INFO:Checking exceptions
2025-02-26 14:56:22,722:INFO:Preloading libraries
2025-02-26 14:56:22,735:INFO:Copying training dataset
2025-02-26 14:56:22,735:INFO:Plot type: feature
2025-02-26 14:56:22,735:WARNING:No coef_ found. Trying feature_importances_
2025-02-26 14:56:22,948:INFO:Visual Rendered Successfully
2025-02-26 14:56:23,102:INFO:plot_model() successfully completed......................................
2025-02-26 14:56:23,142:INFO:Initializing finalize_model()
2025-02-26 14:56:23,142:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-26 14:56:23,143:INFO:Finalizing RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-26 14:56:23,150:INFO:Initializing create_model()
2025-02-26 14:56:23,150:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:56:23,150:INFO:Checking exceptions
2025-02-26 14:56:23,152:INFO:Importing libraries
2025-02-26 14:56:23,153:INFO:Copying training dataset
2025-02-26 14:56:23,153:INFO:Defining folds
2025-02-26 14:56:23,153:INFO:Declaring metric variables
2025-02-26 14:56:23,153:INFO:Importing untrained model
2025-02-26 14:56:23,153:INFO:Declaring custom model
2025-02-26 14:56:23,155:INFO:Random Forest Classifier Imported successfully
2025-02-26 14:56:23,167:INFO:Cross validation set to False
2025-02-26 14:56:23,167:INFO:Fitting Model
2025-02-26 14:56:23,219:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000043 seconds.
2025-02-26 14:56:23,220:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-26 14:56:23,220:INFO:[LightGBM] [Info] Total Bins 464
2025-02-26 14:56:23,220:INFO:[LightGBM] [Info] Number of data points in the train set: 204, number of used features: 7
2025-02-26 14:56:23,220:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:56:23,220:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:56:23,220:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:56:23,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,221:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,222:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,225:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,227:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,229:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,232:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,234:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,238:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,242:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,245:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,245:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,248:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,253:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,257:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,259:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,266:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,267:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,268:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,268:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,268:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,268:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,268:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,269:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:56:23,591:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-26 14:56:23,592:INFO:create_model() successfully completed......................................
2025-02-26 14:56:23,725:INFO:_master_model_container: 19
2025-02-26 14:56:23,725:INFO:_display_container: 4
2025-02-26 14:56:23,743:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-26 14:56:23,744:INFO:finalize_model() successfully completed......................................
2025-02-26 14:56:23,935:INFO:Initializing predict_model()
2025-02-26 14:56:23,935:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DD5F5EFF40>)
2025-02-26 14:56:23,935:INFO:Checking exceptions
2025-02-26 14:56:23,935:INFO:Preloading libraries
2025-02-26 14:56:23,940:INFO:Set up data.
2025-02-26 14:56:23,943:INFO:Set up index.
2025-02-26 14:56:24,073:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

  warnings.warn(traceback.format_exc())

2025-02-26 14:56:24,075:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:24,077:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:24,080:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:56:24,082:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:56:24,353:INFO:Initializing save_model()
2025-02-26 14:56:24,354:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False), model_name=wheat_classifier_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Gabriel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImp...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=1,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-26 14:56:24,354:INFO:Adding model into prep_pipe
2025-02-26 14:56:24,354:WARNING:Only Model saved as it was a pipeline.
2025-02-26 14:56:24,510:INFO:wheat_classifier_model.pkl saved in current working directory
2025-02-26 14:56:24,526:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-26 14:56:24,527:INFO:save_model() successfully completed......................................
2025-02-26 14:58:00,265:INFO:Initializing predict_model()
2025-02-26 14:58:00,265:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DD53313B50>)
2025-02-26 14:58:00,265:INFO:Checking exceptions
2025-02-26 14:58:00,266:INFO:Preloading libraries
2025-02-26 14:58:00,273:INFO:Set up data.
2025-02-26 14:58:00,280:INFO:Set up index.
2025-02-26 14:58:00,455:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

  warnings.warn(traceback.format_exc())

2025-02-26 14:58:00,456:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:58:00,460:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:58:00,461:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:58:00,462:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:58:15,878:INFO:Initializing predict_model()
2025-02-26 14:58:15,878:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DD55E75240>)
2025-02-26 14:58:15,878:INFO:Checking exceptions
2025-02-26 14:58:15,878:INFO:Preloading libraries
2025-02-26 14:58:15,880:INFO:Set up data.
2025-02-26 14:58:15,887:INFO:Set up index.
2025-02-26 14:58:16,016:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 706, in _multiclass_roc_auc_score
    if not np.allclose(1, y_score.sum(axis=1)):
  File "c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\numpy\core\_methods.py", line 49, in _sum
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1

  warnings.warn(traceback.format_exc())

2025-02-26 14:58:16,018:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:58:16,021:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:58:16,024:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-26 14:58:16,025:WARNING:c:\Users\Gabriel\anaconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-26 14:58:24,726:INFO:Initializing finalize_model()
2025-02-26 14:58:24,726:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-26 14:58:24,727:INFO:Finalizing RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-02-26 14:58:24,731:INFO:Initializing create_model()
2025-02-26 14:58:24,731:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DD58191C30>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},
                       criterion='entropy', max_depth=7, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.05, min_samples_leaf=4,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=230, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-26 14:58:24,731:INFO:Checking exceptions
2025-02-26 14:58:24,734:INFO:Importing libraries
2025-02-26 14:58:24,734:INFO:Copying training dataset
2025-02-26 14:58:24,735:INFO:Defining folds
2025-02-26 14:58:24,735:INFO:Declaring metric variables
2025-02-26 14:58:24,735:INFO:Importing untrained model
2025-02-26 14:58:24,735:INFO:Declaring custom model
2025-02-26 14:58:24,737:INFO:Random Forest Classifier Imported successfully
2025-02-26 14:58:24,776:INFO:Cross validation set to False
2025-02-26 14:58:24,776:INFO:Fitting Model
2025-02-26 14:58:24,860:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000049 seconds.
2025-02-26 14:58:24,860:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-02-26 14:58:24,860:INFO:[LightGBM] [Info] Total Bins 464
2025-02-26 14:58:24,860:INFO:[LightGBM] [Info] Number of data points in the train set: 204, number of used features: 7
2025-02-26 14:58:24,861:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:58:24,861:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:58:24,861:INFO:[LightGBM] [Info] Start training from score -1.098612
2025-02-26 14:58:24,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,865:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,865:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,865:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,865:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,866:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,866:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,866:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,866:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,866:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,866:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,866:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,867:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,867:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,867:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,867:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,867:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,867:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,868:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,868:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,868:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,868:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,868:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,872:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,872:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,872:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,873:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,873:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,873:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,873:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,873:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,873:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,874:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,874:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,874:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,874:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,875:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,875:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,875:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,875:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,875:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,875:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,875:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,876:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,876:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,876:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,876:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,876:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,876:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,877:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,878:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,879:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,879:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,879:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,879:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,881:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,881:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,881:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,881:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,881:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,882:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,882:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,882:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,883:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,883:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,883:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,883:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,883:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,884:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,884:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,884:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,884:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,884:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,884:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,886:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,888:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,889:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,890:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,890:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,890:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,890:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,890:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,891:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,891:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,891:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,891:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,891:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,891:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,895:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,895:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,895:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,895:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,897:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,897:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,897:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,898:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,898:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,898:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,898:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,899:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,899:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,899:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,899:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,900:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,900:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,900:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,900:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,900:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,901:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,903:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,903:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,903:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,904:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,904:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,904:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,905:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,905:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,905:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,905:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,906:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,906:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,906:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,906:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,906:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,906:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,907:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,907:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,907:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,907:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,907:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,907:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,908:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,908:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,908:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,908:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,908:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,908:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,909:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,909:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,909:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,909:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,909:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,909:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,911:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,911:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,911:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,911:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,911:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,914:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,914:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,914:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,914:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,914:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,914:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,914:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,915:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,915:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,915:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,915:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,915:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,915:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,915:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,915:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,916:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,916:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,916:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,917:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,917:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,917:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,917:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,917:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,917:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,919:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,919:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,919:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,919:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,919:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,921:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,921:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,921:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,922:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,922:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,922:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,922:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,923:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,923:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,923:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,923:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,923:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,924:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,924:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,924:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,924:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,924:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,924:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,924:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,924:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,925:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,925:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,925:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,925:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,925:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,925:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,925:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,926:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,926:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,926:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,926:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,926:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,926:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:24,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-02-26 14:58:25,263:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-26 14:58:25,263:INFO:create_model() successfully completed......................................
2025-02-26 14:58:25,446:INFO:_master_model_container: 19
2025-02-26 14:58:25,446:INFO:_display_container: 7
2025-02-26 14:58:25,464:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-26 14:58:25,464:INFO:finalize_model() successfully completed......................................
2025-02-26 14:58:25,663:INFO:Initializing save_model()
2025-02-26 14:58:25,663:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False), model_name=wheat_classifier_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Gabriel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImp...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=1,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-26 14:58:25,663:INFO:Adding model into prep_pipe
2025-02-26 14:58:25,663:WARNING:Only Model saved as it was a pipeline.
2025-02-26 14:58:25,844:INFO:wheat_classifier_model.pkl saved in current working directory
2025-02-26 14:58:25,949:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Area', 'Perimeter', 'Compactness',
                                             'Length', 'Width',
                                             'AsymmetryCoeff', 'Groove'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_va...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight={}, criterion='entropy',
                                        max_depth=7, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.05,
                                        min_samples_leaf=4, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=230,
                                        n_jobs=-1, oob_score=False,
                                        random_state=42, verbose=0,
                                        warm_start=False))],
         verbose=False)
2025-02-26 14:58:25,949:INFO:save_model() successfully completed......................................
2025-02-26 14:59:13,952:INFO:Initializing load_model()
2025-02-26 14:59:13,952:INFO:load_model(model_name=wheat_classifier_model, platform=None, authentication=None, verbose=True)
